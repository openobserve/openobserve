From ad817711e1a75d3fbf1ef96b9d7da770aecd8169 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 27 Mar 2025 12:37:11 +0530
Subject: [PATCH 01/61] add: join support

---
 .../addPanel/DashboardGeoMapsQueryBuilder.vue |  125 +-
 .../addPanel/DashboardMapsQueryBuilder.vue    |   86 +-
 .../addPanel/DashboardQueryBuilder.vue        |  112 +-
 .../addPanel/DashboardSankeyChartBuilder.vue  |  126 +-
 .../dashboards/addPanel/FieldList.vue         |  389 ++---
 .../addPanel/HistogramIntervalDropDown.vue    |   20 +-
 .../dashboards/addPanel/StreamFieldSelect.vue |  153 ++
 .../dynamicFunction/DynamicFunctionPopUp.vue  |   81 +
 .../dynamicFunction/RawQueryBuilder.vue       |   78 +
 .../dynamicFunction/SelectFunction.vue        |  443 ++++++
 .../dynamicFunction/functionValidation.json   |  718 +++++++++
 .../dashboards/viewPanel/ViewPanel.vue        |   23 +-
 web/src/composables/useDashboardPanel.ts      | 1377 +++++++++++------
 web/src/locales/languages/en.json             |    1 +
 .../convertDashboardSchemaVersion.ts          |  113 ++
 .../dashboard/convertDataIntoUnitValue.ts     |  830 ++++------
 web/src/utils/dashboard/convertSQLData.ts     |   12 +-
 web/src/utils/dashboard/convertTableData.ts   |    4 +-
 web/src/utils/query/sqlUtils.ts               |  389 +++++
 .../Dashboards/addPanel/AddJoinPopUp.vue      |  345 +++++
 .../views/Dashboards/addPanel/AddPanel.vue    |   73 +-
 .../addPanel/DashboardJoinsOption.vue         |  222 +++
 web/src/views/Dashboards/addPanel/Group.vue   |    4 +-
 23 files changed, 4296 insertions(+), 1428 deletions(-)
 create mode 100644 web/src/components/dashboards/addPanel/StreamFieldSelect.vue
 create mode 100644 web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
 create mode 100644 web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
 create mode 100644 web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
 create mode 100644 web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
 create mode 100644 web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
 create mode 100644 web/src/views/Dashboards/addPanel/DashboardJoinsOption.vue

diff --git a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
index 15da4774828..31e46c85ba8 100644
--- a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
@@ -73,27 +73,22 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               color="primary"
               dense
               size="sm"
-              :label="
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.latitude?.column
-              "
+              :label="latitudeLabel"
               class="q-pl-sm"
-              :data-test="`dashboard-latitude-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.latitude?.column
-              }`"
+              :data-test="`dashboard-latitude-item-${latitudeLabel}`"
             >
               <q-menu
                 class="q-pa-md"
-                :data-test="`dashboard-latitude-item-${
-                  dashboardPanelData.data.queries[
-                    dashboardPanelData.layout.currentQueryIndex
-                  ].fields?.latitude?.column
-                }-menu`"
+                :data-test="`dashboard-latitude-item-${latitudeLabel}-menu`"
               >
                 <div>
+                  <DynamicFunctionPopUp
+                    v-model="
+                      dashboardPanelData.data.queries[
+                        dashboardPanelData.layout.currentQueryIndex
+                      ].fields.latitude
+                    "
+                  />
                   <q-input
                     dense
                     filled
@@ -129,11 +124,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               style="height: 100%"
               size="xs"
               dense
-              :data-test="`dashboard-latitude-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.latitude?.column
-              }-remove`"
+              :data-test="`dashboard-latitude-item-${latitudeLabel}-remove`"
               @click="removeLatitude()"
               icon="close"
             />
@@ -209,27 +200,22 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               dense
               color="primary"
               size="sm"
-              :label="
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.longitude?.column
-              "
-              :data-test="`dashboard-longitude-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.longitude?.column
-              }`"
+              :label="longitudeLabel"
+              :data-test="`dashboard-longitude-item-${longitudeLabel}`"
               class="q-pl-sm"
             >
               <q-menu
                 class="q-pa-md"
-                :data-test="`dashboard-longitude-item-${
-                  dashboardPanelData.data.queries[
-                    dashboardPanelData.layout.currentQueryIndex
-                  ].fields?.longitude?.column
-                }-menu`"
+                :data-test="`dashboard-longitude-item-${longitudeLabel}-menu`"
               >
                 <div>
+                  <DynamicFunctionPopUp
+                    v-model="
+                      dashboardPanelData.data.queries[
+                        dashboardPanelData.layout.currentQueryIndex
+                      ].fields.longitude
+                    "
+                  />
                   <q-input
                     dense
                     filled
@@ -265,11 +251,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               style="height: 100%"
               size="xs"
               dense
-              :data-test="`dashboard-longitude-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.longitude?.column
-              }-remove`"
+              :data-test="`dashboard-longitude-item-${longitudeLabel}-remove`"
               @click="removeLongitude()"
               icon="close"
             />
@@ -346,20 +328,12 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               color="primary"
               size="sm"
               :label="weightLabel"
-              :data-test="`dashboard-weight-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.weight?.column
-              }`"
+              :data-test="`dashboard-weight-item-${weightLabel}`"
               class="q-pl-sm"
             >
               <q-menu
                 class="q-pa-md"
-                :data-test="`dashboard-weight-item-${
-                  dashboardPanelData.data.queries[
-                    dashboardPanelData.layout.currentQueryIndex
-                  ].fields?.weight?.column
-                }-menu`"
+                :data-test="`dashboard-weight-item-${weightLabel}-menu`"
               >
                 <div>
                   <div class="row q-mb-sm" style="align-items: center">
@@ -372,7 +346,14 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                       class="q-mr-xs"
                       style="width: 160px"
                     >
-                      <q-select
+                      <DynamicFunctionPopUp
+                        v-model="
+                          dashboardPanelData.data.queries[
+                            dashboardPanelData.layout.currentQueryIndex
+                          ].fields.weight
+                        "
+                      />
+                      <!-- <q-select
                         v-model="
                           dashboardPanelData.data.queries[
                             dashboardPanelData.layout.currentQueryIndex
@@ -398,7 +379,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             class="cursor-pointer"
                           />
                         </template>
-                      </q-select>
+                      </q-select> -->
                     </div>
                   </div>
                   <q-input
@@ -479,11 +460,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               style="height: 100%"
               size="xs"
               dense
-              :data-test="`dashboard-weight-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.weight?.column
-              }-remove`"
+              :data-test="`dashboard-weight-item-${weightLabel}-remove`"
               @click="removeWeight()"
               icon="close"
             />
@@ -520,6 +497,8 @@ import SanitizedHtmlRenderer from "@/components/SanitizedHtmlRenderer.vue";
 import { inject } from "vue";
 import useNotifications from "@/composables/useNotifications";
 import DashboardFiltersOption from "@/views/Dashboards/addPanel/DashboardFiltersOption.vue";
+import DynamicFunctionPopUp from "@/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue";
+import { buildSQLQueryFromInput } from "@/utils/dashboard/convertDataIntoUnitValue";
 
 export default defineComponent({
   name: "DashboardGeoMapsQueryBuilder",
@@ -528,6 +507,7 @@ export default defineComponent({
     CommonAutoComplete,
     SanitizedHtmlRenderer,
     DashboardFiltersOption,
+    DynamicFunctionPopUp,
   },
   props: ["dashboardData"],
   setup(props) {
@@ -735,16 +715,33 @@ export default defineComponent({
           dashboardPanelData.layout.currentQueryIndex
         ].customQuery
       ) {
+        // HERE NEED CHANGES
         return field.column;
       }
-      if (field.aggregationFunction) {
-        const aggregation = field.aggregationFunction.toUpperCase();
-        return `${aggregation}(${field.column})`;
-      } else {
-        return field.column;
-      }
+      return buildSQLQueryFromInput(
+        field,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
+      );
     };
 
+    const latitudeLabel = computed(() => {
+      const latitudeField =
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.latitude;
+      return commonBtnLabel(latitudeField);
+    });
+
+    const longitudeLabel = computed(() => {
+      const longitudeField =
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.longitude;
+      return commonBtnLabel(longitudeField);
+    });
+
     const weightLabel = computed(() => {
       const weightField =
         dashboardPanelData.data.queries[
@@ -822,6 +819,8 @@ export default defineComponent({
       Hint,
       WeightHint,
       promqlMode,
+      latitudeLabel,
+      longitudeLabel,
       weightLabel,
       onFieldDragStart,
       operators,
diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index 2299f88221c..05bcf72d1ba 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -73,27 +73,22 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               color="primary"
               dense
               size="sm"
-              :label="
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.name?.column
-              "
+              :label="nameLabel"
               class="q-pl-sm"
-              :data-test="`dashboard-name-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.name?.column
-              }`"
+              :data-test="`dashboard-name-item-${nameLabel}`"
             >
               <q-menu
                 class="q-pa-md"
-                :data-test="`dashboard-name-item-${
-                  dashboardPanelData.data.queries[
-                    dashboardPanelData.layout.currentQueryIndex
-                  ].fields?.name?.column
-                }-menu`"
+                :data-test="`dashboard-name-item-${nameLabel}-menu`"
               >
                 <div>
+                  <DynamicFunctionPopUp
+                    v-model="
+                      dashboardPanelData.data.queries[
+                        dashboardPanelData.layout.currentQueryIndex
+                      ].fields.name
+                    "
+                  />
                   <q-input
                     dense
                     filled
@@ -129,11 +124,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               style="height: 100%"
               size="xs"
               dense
-              :data-test="`dashboard-name-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.name?.column
-              }-remove`"
+              :data-test="`dashboard-name-item-${nameLabel}-remove`"
               @click="removeMapName()"
               icon="close"
             />
@@ -211,20 +202,12 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               color="primary"
               size="sm"
               :label="valueLabel"
-              :data-test="`dashboard-value_for_maps-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.value_for_maps?.column
-              }`"
+              :data-test="`dashboard-value_for_maps-item-${valueLabel}`"
               class="q-pl-sm"
             >
               <q-menu
                 class="q-pa-md"
-                :data-test="`dashboard-value_for_maps-item-${
-                  dashboardPanelData.data.queries[
-                    dashboardPanelData.layout.currentQueryIndex
-                  ].fields?.value_for_maps?.column
-                }-menu`"
+                :data-test="`dashboard-value_for_maps-item-${valueLabel}-menu`"
               >
                 <div>
                   <div class="row q-mb-sm" style="align-items: center">
@@ -235,9 +218,15 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                         ].customQuery
                       "
                       class="q-mr-xs"
-                      style="width: 160px"
                     >
-                      <q-select
+                      <DynamicFunctionPopUp
+                        v-model="
+                          dashboardPanelData.data.queries[
+                            dashboardPanelData.layout.currentQueryIndex
+                          ].fields.value_for_maps
+                        "
+                      />
+                      <!-- <q-select
                         v-model="
                           dashboardPanelData.data.queries[
                             dashboardPanelData.layout.currentQueryIndex
@@ -263,7 +252,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             class="cursor-pointer"
                           />
                         </template>
-                      </q-select>
+                      </q-select> -->
                     </div>
                   </div>
                   <q-input
@@ -344,11 +333,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               style="height: 100%"
               size="xs"
               dense
-              :data-test="`dashboard-value_for_maps-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.value_for_maps?.column
-              }-remove`"
+              :data-test="`dashboard-value_for_maps-item-${valueLabel}-remove`"
               @click="removeMapValue()"
               icon="close"
             />
@@ -392,6 +377,8 @@ import { useQuasar } from "quasar";
 import CommonAutoComplete from "@/components/dashboards/addPanel/CommonAutoComplete.vue";
 import SanitizedHtmlRenderer from "@/components/SanitizedHtmlRenderer.vue";
 import DashboardFiltersOption from "@/views/Dashboards/addPanel/DashboardFiltersOption.vue";
+import DynamicFunctionPopUp from "@/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue";
+import { buildSQLQueryFromInput } from "@/utils/dashboard/convertDataIntoUnitValue";
 
 export default defineComponent({
   name: "DashboardMapsQueryBuilder",
@@ -400,6 +387,7 @@ export default defineComponent({
     CommonAutoComplete,
     SanitizedHtmlRenderer,
     DashboardFiltersOption,
+    DynamicFunctionPopUp,
   },
   props: ["dashboardData"],
   setup(props) {
@@ -592,16 +580,25 @@ export default defineComponent({
           dashboardPanelData.layout.currentQueryIndex
         ].customQuery
       ) {
+        //  HERE NEED CHANGES
         return field.column;
       }
-      if (field.aggregationFunction) {
-        const aggregation = field.aggregationFunction.toUpperCase();
-        return `${aggregation}(${field.column})`;
-      } else {
-        return field.column;
-      }
+      return buildSQLQueryFromInput(
+        field,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
+      );
     };
 
+    const nameLabel = computed(() => {
+      const nameField =
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.name;
+      return commonBtnLabel(nameField);
+    });
+
     const valueLabel = computed(() => {
       const valueField =
         dashboardPanelData.data.queries[
@@ -666,6 +663,7 @@ export default defineComponent({
       dashboardPanelData,
       removeMapName,
       removeMapValue,
+      nameLabel,
       valueLabel,
       triggerOperators,
       pagination: ref({
diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index 17739f91710..b9957abb1b0 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -128,11 +128,18 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             "
                             class="q-mr-xs q-mb-sm"
                           >
-                            <q-select
+                            <DynamicFunctionPopUp
                               v-model="
                                 dashboardPanelData.data.queries[
                                   dashboardPanelData.layout.currentQueryIndex
-                                ].fields.x[index].aggregationFunction
+                                ].fields.x[index]
+                              "
+                            />
+                            <!-- <q-select
+                              v-model="
+                                dashboardPanelData.data.queries[
+                                  dashboardPanelData.layout.currentQueryIndex
+                                ].fields.x[index].functionName
                               "
                               :options="triggerOperatorsWithHistogram"
                               dense
@@ -149,23 +156,24 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                   @click.stop.prevent="
                                     dashboardPanelData.data.queries[
                                       dashboardPanelData.layout.currentQueryIndex
-                                    ].fields.x[index].aggregationFunction = null
+                                    ].fields.x[index].functionName = null
                                   "
                                   class="cursor-pointer"
                                 />
                               </template>
-                            </q-select>
+                            </q-select> -->
                           </div>
                         </div>
                         <!-- histogram interval if auto sql and aggregation function is histogram-->
-                        <div
+                        <!-- histogram interval for sql queries -->
+                        <!-- <div
                           v-if="
                             !dashboardPanelData.data.queries[
                               dashboardPanelData.layout.currentQueryIndex
                             ].customQuery &&
                             dashboardPanelData.data.queries[
                               dashboardPanelData.layout.currentQueryIndex
-                            ].fields?.x[index]?.aggregationFunction ===
+                            ].fields?.x[index]?.functionName ===
                               'histogram' &&
                             !dashboardPanelData.data.queries[
                               dashboardPanelData.layout.currentQueryIndex
@@ -173,7 +181,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                           "
                           class="q-mb-sm"
                         >
-                          <!-- histogram interval for sql queries -->
                           <HistogramIntervalDropDown
                             v-if="!promqlMode"
                             :model-value="
@@ -192,7 +199,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                               }
                             "
                           />
-                        </div>
+                        </div> -->
                         <q-input
                           dense
                           filled
@@ -380,11 +387,18 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             "
                             class="q-mr-xs q-mb-sm"
                           >
-                            <q-select
+                            <DynamicFunctionPopUp
+                              v-model="
+                                dashboardPanelData.data.queries[
+                                  dashboardPanelData.layout.currentQueryIndex
+                                ].fields.breakdown[index]
+                              "
+                            />
+                            <!-- <q-select
                               v-model="
                                 dashboardPanelData.data.queries[
                                   dashboardPanelData.layout.currentQueryIndex
-                                ].fields.breakdown[index].aggregationFunction
+                                ].fields.breakdown[index].functionName
                               "
                               :options="triggerOperatorsWithHistogram"
                               dense
@@ -403,23 +417,24 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                       dashboardPanelData.layout.currentQueryIndex
                                     ].fields.breakdown[
                                       index
-                                    ].aggregationFunction = null
+                                    ].functionName = null
                                   "
                                   class="cursor-pointer"
                                 />
                               </template>
-                            </q-select>
+                            </q-select> -->
                           </div>
                         </div>
                         <!-- histogram interval if auto sql and aggregation function is histogram-->
-                        <div
+                        <!-- histogram interval for sql queries -->
+                        <!-- <div
                           v-if="
                             !dashboardPanelData.data.queries[
                               dashboardPanelData.layout.currentQueryIndex
                             ].customQuery &&
                             dashboardPanelData.data.queries[
                               dashboardPanelData.layout.currentQueryIndex
-                            ].fields?.breakdown[index]?.aggregationFunction ===
+                            ].fields?.breakdown[index]?.functionName ===
                               'histogram' &&
                             !dashboardPanelData.data.queries[
                               dashboardPanelData.layout.currentQueryIndex
@@ -427,7 +442,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                           "
                           class="q-mb-sm"
                         >
-                          <!-- histogram interval for sql queries -->
                           <HistogramIntervalDropDown
                             v-if="!promqlMode"
                             :model-value="
@@ -446,7 +460,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                               }
                             "
                           />
-                        </div>
+                        </div> -->
                         <q-input
                           dense
                           filled
@@ -596,7 +610,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 class="q-pl-sm"
               >
                 <q-menu
-                  class="q-pa-md"
+                  class="q-pa-md tw-overflow-scroll"
                   :data-test="`dashboard-y-item-${itemY?.column}-menu`"
                 >
                   <div>
@@ -611,13 +625,12 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                           ].fields.y[index].isDerived
                         "
                         class="q-mr-xs"
-                        style="width: 160px"
                       >
-                        <q-select
+                        <!-- <q-select
                           v-model="
                             dashboardPanelData.data.queries[
                               dashboardPanelData.layout.currentQueryIndex
-                            ].fields.y[index].aggregationFunction
+                            ].fields.y[index].functionName
                           "
                           :options="
                             dashboardPanelData.data.type == 'heatmap'
@@ -641,13 +654,20 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                 @click.stop.prevent="
                                   dashboardPanelData.data.queries[
                                     dashboardPanelData.layout.currentQueryIndex
-                                  ].fields.y[index].aggregationFunction = null
+                                  ].fields.y[index].functionName = null
                                 "
                                 class="cursor-pointer"
                               />
                             </div>
                           </template>
-                        </q-select>
+                        </q-select> -->
+                        <DynamicFunctionPopUp
+                          v-model="
+                            dashboardPanelData.data.queries[
+                              dashboardPanelData.layout.currentQueryIndex
+                            ].fields.y[index]
+                          "
+                        />
                       </div>
                       <div
                         class="color-input-wrapper"
@@ -657,7 +677,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                           )
                         "
                       >
-                        <input
+                        <!-- <input
                           type="color"
                           data-test="dashboard-y-item-color"
                           v-model="
@@ -665,26 +685,25 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                               dashboardPanelData.layout.currentQueryIndex
                             ].fields.y[index].color
                           "
-                        />
+                        /> -->
                       </div>
                     </div>
                     <!-- histogram interval if auto sql and aggregation function is histogram-->
-                    <div
+                    <!-- histogram interval for sql queries -->
+                    <!-- <div
                       v-if="
                         !dashboardPanelData.data.queries[
                           dashboardPanelData.layout.currentQueryIndex
                         ].customQuery &&
                         dashboardPanelData.data.queries[
                           dashboardPanelData.layout.currentQueryIndex
-                        ].fields?.y[index]?.aggregationFunction ===
-                          'histogram' &&
+                        ].fields?.y[index]?.functionName === 'histogram' &&
                         !dashboardPanelData.data.queries[
                           dashboardPanelData.layout.currentQueryIndex
                         ].fields.y[index].isDerived
                       "
                       class="q-mb-sm"
                     >
-                      <!-- histogram interval for sql queries -->
                       <HistogramIntervalDropDown
                         v-if="!promqlMode"
                         :model-value="
@@ -702,7 +721,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                           }
                         "
                       />
-                    </div>
+                    </div> -->
                     <q-input
                       dense
                       filled
@@ -910,11 +929,18 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                           class="q-mr-xs"
                           style="width: 160px"
                         >
-                          <q-select
+                          <DynamicFunctionPopUp
+                            v-model="
+                              dashboardPanelData.data.queries[
+                                dashboardPanelData.layout.currentQueryIndex
+                              ].fields.z[index]
+                            "
+                          />
+                          <!-- <q-select
                             v-model="
                               dashboardPanelData.data.queries[
                                 dashboardPanelData.layout.currentQueryIndex
-                              ].fields.z[index].aggregationFunction
+                              ].fields.z[index].functionName
                             "
                             :options="triggerOperators"
                             dense
@@ -923,7 +949,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             map-options
                             :label="t('common.aggregation')"
                             data-test="dashboard-z-item-dropdown"
-                          ></q-select>
+                          ></q-select> -->
                         </div>
                         <div
                           class="color-input-wrapper"
@@ -1055,6 +1081,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
       </div>
     </span>
     <q-separator />
+    <DashboardJoinsOption :dashboardData="dashboardData"></DashboardJoinsOption>
+    <q-separator />
     <!-- filters container -->
     <DashboardFiltersOption
       :dashboardData="dashboardData"
@@ -1087,6 +1115,9 @@ import CommonAutoComplete from "@/components/dashboards/addPanel/CommonAutoCompl
 import SanitizedHtmlRenderer from "@/components/SanitizedHtmlRenderer.vue";
 import useNotifications from "@/composables/useNotifications";
 import DashboardFiltersOption from "@/views/Dashboards/addPanel/DashboardFiltersOption.vue";
+import DashboardJoinsOption from "@/views/Dashboards/addPanel/DashboardJoinsOption.vue";
+import DynamicFunctionPopUp from "@/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue";
+import { buildSQLQueryFromInput } from "@/utils/dashboard/convertDataIntoUnitValue";
 
 export default defineComponent({
   name: "DashboardQueryBuilder",
@@ -1099,6 +1130,8 @@ export default defineComponent({
     CommonAutoComplete,
     SanitizedHtmlRenderer,
     DashboardFiltersOption,
+    DashboardJoinsOption,
+    DynamicFunctionPopUp,
   },
   props: ["dashboardData"],
   setup(props) {
@@ -1255,6 +1288,9 @@ export default defineComponent({
           // move the item from field list to axis
           const dragElement = dashboardPanelData.meta.dragAndDrop.dragElement;
 
+          console.log(dragElement, "dragElement");
+
+          // Here, we need all fields for all joins streams
           const dragName =
             selectedStreamFieldsBasedOnUserDefinedSchema.value.find(
               (item: any) => item?.name === dragElement?.column,
@@ -1512,12 +1548,12 @@ export default defineComponent({
       ) {
         return field?.column;
       }
-      if (field?.aggregationFunction) {
-        const aggregation = field?.aggregationFunction?.toUpperCase();
-        return `${aggregation}(${field?.column})`;
-      } else {
-        return field?.column;
-      }
+      return buildSQLQueryFromInput(
+        field,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
+      );
     };
 
     const xLabel = computed(() => {
diff --git a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
index 9ab0caa950f..d655167ad38 100644
--- a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
@@ -73,27 +73,22 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               color="primary"
               dense
               size="sm"
-              :label="
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.source?.column
-              "
+              :label="sourceLabel"
               class="q-pl-sm"
-              :data-test="`dashboard-source-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.source?.column
-              }`"
+              :data-test="`dashboard-source-item-${sourceLabel}`"
             >
               <q-menu
                 class="q-pa-md"
-                :data-test="`dashboard-source-item-${
-                  dashboardPanelData.data.queries[
-                    dashboardPanelData.layout.currentQueryIndex
-                  ].fields?.source?.column
-                }-menu`"
+                :data-test="`dashboard-source-item-${sourceLabel}-menu`"
               >
                 <div>
+                  <DynamicFunctionPopUp
+                    v-model="
+                      dashboardPanelData.data.queries[
+                        dashboardPanelData.layout.currentQueryIndex
+                      ].fields.source
+                    "
+                  />
                   <q-input
                     dense
                     filled
@@ -129,11 +124,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               style="height: 100%"
               size="xs"
               dense
-              :data-test="`dashboard-source-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.source?.column
-              }-remove`"
+              :data-test="`dashboard-source-item-${sourceLabel}-remove`"
               @click="removeSource()"
               icon="close"
             />
@@ -209,27 +200,22 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               dense
               color="primary"
               size="sm"
-              :label="
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.target?.column
-              "
-              :data-test="`dashboard-target-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.target?.column
-              }`"
+              :label="targetLabel"
+              :data-test="`dashboard-target-item-${targetLabel}`"
               class="q-pl-sm"
             >
               <q-menu
                 class="q-pa-md"
-                :data-test="`dashboard-target-item-${
-                  dashboardPanelData.data.queries[
-                    dashboardPanelData.layout.currentQueryIndex
-                  ].fields?.target?.column
-                }-menu`"
+                :data-test="`dashboard-target-item-${targetLabel}-menu`"
               >
                 <div>
+                  <DynamicFunctionPopUp
+                    v-model="
+                      dashboardPanelData.data.queries[
+                        dashboardPanelData.layout.currentQueryIndex
+                      ].fields.target
+                    "
+                  />
                   <q-input
                     dense
                     filled
@@ -265,11 +251,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               style="height: 100%"
               size="xs"
               dense
-              :data-test="`dashboard-target-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.target?.column
-              }-remove`"
+              :data-test="`dashboard-target-item-${targetLabel}-remove`"
               @click="removeTarget()"
               icon="close"
             />
@@ -346,20 +328,12 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               color="primary"
               size="sm"
               :label="valueLabel"
-              :data-test="`dashboard-value-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.value?.column
-              }`"
+              :data-test="`dashboard-value-item-${valueLabel}`"
               class="q-pl-sm"
             >
               <q-menu
                 class="q-pa-md"
-                :data-test="`dashboard-value-item-${
-                  dashboardPanelData.data.queries[
-                    dashboardPanelData.layout.currentQueryIndex
-                  ].fields?.value?.column
-                }-menu`"
+                :data-test="`dashboard-value-item-${valueLabel}-menu`"
               >
                 <div>
                   <div class="row q-mb-sm" style="align-items: center">
@@ -370,9 +344,15 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                         ].customQuery
                       "
                       class="q-mr-xs"
-                      style="width: 160px"
                     >
-                      <q-select
+                      <DynamicFunctionPopUp
+                        v-model="
+                          dashboardPanelData.data.queries[
+                            dashboardPanelData.layout.currentQueryIndex
+                          ].fields.value
+                        "
+                      />
+                      <!-- <q-select
                         v-model="
                           dashboardPanelData.data.queries[
                             dashboardPanelData.layout.currentQueryIndex
@@ -398,7 +378,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             class="cursor-pointer"
                           />
                         </template>
-                      </q-select>
+                      </q-select> -->
                     </div>
                   </div>
                   <q-input
@@ -479,11 +459,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               style="height: 100%"
               size="xs"
               dense
-              :data-test="`dashboard-value-item-${
-                dashboardPanelData.data.queries[
-                  dashboardPanelData.layout.currentQueryIndex
-                ].fields?.value?.column
-              }-remove`"
+              :data-test="`dashboard-value-item-${valueLabel}-remove`"
               @click="removeValue()"
               icon="close"
             />
@@ -527,6 +503,8 @@ import CommonAutoComplete from "@/components/dashboards/addPanel/CommonAutoCompl
 import SanitizedHtmlRenderer from "@/components/SanitizedHtmlRenderer.vue";
 import useNotifications from "@/composables/useNotifications";
 import DashboardFiltersOption from "@/views/Dashboards/addPanel/DashboardFiltersOption.vue";
+import DynamicFunctionPopUp from "@/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue";
+import { buildSQLQueryFromInput } from "@/utils/dashboard/convertDataIntoUnitValue";
 
 export default defineComponent({
   name: "DashboardSankeyChartBuilder",
@@ -535,6 +513,7 @@ export default defineComponent({
     CommonAutoComplete,
     SanitizedHtmlRenderer,
     DashboardFiltersOption,
+    DynamicFunctionPopUp,
   },
   props: ["dashboardData"],
   setup(props) {
@@ -734,16 +713,33 @@ export default defineComponent({
           dashboardPanelData.layout.currentQueryIndex
         ].customQuery
       ) {
+        // HERE NEED CHANGES
         return field.column;
       }
-      if (field.aggregationFunction) {
-        const aggregation = field.aggregationFunction.toUpperCase();
-        return `${aggregation}(${field.column})`;
-      } else {
-        return field.column;
-      }
+      return buildSQLQueryFromInput(
+        field,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
+      );
     };
 
+    const sourceLabel = computed(() => {
+      const sourceField =
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.source;
+      return commonBtnLabel(sourceField);
+    });
+
+    const targetLabel = computed(() => {
+      const targetField =
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.target;
+      return commonBtnLabel(targetField);
+    });
+
     const valueLabel = computed(() => {
       const valueField =
         dashboardPanelData.data.queries[
@@ -820,6 +816,8 @@ export default defineComponent({
       expansionItems,
       Hint,
       promqlMode,
+      sourceLabel,
+      targetLabel,
       valueLabel,
       onFieldDragStart,
       operators,
diff --git a/web/src/components/dashboards/addPanel/FieldList.vue b/web/src/components/dashboards/addPanel/FieldList.vue
index 4403ee8467b..47a4b86b72c 100644
--- a/web/src/components/dashboards/addPanel/FieldList.vue
+++ b/web/src/components/dashboards/addPanel/FieldList.vue
@@ -136,7 +136,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
             sortable: true,
           },
         ]"
-        :rows="data.currentFieldsList"
+        :rows="flattenGroupedFields"
         v-model:pagination="pagination"
         row-key="column"
         :filter="dashboardPanelData.meta.stream.filterField"
@@ -174,6 +174,13 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               "
             >
               <div
+                v-if="props?.row?.isGroup"
+                class="tw-pl-2 tw-py-1 tw-font-semibold tw-bg-gray-200"
+              >
+                {{ props?.row?.groupName }}
+              </div>
+              <div
+                v-else
                 class="field_overlay"
                 :title="props.row.name"
                 :data-test="`field-list-item-${
@@ -541,9 +548,9 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               size="8px"
               color="white"
               text-color="primary"
-              @update:model-value="toggleSchema"
               :options="userDefinedSchemaBtnGroupOption"
-            >
+              >
+              <!-- @update:model-value="toggleSchema" -->
               <template v-slot:user_defined_slot>
                 <q-icon name="person"></q-icon>
                 <q-icon name="schema"></q-icon>
@@ -706,7 +713,7 @@ export default defineComponent({
       // schemaList: [],
       // indexOptions: [],
       streamType: ["logs", "metrics", "traces"],
-      currentFieldsList: [],
+      // currentFieldsList: [],
     });
     const filteredStreams = ref([]);
     const {
@@ -730,7 +737,7 @@ export default defineComponent({
       addTarget,
       addValue,
       cleanupDraggingFields,
-      selectedStreamFieldsBasedOnUserDefinedSchema,
+      updateGroupedFields,
     } = useDashboardPanelData(dashboardPanelDataPageKey);
     const { getStreams, getStream } = useStreams();
     const { showErrorNotification } = useNotifications();
@@ -825,7 +832,7 @@ export default defineComponent({
             dashboardPanelData.meta.stream.streamResultsType
         ) {
           try {
-            await extractFields();
+            // await extractFields();
 
             // if promql mode
             // NOTE: For the metrics page, we added one watch that resets the query on stream change.
@@ -908,40 +915,14 @@ export default defineComponent({
         }
       },
     );
+
     // update the current list fields if any of the lists changes
     watch(
       () => [
-        store.state.zoConfig.user_defined_schemas_enabled,
-        dashboardPanelData.meta.stream.selectedStreamFields,
         dashboardPanelData.meta.stream.customQueryFields,
-        dashboardPanelData.meta.stream.userDefinedSchema,
-        dashboardPanelData.meta.stream.useUserDefinedSchemas,
         dashboardPanelData.meta.stream.vrlFunctionFieldList,
       ],
       () => {
-        data.currentFieldsList = [];
-        // if user defined schema is enabled, use user defined schema
-        // else use selectedStreamFields
-
-        if (
-          store.state.zoConfig.user_defined_schemas_enabled &&
-          dashboardPanelData.meta.stream.userDefinedSchema.length > 0 &&
-          dashboardPanelData.meta.stream.useUserDefinedSchemas ==
-            "user_defined_schema"
-        ) {
-          data.currentFieldsList = [
-            ...dashboardPanelData.meta.stream.customQueryFields,
-            ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
-            ...dashboardPanelData.meta.stream.userDefinedSchema,
-          ];
-        } else {
-          data.currentFieldsList = [
-            ...dashboardPanelData.meta.stream.customQueryFields,
-            ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
-            ...dashboardPanelData.meta.stream.selectedStreamFields,
-          ];
-        }
-
         // set the custom query fields length
         customQueryFieldsLength.value =
           dashboardPanelData.meta.stream.customQueryFields.length +
@@ -949,6 +930,98 @@ export default defineComponent({
       },
     );
 
+    const flattenGroupedFields = computed(() => {
+      const flattenedFields: any[] = [];
+      dashboardPanelData.meta.streamFields.groupedFields.forEach(
+        (group: any) => {
+          // Add a group header row
+          flattenedFields.push({
+            isGroup: true,
+            groupName: group.name,
+          });
+
+          if (
+            group.settings.hasOwnProperty("defined_schema_fields") &&
+            group.settings.defined_schema_fields.length > 0
+          ) {
+            // add the user defined fields
+            // _timestamp field + user defined fields + all_fields_name
+
+            // add _timestamp field
+            flattenedFields.push({
+              name: store.state.zoConfig?.timestamp_column,
+              type: "Int64",
+              stream: group.name,
+              streamAlias: group.stream_alias,
+              isGroup: false,
+            });
+
+            // add user defined fields
+            for (const field of group.schema) {
+              if (
+                store.state.zoConfig.user_defined_schemas_enabled &&
+                group.settings.hasOwnProperty("defined_schema_fields") &&
+                group.settings.defined_schema_fields.length > 0
+              ) {
+                if (group.settings.defined_schema_fields.includes(field.name)) {
+                  // push as a user defined schema
+                  flattenedFields.push({
+                    ...field,
+                    stream: group.name,
+                    streamAlias: group.stream_alias,
+                    isGroup: false,
+                  });
+                }
+              }
+            }
+
+            // add all_fields_name
+            flattenedFields.push({
+              name: store.state.zoConfig?.all_fields_name,
+              type: "Utf8",
+              stream: group.name,
+              streamAlias: group.stream_alias,
+              isGroup: false,
+            });
+          } else {
+            // use schema of the group
+            // Add the fields in the group, including the group name
+            group.schema.forEach((field: any) => {
+              flattenedFields.push({
+                ...field,
+                stream: group.name,
+                streamAlias: group.stream_alias,
+                isGroup: false,
+              });
+            });
+          }
+        },
+      );
+
+      return flattenedFields;
+    });
+
+    watch(
+      () => ({
+        stream:
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields.stream,
+        streamType:
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields.stream_type,
+        joins:
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].joins,
+      }),
+      () => {
+        updateGroupedFields();
+      },
+      { deep: true },
+    );
+
     watch(
       () => dashboardPanelData.meta.stream.filterField,
       () => {
@@ -973,47 +1046,25 @@ export default defineComponent({
         dashboardPanelData.meta.stream.streamResultsType = stream_type;
       });
     };
+
     const filterFieldFn = (rows: any, terms: any) => {
-      let filtered = [];
+      if (!terms || terms.trim() === "") {
+        return rows;
+      }
 
-      if (terms != "") {
-        terms = terms.toLowerCase();
+      const searchTerm = terms.toLowerCase();
 
-        // loop on custom query fields
-        for (
-          let i = 0;
-          i < dashboardPanelData.meta.stream.customQueryFields.length;
-          i++
-        ) {
-          if (
-            dashboardPanelData.meta.stream.customQueryFields[i]["name"]
-              .toLowerCase()
-              .includes(terms)
-          ) {
-            filtered.push(dashboardPanelData.meta.stream.customQueryFields[i]);
-          }
+      const filteredRows = rows.filter((row: any) => {
+        // Always include group headers
+        if (row.isGroup) {
+          return true;
         }
 
-        // update custom query fields length
-        customQueryFieldsLength.value = filtered.length;
+        // Filter fields based on name
+        return row.name.toLowerCase().includes(searchTerm);
+      });
 
-        for (
-          let i = 0;
-          i < selectedStreamFieldsBasedOnUserDefinedSchema.value.length;
-          i++
-        ) {
-          if (
-            selectedStreamFieldsBasedOnUserDefinedSchema.value[i]["name"]
-              .toLowerCase()
-              .includes(terms)
-          ) {
-            filtered.push(
-              selectedStreamFieldsBasedOnUserDefinedSchema.value[i],
-            );
-          }
-        }
-      }
-      return filtered;
+      return filteredRows;
     };
 
     const mutationHandler: any = (mutationRecords: any) => {};
@@ -1054,115 +1105,95 @@ export default defineComponent({
       });
     };
 
-    async function loadStreamFields(streamName: string) {
-      try {
-        if (streamName != "") {
-          return await getStream(
-            streamName,
-            dashboardPanelData.data.queries[
-              dashboardPanelData.layout.currentQueryIndex
-            ].fields.stream_type ?? "logs",
-            true,
-          ).then((res) => {
-            return res;
-          });
-        } else {
-        }
-        return;
-      } catch (e: any) {
-        console.log("Error while loading stream fields");
-      }
-    }
-
-    async function extractFields() {
-      try {
-        dashboardPanelData.meta.stream.selectedStreamFields = [];
-        const schemaFields: any = [];
-        let userDefineSchemaSettings: any = [];
-
-        if (
-          dashboardPanelData.meta.stream.streamResults.length > 0 &&
-          dashboardPanelData.meta.stream.streamResultsType ===
-            dashboardPanelData.data.queries[
-              dashboardPanelData.layout.currentQueryIndex
-            ].fields.stream_type
-        ) {
-          for (const stream of dashboardPanelData.meta.stream.streamResults) {
-            if (
-              dashboardPanelData.data.queries[
-                dashboardPanelData.layout.currentQueryIndex
-              ].fields.stream == stream.name
-            ) {
-              // check for schema exist in the object or not
-              // if not pull the schema from server.
-              if (!stream.hasOwnProperty("schema")) {
-                const streamData: any = await loadStreamFields(stream.name);
-                const streamSchema: any = streamData.schema;
-                if (streamSchema == undefined) {
-                  return;
-                }
-                stream.settings = streamData.settings;
-                stream.schema = streamSchema;
-              }
-
-              // create a schema field mapping based on field name to avoid iteration over object.
-              // in case of user defined schema consideration, loop will be break once all defined fields are mapped.
-              for (const field of stream.schema) {
-                if (
-                  store.state.zoConfig.user_defined_schemas_enabled &&
-                  stream.settings.hasOwnProperty("defined_schema_fields") &&
-                  stream.settings.defined_schema_fields.length > 0
-                ) {
-                  if (
-                    stream.settings.defined_schema_fields.includes(field.name)
-                  ) {
-                    // push as a user defined schema
-                    userDefineSchemaSettings.push(field);
-                  }
-                  schemaFields.push(field);
-                } else {
-                  schemaFields.push(field);
-                }
-              }
-
-              dashboardPanelData.meta.stream.selectedStreamFields =
-                schemaFields ?? [];
-
-              if (
-                stream.settings.hasOwnProperty("defined_schema_fields") &&
-                stream.settings.defined_schema_fields.length > 0
-              ) {
-                dashboardPanelData.meta.stream.hasUserDefinedSchemas = true;
-                // set user defined schema
-                // 1) Timestamp field
-                // 2) selected user defined schema fields
-                // 3) all_fields_name fields
-                dashboardPanelData.meta.stream.userDefinedSchema = [
-                  {
-                    name: store.state.zoConfig?.timestamp_column,
-                    type: "Int64",
-                  },
-                  ...(userDefineSchemaSettings ?? []),
-                  {
-                    name: store.state.zoConfig?.all_fields_name,
-                    type: "Utf8",
-                  },
-                ];
-              } else {
-                dashboardPanelData.meta.stream.hasUserDefinedSchemas = false;
-                dashboardPanelData.meta.stream.userDefinedSchema = [];
-              }
-            }
-          }
-        }
-      } catch (e: any) {
-        console.log("Error while extracting fields");
-      }
-    }
-
-    const toggleSchema = async () => {
-      await extractFields();
-    };
+    // async function extractFields() {
+    //   try {
+    //     dashboardPanelData.meta.stream.selectedStreamFields = [];
+    //     const schemaFields: any = [];
+    //     let userDefineSchemaSettings: any = [];
+
+    //     if (
+    //       dashboardPanelData.meta.stream.streamResults.length > 0 &&
+    //       dashboardPanelData.meta.stream.streamResultsType ===
+    //         dashboardPanelData.data.queries[
+    //           dashboardPanelData.layout.currentQueryIndex
+    //         ].fields.stream_type
+    //     ) {
+    //       for (const stream of dashboardPanelData.meta.stream.streamResults) {
+    //         if (
+    //           dashboardPanelData.data.queries[
+    //             dashboardPanelData.layout.currentQueryIndex
+    //           ].fields.stream == stream.name
+    //         ) {
+    //           // check for schema exist in the object or not
+    //           // if not pull the schema from server.
+    //           if (!stream.hasOwnProperty("schema")) {
+    //             const streamData: any = await loadStreamFields(stream.name);
+    //             const streamSchema: any = streamData.schema;
+    //             if (streamSchema == undefined) {
+    //               return;
+    //             }
+    //             stream.settings = streamData.settings;
+    //             stream.schema = streamSchema;
+    //           }
+
+    //           // create a schema field mapping based on field name to avoid iteration over object.
+    //           // in case of user defined schema consideration, loop will be break once all defined fields are mapped.
+    //           for (const field of stream.schema) {
+    //             if (
+    //               store.state.zoConfig.user_defined_schemas_enabled &&
+    //               stream.settings.hasOwnProperty("defined_schema_fields") &&
+    //               stream.settings.defined_schema_fields.length > 0
+    //             ) {
+    //               if (
+    //                 stream.settings.defined_schema_fields.includes(field.name)
+    //               ) {
+    //                 // push as a user defined schema
+    //                 userDefineSchemaSettings.push(field);
+    //               }
+    //               schemaFields.push(field);
+    //             } else {
+    //               schemaFields.push(field);
+    //             }
+    //           }
+
+    //           dashboardPanelData.meta.stream.selectedStreamFields =
+    //             schemaFields ?? [];
+
+    //           if (
+    //             stream.settings.hasOwnProperty("defined_schema_fields") &&
+    //             stream.settings.defined_schema_fields.length > 0
+    //           ) {
+    //             dashboardPanelData.meta.stream.hasUserDefinedSchemas = true;
+    //             // set user defined schema
+    //             // 1) Timestamp field
+    //             // 2) selected user defined schema fields
+    //             // 3) all_fields_name fields
+    //             dashboardPanelData.meta.stream.userDefinedSchema = [
+    //               {
+    //                 name: store.state.zoConfig?.timestamp_column,
+    //                 type: "Int64",
+    //               },
+    //               ...(userDefineSchemaSettings ?? []),
+    //               {
+    //                 name: store.state.zoConfig?.all_fields_name,
+    //                 type: "Utf8",
+    //               },
+    //             ];
+    //           } else {
+    //             dashboardPanelData.meta.stream.hasUserDefinedSchemas = false;
+    //             dashboardPanelData.meta.stream.userDefinedSchema = [];
+    //           }
+    //         }
+    //       }
+    //     }
+    //   } catch (e: any) {
+    //     console.log("Error while extracting fields");
+    //   }
+    // }
+
+    // const toggleSchema = async () => {
+    //   await extractFields();
+    // };
 
     return {
       dashboardPanelDataPageKey,
@@ -1205,9 +1236,11 @@ export default defineComponent({
       selectedMetricTypeIcon,
       onDragEnd,
       customQueryFieldsLength,
-      toggleSchema,
+      // toggleSchema,
       userDefinedSchemaBtnGroupOption,
       pagination,
+      // groupedFields,
+      flattenGroupedFields,
       pagesNumber: computed(() => {
         return Math.ceil(
           dashboardPanelData.meta.stream.selectedStreamFields.length /
diff --git a/web/src/components/dashboards/addPanel/HistogramIntervalDropDown.vue b/web/src/components/dashboards/addPanel/HistogramIntervalDropDown.vue
index 3acacf8d863..a569e2393c2 100644
--- a/web/src/components/dashboards/addPanel/HistogramIntervalDropDown.vue
+++ b/web/src/components/dashboards/addPanel/HistogramIntervalDropDown.vue
@@ -10,9 +10,7 @@
     data-test="histogram-interval-dropdown"
     dense
     @update:model-value="$emit('update:modelValue', $event)"
-    :display-value="`${
-        histogramIntervalModel.label ?? 'Auto'
-    }`"
+    :display-value="`${histogramIntervalModel?.label ?? 'Auto'}`"
   >
   </q-select>
 </template>
@@ -24,8 +22,8 @@ export default defineComponent({
   name: "HistogramIntervalDropDown",
   props: {
     modelValue: {
-      type: Object,
-      required: true,
+      type: String,
+      required: false,
     },
   },
   emits: ["update:modelValue"],
@@ -125,14 +123,20 @@ export default defineComponent({
       },
     ];
 
-    const histogramIntervalModel = ref(props.modelValue);
+    const histogramIntervalModel: any = ref(
+      histogramIntervalOptions.find(
+        (v: any) => v.value == (props.modelValue ?? null),
+      ) ?? { label: "Auto", value: null },
+    );
 
     // on modelvalue change, update the model
     watch(
       () => props.modelValue,
       () => {
-        histogramIntervalModel.value = props.modelValue;
-      }
+        histogramIntervalModel.value = histogramIntervalOptions.find(
+          (v: any) => v.value == props.modelValue,
+        );
+      },
     );
 
     return {
diff --git a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
new file mode 100644
index 00000000000..20d227a9e8b
--- /dev/null
+++ b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
@@ -0,0 +1,153 @@
+<template>
+  <div class="q-pa-md">
+    <div class="q-gutter-md">
+      <q-select
+        filled
+        v-model="internalModel"
+        :options="options"
+        label="Select a Field"
+        option-label="name"
+        option-value="name"
+        :display-value="internalModel?.field"
+        map-options
+      >
+        <template v-slot:option="scope">
+          <q-expansion-item
+            expand-separator
+            group="streamGroup"
+            :default-opened="scope.index === 0 ? true : false"
+            header-class="text-weight-bold"
+            :label="scope.opt.label"
+          >
+            <template v-for="child in scope.opt.children" :key="child.name">
+              <q-item
+                clickable
+                v-ripple
+                v-close-popup
+                @click="selectField(child)"
+              >
+                <q-item-section>
+                  <q-item-label v-html="child.name"></q-item-label>
+                </q-item-section>
+              </q-item>
+            </template>
+          </q-expansion-item>
+        </template>
+      </q-select>
+    </div>
+  </div>
+</template>
+
+<script lang="ts">
+import { defineComponent, ref, watch, PropType, inject } from "vue";
+import useDashboardPanelData from "@/composables/useDashboardPanel";
+import useStreams from "@/composables/useStreams";
+
+interface OptionChild {
+  label: string;
+  value: string;
+}
+
+interface Option {
+  label: string;
+  children: OptionChild[];
+}
+
+export default defineComponent({
+  name: "StreamFieldSelect",
+
+  props: {
+    streams: {
+      type: Array,
+      required: true,
+    },
+    modelValue: {
+      type: Object,
+      default: {},
+    },
+  },
+
+  emits: ["update:modelValue"],
+
+  setup(props, { emit }) {
+    const dashboardPanelDataPageKey = inject(
+      "dashboardPanelDataPageKey",
+      "dashboard",
+    );
+
+    const internalModel = ref(props.modelValue);
+
+    const options = ref<Option[]>([]);
+
+    const { getStream } = useStreams();
+    const { dashboardPanelData } = useDashboardPanelData(
+      dashboardPanelDataPageKey,
+    );
+
+    async function loadStreamFields(streamName: string) {
+      try {
+        if (streamName != "") {
+          return await getStream(
+            streamName,
+            dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields.stream_type ?? "logs",
+            true,
+          ).then((res) => {
+            return res;
+          });
+        } else {
+        }
+        return;
+      } catch (e: any) {
+        console.log("Error while loading stream fields");
+      }
+    }
+
+    async function fetchFieldsForStreams() {
+      if (!props.streams || props.streams.length === 0) {
+        options.value = [];
+        return;
+      }
+
+      // Fetch schema for each stream and build options
+      options.value = await Promise.all(
+        props.streams.map(async (stream: any) => {
+          const streamSchemaObj = await loadStreamFields(stream.stream);
+
+          return {
+            label: stream.streamAlias
+              ? `${stream.stream}(${stream.streamAlias})`
+              : `${stream.stream}`,
+            children: streamSchemaObj?.schema?.map((field: any) => ({
+              ...field,
+              stream: stream,
+            })),
+          };
+        }),
+      );
+    }
+
+    function selectField(field: any) {
+      internalModel.value = {
+        streamAlias: field?.stream?.streamAlias,
+        field: field.name,
+      };
+    }
+
+    // Watch for v-model changes
+    watch(internalModel, (newValue) => {
+      emit("update:modelValue", newValue);
+    });
+
+    // Watch for streams changes
+    watch(() => props.streams, fetchFieldsForStreams, { immediate: true });
+
+    return {
+      internalModel,
+      options,
+      selectField,
+    };
+  },
+});
+</script>
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
new file mode 100644
index 00000000000..8827bf364ad
--- /dev/null
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -0,0 +1,81 @@
+<template>
+  <div style="width: 500px">
+    <q-tabs
+      v-model="fields.type"
+      @update:modelValue="onFieldTypeChange"
+      dense
+      class="text-grey"
+      active-color="primary"
+      indicator-color="primary"
+      narrow-indicator
+    >
+      <q-tab name="build" label="Build" />
+      <q-tab name="raw" label="Raw" />
+    </q-tabs>
+
+    <q-separator />
+
+    <q-tab-panels v-model="fields.type" animated>
+      <q-tab-panel name="build">
+        <SelectFunction v-model="fields" />
+      </q-tab-panel>
+      <q-tab-panel name="raw">
+        <RawQueryBuilder v-model="fields" />
+      </q-tab-panel>
+    </q-tab-panels>
+  </div>
+</template>
+
+<script lang="ts">
+import { ref, watch } from "vue";
+//   import useDashboardPanelData from "@/composables/useDashboardPanel";
+import RawQueryBuilder from "./RawQueryBuilder.vue";
+import SelectFunction from "./SelectFunction.vue";
+
+export default {
+  name: "DynamicFunctionPopUp",
+  components: { RawQueryBuilder, SelectFunction },
+  props: {
+    modelValue: {
+      type: Object,
+      required: true,
+    },
+  },
+  emits: ["update:modelValue"],
+  setup(props, { emit }) {
+    //   const dashboardPanelDataPageKey = inject(
+    //     "dashboardPanelDataPageKey",
+    //     "dashboard",
+    //   );
+    //   const { dashboardPanelData } = useDashboardPanelData(
+    //     dashboardPanelDataPageKey
+    //   );
+
+    const fields = ref(props.modelValue);
+
+    watch(
+      () => fields.value,
+      (value) => {
+        emit("update:modelValue", value);
+      },
+      { deep: true },
+    );
+
+    const onFieldTypeChange = () => {
+      // reset fields object
+      if (fields.value.type === "build") {
+        fields.value.rawQuery = "";
+      } else {
+        fields.value.functionName = null;
+        fields.value.args = [];
+      }
+    };
+
+    return {
+      fields,
+      onFieldTypeChange,
+    };
+  },
+};
+</script>
+<style scoped></style>
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue b/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
new file mode 100644
index 00000000000..ff309e762b1
--- /dev/null
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
@@ -0,0 +1,78 @@
+<template>
+  <div>
+    <div class="q-mb-sm rawQuery">Query</div>
+    <q-input
+      outlined
+      v-model="fields.rawQuery"
+      filled
+      autogrow
+      class="showLabelOnTop"
+    />
+    <q-input
+      v-model="fields.alias"
+      label="Alias"
+      color="input-border"
+      bg-color="input-bg"
+      class="q-py-md showLabelOnTop"
+      stack-label
+      filled
+      dense
+      label-slot
+    />
+  </div>
+</template>
+
+<script lang="ts">
+import { ref, watch } from "vue";
+import { useStore } from "vuex";
+
+//   import useDashboardPanelData from "@/composables/useDashboardPanel";
+
+export default {
+  name: "RawQueryBuilder",
+  props: {
+    modelValue: {
+      type: Object,
+      required: true,
+    },
+  },
+  emits: ["update:modelValue"],
+  setup(props, { emit }) {
+    //   const dashboardPanelDataPageKey = inject(
+    //     "dashboardPanelDataPageKey",
+    //     "dashboard",
+    //   );
+    //   const { dashboardPanelData } = useDashboardPanelData(
+    //     dashboardPanelDataPageKey
+    //   );
+
+    const store = useStore();
+
+    const fields = ref(props.modelValue);
+
+    watch(
+      () => fields.value,
+      (value: any) => {
+        emit("update:modelValue", value);
+      },
+      {
+        deep: true,
+      },
+    );
+
+    return {
+      store,
+      fields,
+    };
+  },
+};
+</script>
+<style scoped>
+.rawQuery {
+  margin-top: 5px;
+  margin-bottom: 5px;
+  font-size: 14px;
+  font-weight: 600;
+  color: #666666;
+}
+</style>
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
new file mode 100644
index 00000000000..dc0a0889094
--- /dev/null
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -0,0 +1,443 @@
+<template>
+  <div class="row">
+    <q-select
+      v-model="fields.functionName"
+      label="Select Function"
+      :options="filteredFunctions"
+      data-test="dashboard-function-dropdown"
+      input-debounce="0"
+      behavior="menu"
+      use-input
+      filled
+      borderless
+      dense
+      hide-selected
+      fill-input
+      @filter="filterFunctionsOptions"
+      option-label="label"
+      option-value="value"
+      emit-value
+      map-options
+      class="tw-w-52"
+    >
+      <!-- <template v-slot:append>
+          <q-icon
+            name="close"
+            size="small"
+            @click.stop.prevent="fields.functionName = null"
+            class="cursor-pointer"
+          />
+        </template> -->
+    </q-select>
+
+    <!-- {{ JSON.stringify(fields.args) }} -->
+    <!-- Loop through the args for the first n-1 arguments -->
+    <div
+      v-for="(arg, argIndex) in fields.args"
+      :key="argIndex"
+      class="tw-w-full tw-flex tw-flex-col"
+    >
+      <div>
+        <div>
+          <label :for="'arg-' + argIndex">Parameters {{ argIndex + 1 }}</label>
+        </div>
+        <div class="tw-flex tw-gap-x-3">
+          <!-- type selector -->
+          <q-select
+            v-model="fields.args[argIndex].type"
+            @update:model-value="onArgTypeChange(fields.args[argIndex])"
+            :options="
+              getSupportedTypeBasedOnFunctionNameAndIndex(
+                fields.functionName,
+                argIndex,
+              )
+            "
+            dense
+            filled
+            label="Select Type"
+            data-test="dashboard-y-item-dropdown"
+            class="tw-w-40 tw-min-w-40"
+          />
+
+          <!-- Render different input types based on validation -->
+          <!-- <q-select
+            v-model="fields.args[argIndex].value"
+            :options="filteredSchemaOptions"
+            label="Select Field"
+            input-debounce="0"
+            behavior="menu"
+            dense
+            filled
+            use-input
+            borderless
+            hide-selected
+            fill-input
+            emit-value
+            @filter="filterStreamFn"
+            :required="isRequired(fields.functionName, argIndex)"
+            class="tw-w-52"
+          /> -->
+
+          <!-- Left field selector using StreamFieldSelect -->
+          <div class="tw-w-52" v-if="fields.args[argIndex]?.type === 'field'">
+            <StreamFieldSelect
+              :streams="getAllSelectedStreams()"
+              v-model="fields.args[argIndex].value"
+            />
+          </div>
+
+          <q-input
+            v-if="fields.args[argIndex]?.type === 'string'"
+            type="text"
+            v-model="fields.args[argIndex].value"
+            placeholder="Enter string"
+            :required="isRequired(fields.functionName, argIndex)"
+            class="tw-w-52"
+          />
+
+          <q-input
+            v-if="fields.args[argIndex]?.type === 'number'"
+            type="number"
+            v-model="fields.args[argIndex].value"
+            placeholder="Enter number"
+            :required="isRequired(fields.functionName, argIndex)"
+            class="tw-w-52"
+          />
+
+          <SelectFunction
+            v-if="fields.args[argIndex]?.type === 'function'"
+            class="tw-ml-4"
+            v-model="fields.args[argIndex].value"
+          />
+
+          <!-- histogram interval for sql queries -->
+          <HistogramIntervalDropDown
+            v-if="fields.args[argIndex]?.type === 'histogramInterval'"
+            :model-value="fields.args[argIndex].value"
+            @update:modelValue="
+              (newValue: any) => {
+                fields.args[argIndex].value = newValue.value;
+              }
+            "
+            class="tw-w-52"
+          />
+
+          <!-- Remove argument button -->
+          <q-btn
+            v-if="canRemoveArgument(fields.functionName, argIndex)"
+            icon="close"
+            dense
+            flat
+            round
+            @click="removeArgument(argIndex)"
+            class="tw-h-10 tw-w-10"
+          />
+        </div>
+      </div>
+
+      <!-- Add more arguments if allowed -->
+    </div>
+    <q-btn
+      v-if="canAddArgument(fields.functionName)"
+      @click="addArgument()"
+      color="primary"
+      label="+ Add"
+      padding="5px 14px"
+      class="tw-mt-3"
+      no-caps
+      dense
+    />
+  </div>
+</template>
+
+<script lang="ts">
+import { ref, watch, toRef, computed, inject } from "vue";
+import functionValidation from "./functionValidation.json";
+import useDashboardPanelData from "@/composables/useDashboardPanel";
+import { useSelectAutoComplete } from "@/composables/useSelectAutocomplete";
+import HistogramIntervalDropDown from "../HistogramIntervalDropDown.vue";
+import { addMissingArgs } from "@/utils/dashboard/convertDataIntoUnitValue";
+import StreamFieldSelect from "@/components/dashboards/addPanel/StreamFieldSelect.vue";
+
+export default {
+  name: "SelectFunction",
+  components: { HistogramIntervalDropDown, StreamFieldSelect },
+  props: {
+    modelValue: {
+      type: Object,
+      required: true,
+    },
+  },
+  emits: ["update:modelValue"],
+  setup(props: any, { emit }) {
+    const dashboardPanelDataPageKey = inject(
+      "dashboardPanelDataPageKey",
+      "dashboard",
+    );
+    const { dashboardPanelData, selectedStreamFieldsBasedOnUserDefinedSchema } =
+      useDashboardPanelData(dashboardPanelDataPageKey);
+
+    // const schemaOptions = computed(() =>
+    //   selectedStreamFieldsBasedOnUserDefinedSchema?.value?.map(
+    //     (field: any) => ({
+    //       label: field.name,
+    //       value: field.name,
+    //     }),
+    //   ),
+    // );
+
+    const fields = ref(addMissingArgs(props.modelValue));
+
+    watch(
+      () => fields.value,
+      () => {
+        emit("update:modelValue", fields.value);
+      },
+      {
+        deep: true,
+      },
+    );
+
+    // const { filterFn: filterStreamFn, filteredOptions: filteredSchemaOptions } =
+    //   useSelectAutoComplete(toRef(schemaOptions), "label");
+
+    const filteredFunctions: any = ref([]);
+
+    const filterFunctionsOptions = (val: string, update: any) => {
+      update(() => {
+        filteredFunctions.value = functionValidation
+          .map((v) => ({
+            label: v.functionLabel,
+            value: v.functionName,
+          }))
+          .filter((v) => v.label.toLowerCase().indexOf(val.toLowerCase()) > -1);
+      });
+    };
+
+    // const availableFunctions = ref(["arrzip", "concat", "count", "sum"]);
+
+    const getValidationForFunction = (functionName: string) => {
+      return (
+        functionValidation.find((v) => v.functionName === functionName) ?? {}
+      );
+    };
+
+    const canAddArgument = (functionName: string) => {
+      const funcValidation: any = getValidationForFunction(functionName);
+      return funcValidation?.allowAddArgAt != undefined;
+    };
+
+    const canRemoveArgument = (functionName: string, argIndex: number) => {
+      const funcValidation: any = getValidationForFunction(functionName);
+
+      // if add arg not allowd, then do not allow to remove argument
+      if (funcValidation?.allowAddArgAt === undefined) return false;
+
+      const argsValidation = funcValidation?.args || [];
+      const allowAddArgAt = funcValidation?.allowAddArgAt;
+
+      // Determine the actual index based on allowAddArgAt
+      const adjustedIndex = getAdjustedIndex(
+        argsValidation,
+        argIndex,
+        allowAddArgAt,
+      );
+
+      const minArg = argsValidation[adjustedIndex]?.min ?? 0;
+      const functionTotalArgs = argsValidation.length;
+      const addedArgCount = argIndex + 1 - (functionTotalArgs - 1);
+
+      return addedArgCount > minArg;
+    };
+
+    const addArgument = () => {
+      const funcValidation: any = getValidationForFunction(
+        fields.value.functionName,
+      );
+
+      const adjustedIndex = getAdjustedIndex(
+        funcValidation?.args || [],
+        fields.value.args.length - 1,
+        funcValidation?.allowAddArgAt,
+      );
+
+      if (canAddArgument(fields.value.functionName)) {
+        if (funcValidation.allowAddArgAt === "n") {
+          fields.value.args.push({
+            type: funcValidation?.args?.[adjustedIndex]?.type?.[0],
+            value: "",
+          });
+        } else if (funcValidation.allowAddArgAt === "n-1") {
+          // Add an argument before the separator
+          fields.value.args.splice(fields.value.args.length - 1, 0, {
+            type: funcValidation?.args?.[adjustedIndex]?.type?.[0], // Add default type (e.g., field, string, etc.)
+            value: "",
+          });
+        }
+      }
+    };
+
+    const removeArgument = (argIndex: number) => {
+      fields.value.args.splice(argIndex, 1);
+    };
+
+    const isRequired = (functionName: string, argIndex: number) => {
+      const funcValidation: any = getValidationForFunction(functionName);
+
+      // NOTE: get relavent arg from validation
+      return funcValidation?.args?.[argIndex]?.required ?? false;
+    };
+
+    const getNonSeparatorArgs = (field: any) => {
+      // Return the first n-1 arguments (non-separator)
+      return field.args.slice(0, field.args.length - 1);
+    };
+
+    const getSeparatorArg = (field: any) => {
+      // Return the last argument (separator)
+      return field.args[field.args.length - 1];
+    };
+
+    // Helper function to adjust the index based on allowAddArgAt
+    const getAdjustedIndex = (
+      argsValidation: any,
+      argIndex: number,
+      allowAddArgAt: any,
+    ) => {
+      const totalArgs = argsValidation.length;
+
+      // Handle different cases for allowAddArgAt
+      if (allowAddArgAt === "n") {
+        // 'n' means the argument is added at the end
+        return totalArgs - 1;
+      } else if (allowAddArgAt === "n-1") {
+        // 'n-1' means the argument should be added before the last argument
+        // if it is last argument
+        if (argIndex === totalArgs - 1) {
+          return totalArgs - 1;
+        } else {
+          return Math.min(argIndex, totalArgs - 2);
+        }
+      } else if (typeof allowAddArgAt === "number") {
+        // If allowAddArgAt is a specific index, return that index
+        // NOTE: NEED TO REWORK ON THIS CASE
+        return Math.min(allowAddArgAt, totalArgs); // Ensure we don't exceed the total number of args
+      } else {
+        // Default case: return the provided argIndex without adjustment
+        return argIndex;
+      }
+    };
+
+    const getSupportedTypeBasedOnFunctionNameAndIndex = (
+      functionName: string,
+      argIndex: number,
+    ) => {
+      const funcValidation: any = getValidationForFunction(functionName);
+
+      if (!funcValidation) {
+        return [];
+      }
+
+      const argsValidation = funcValidation?.args || [];
+      const allowAddArgAt = funcValidation?.allowAddArgAt;
+
+      // Determine the actual index based on allowAddArgAt
+      const adjustedIndex = getAdjustedIndex(
+        argsValidation,
+        argIndex,
+        allowAddArgAt,
+      );
+
+      // Return the type for the adjusted index, or an empty array if the index is out of bounds
+      return argsValidation[adjustedIndex]?.type || [];
+    };
+
+    // watcher on functionName
+    watch(
+      () => fields.value.functionName,
+      (newVal) => {
+        // Reset the args array
+        // get the validation for the selected function
+        const funcValidation: any = getValidationForFunction(
+          fields.value.functionName,
+        );
+
+        // rebuild fields.value.args based on funcValidation.args
+        if (funcValidation) {
+          // need to add args based on funcValidation.args
+          fields.value.args = (funcValidation?.args ?? []).flatMap((arg: any) =>
+            // need to consider `min` config for each arg
+            Array.from({ length: arg.min ?? 1 }).map(() => ({
+              type: arg.type[0],
+              value: arg?.defaultValue,
+            })),
+          );
+        }
+      },
+    );
+
+    const onArgTypeChange = (arg: any) => {
+      if (arg.type === "field") {
+        arg.value = {};
+      } else if (arg.type === "string") {
+        arg.value = "";
+      } else if (arg.type === "number") {
+        arg.value = 0;
+      } else if (arg.type === "boolean") {
+        arg.value = false;
+      } else if (arg.type === "function") {
+        arg.value = {
+          functionName: null,
+          args: [],
+          value: "",
+        };
+      } else if (arg.type === "histogramInterval") {
+        arg.value = null;
+      }
+    };
+
+    const getAllSelectedStreams = () => {
+      // get all streams
+      // mainStream + all join streams
+
+      return [
+        {
+          stream:
+            dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields.stream,
+        },
+        ...((
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ]?.joins ?? []
+        )?.map((join: any) => ({
+          stream: join.stream,
+          streamAlias: join.streamAlias,
+        })) ?? []),
+      ];
+    };
+
+    return {
+      fields,
+      functionValidation,
+      // availableFunctions,
+      getValidationForFunction,
+      canAddArgument,
+      canRemoveArgument,
+      addArgument,
+      removeArgument,
+      isRequired,
+      getNonSeparatorArgs,
+      getSeparatorArg,
+      getSupportedTypeBasedOnFunctionNameAndIndex,
+      // filterStreamFn,
+      // filteredSchemaOptions,
+      filteredFunctions,
+      filterFunctionsOptions,
+      onArgTypeChange,
+      getAllSelectedStreams,
+    };
+  },
+};
+</script>
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
new file mode 100644
index 00000000000..e4aabd5fd4b
--- /dev/null
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
@@ -0,0 +1,718 @@
+[
+    {
+        "functionName": null,
+        "functionLabel": "None",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "histogram",
+        "functionLabel": "Histogram",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "histogramInterval",
+                    "function"
+                ],
+                "defaultValue": null,
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "count",
+        "functionLabel": "Count",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "count-distinct",
+        "functionLabel": "Count (Distinct)",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "sum",
+        "functionLabel": "sum",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "avg",
+        "functionLabel": "avg",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "min",
+        "functionLabel": "min",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "max",
+        "functionLabel": "max",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "p50",
+        "functionLabel": "p50",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "p90",
+        "functionLabel": "p90",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "p95",
+        "functionLabel": "p95",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "p99",
+        "functionLabel": "p99",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "abs",
+        "functionLabel": "Abs",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "acos",
+        "functionLabel": "ArcCos",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "asin",
+        "functionLabel": "ArcSin",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "atan",
+        "functionLabel": "ArcTan",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "atan2",
+        "functionLabel": "ArcTan2",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "ceil",
+        "functionLabel": "Ceil",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "cos",
+        "functionLabel": "cos",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "exp",
+        "functionLabel": "exp",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "floor",
+        "functionLabel": "Floor",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "log",
+        "functionLabel": "log",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "log10",
+        "functionLabel": "log10",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "log2",
+        "functionLabel": "log2",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "pow",
+        "functionLabel": "pow",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "field",
+                    "number",
+                    "function"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "round",
+        "functionLabel": "round",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "field",
+                    "number"
+                ],
+                "required": false
+            }
+        ]
+    },
+    {
+        "functionName": "sin",
+        "functionLabel": "sin",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "sqrt",
+        "functionLabel": "sqrt",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "tan",
+        "functionLabel": "tan",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "string_length",
+        "functionLabel": "string_length",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "char_length",
+        "functionLabel": "char_length",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "concat",
+        "functionLabel": "concat",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string",
+                    "function"
+                ],
+                "required": true,
+                "min": 2
+            }
+        ],
+        "allowAddArgAt": "n"
+    },
+    {
+        "functionName": "lower",
+        "functionLabel": "lower",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "upper",
+        "functionLabel": "upper",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "substring",
+        "functionLabel": "substring",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "field",
+                    "number"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "field",
+                    "number"
+                ],
+                "required": false
+            }
+        ]
+    },
+    {
+        "functionName": "trim",
+        "functionLabel": "trim",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "ltrim",
+        "functionLabel": "ltrim",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "rtrim",
+        "functionLabel": "rtrim",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "date_add",
+        "functionLabel": "date_add",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "field",
+                    "number"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "date_sub",
+        "functionLabel": "date_sub",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "field",
+                    "number"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "datediff",
+        "functionLabel": "datediff",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "from_unixtime",
+        "functionLabel": "from_unixtime",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "number"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": false
+            }
+        ]
+    },
+    {
+        "functionName": "to_unixtime",
+        "functionLabel": "to_unixtime",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "string"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "array_length",
+        "functionLabel": "array_length",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "array"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "array_sort",
+        "functionLabel": "array_sort",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "array"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "array_append",
+        "functionLabel": "array_append",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "array"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "field",
+                    "string",
+                    "number"
+                ],
+                "required": true
+            }
+        ]
+    },
+    {
+        "functionName": "array_contains",
+        "functionLabel": "array_contains",
+        "args": [
+            {
+                "type": [
+                    "field",
+                    "array"
+                ],
+                "required": true
+            },
+            {
+                "type": [
+                    "field",
+                    "string",
+                    "number"
+                ],
+                "required": true
+            }
+        ]
+    }
+]
\ No newline at end of file
diff --git a/web/src/components/dashboards/viewPanel/ViewPanel.vue b/web/src/components/dashboards/viewPanel/ViewPanel.vue
index 1c1295a6062..3fcea4fef43 100644
--- a/web/src/components/dashboards/viewPanel/ViewPanel.vue
+++ b/web/src/components/dashboards/viewPanel/ViewPanel.vue
@@ -27,6 +27,11 @@
         <HistogramIntervalDropDown
           v-if="!promqlMode && histogramFields.length"
           v-model="histogramInterval"
+          @update:modelValue="
+            (newValue: any) => {
+              histogramInterval = newValue.value;
+            }
+          "
           class="q-ml-sm"
           style="width: 150px"
           data-test="dashboard-viewpanel-histogram-interval-dropdown"
@@ -291,10 +296,7 @@ export default defineComponent({
     const refreshInterval = ref(0);
 
     // histogram interval
-    const histogramInterval: any = ref({
-      value: null,
-      label: "Auto",
-    });
+    const histogramInterval: any = ref(null);
 
     // array of histogram fields
     let histogramFields: any = ref([]);
@@ -339,7 +341,7 @@ export default defineComponent({
                 histogramExpr.args.type === "expr_list"
               ) {
                 // if selected histogramInterval is null then remove interval argument
-                if (!histogramInterval.value.value) {
+                if (!histogramInterval.value) {
                   histogramExpr.args.value = histogramExpr.args.value.slice(
                     0,
                     1,
@@ -355,13 +357,13 @@ export default defineComponent({
                     // Update existing interval value
                     histogramExpr.args.value[1] = {
                       type: "single_quote_string",
-                      value: `${histogramInterval.value.value}`,
+                      value: `${histogramInterval.value}`,
                     };
                   } else {
                     // create new arg for interval
                     histogramExpr.args.value.push({
                       type: "single_quote_string",
-                      value: `${histogramInterval.value.value}`,
+                      value: `${histogramInterval.value}`,
                     });
                   }
                 }
@@ -429,7 +431,7 @@ export default defineComponent({
           : dashboardPanelData.data.queries
               .map((q: any) =>
                 [...q.fields.x, ...q.fields.y, ...q.fields.z].find(
-                  (f: any) => f.aggregationFunction == "histogram",
+                  (f: any) => f.functionName == "histogram",
                 ),
               )
               .filter((field: any) => field != undefined);
@@ -442,10 +444,7 @@ export default defineComponent({
             histogramFields.value[i]?.args &&
             histogramFields.value[i]?.args[0]?.value
           ) {
-            histogramInterval.value = {
-              value: histogramFields.value[i]?.args[0]?.value,
-              label: histogramFields.value[i]?.args[0]?.value,
-            };
+            histogramInterval.value = histogramFields.value[i]?.args[0]?.value;
             break;
           }
         }
diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index 26258d381cb..01b46eb8b23 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -19,7 +19,12 @@ import { useStore } from "vuex";
 import useNotifications from "./useNotifications";
 import { splitQuotedString, escapeSingleQuotes } from "@/utils/zincutils";
 import { extractFields } from "@/utils/query/sqlUtils";
-import { validatePanel } from "@/utils/dashboard/convertDataIntoUnitValue";
+import { validateSQLPanelFields } from "@/utils/dashboard/convertDataIntoUnitValue";
+import {
+  buildSQLQueryFromInput,
+  buildSQLJoinsFromInput,
+} from "@/utils/dashboard/convertDataIntoUnitValue";
+import useStreams from "./useStreams";
 
 const colors = [
   "#5960b2",
@@ -118,6 +123,7 @@ const getDefaultDashboardPanelData: any = () => ({
         query: "",
         vrlFunctionQuery: "",
         customQuery: false,
+        joins: [],
         fields: {
           stream: "",
           stream_type: "logs",
@@ -190,6 +196,9 @@ const getDefaultDashboardPanelData: any = () => ({
       streamResultsType: "",
       filterField: "",
     },
+    streamFields: {
+      groupedFields: [],
+    },
   },
 });
 
@@ -205,6 +214,7 @@ const getDefaultCustomChartText = () => {
 const useDashboardPanelData = (pageKey: string = "dashboard") => {
   const store = useStore();
   const { showErrorNotification } = useNotifications();
+  const { getStreams, getStream } = useStreams();
 
   // Initialize the state for this page key if it doesn't already exist
   if (!dashboardPanelDataObj[pageKey]) {
@@ -314,6 +324,52 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     return dashboardPanelData.meta.stream.selectedStreamFields ?? [];
   });
 
+  async function loadStreamFields(streamName: string) {
+    try {
+      if (!streamName) return;
+
+      // Create a new request and store it in the cache
+      return await getStream(
+        streamName,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.stream_type ?? "logs",
+        true,
+      );
+    } catch (e: any) {
+      console.error("Error while loading stream fields", e);
+    }
+  }
+
+  // Helper function to update grouped fields
+  const updateGroupedFields = async () => {
+    const currentStream =
+      dashboardPanelData.data.queries[
+        dashboardPanelData.layout.currentQueryIndex
+      ].fields.stream;
+    if (!currentStream) return;
+
+    // Collect streams (main + joins)
+    const joinsStreams = [
+      { stream: currentStream },
+      ...(dashboardPanelData.data.queries[
+        dashboardPanelData.layout.currentQueryIndex
+      ].joins?.filter((stream: any) => stream?.stream) ?? []),
+    ];
+
+    // Fetch stream fields
+    const groupedFields = await Promise.all(
+      joinsStreams.map(async (stream: any) => {
+        return {
+          ...(await loadStreamFields(stream?.stream)),
+          stream_alias: stream?.streamAlias,
+        };
+      }),
+    );
+
+    dashboardPanelData.meta.streamFields.groupedFields = groupedFields;
+  };
+
   const isAddXAxisNotAllowed = computed((e: any) => {
     switch (dashboardPanelData.data.type) {
       case "pie":
@@ -416,7 +472,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     );
   };
 
-  const addXAxisItem = (row: { name: string }) => {
+  const addXAxisItem = (row: { name: string; streamAlias?: string }) => {
     if (
       !dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
@@ -434,45 +490,71 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
 
     // check for existing field
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.x.find((it: any) => it.column == row.name)
-    ) {
-      dashboardPanelData.data.queries[
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.x.find((it: any) => it.column == row.name)
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.x.push({
+      label: !dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
-      ].fields.x.push({
-        label: !dashboardPanelData.data.queries[
+      ].customQuery
+        ? generateLabelFromName(row.name)
+        : row.name,
+      alias:
+        !dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].customQuery
-          ? generateLabelFromName(row.name)
+        ].customQuery && !isDerived
+          ? "x_axis_" +
+            (dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields.x.length +
+              1)
           : row.name,
-        alias:
-          !dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].customQuery && !isDerived
-            ? "x_axis_" +
-              (dashboardPanelData.data.queries[
-                dashboardPanelData.layout.currentQueryIndex
-              ].fields.x.length +
-                1)
-            : row.name,
-        column: row.name,
-        color: null,
-        aggregationFunction:
-          row.name == store.state.zoConfig.timestamp_column && !isDerived
-            ? "histogram"
-            : null,
-        sortBy:
-          row.name == store.state.zoConfig.timestamp_column
-            ? dashboardPanelData.data.type == "table"
-              ? "DESC"
-              : "ASC"
-            : null,
-        isDerived,
-        havingConditions: [],
-      });
-    }
+      // column: row.name,
+      color: null,
+      type: "build",
+      functionName:
+        row.name == store.state.zoConfig.timestamp_column && !isDerived
+          ? "histogram"
+          : null,
+      args:
+        row.name == store.state.zoConfig.timestamp_column && !isDerived
+          ? [
+              {
+                type: "field",
+                value: {
+                  field: row.name,
+                  streamAlias: row.streamAlias,
+                },
+              },
+              {
+                type: "histogramInterval",
+                value: null,
+              },
+            ]
+          : [
+              {
+                type: "field",
+                value: {
+                  field: row.name,
+                  streamAlias: row.streamAlias,
+                },
+              },
+            ],
+      sortBy:
+        row.name == store.state.zoConfig.timestamp_column
+          ? dashboardPanelData.data.type == "table"
+            ? "DESC"
+            : "ASC"
+          : null,
+      isDerived,
+      havingConditions: [],
+    });
+
+    // }
 
     updateArrayAlias();
   };
@@ -495,45 +577,70 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
 
     // check for existing field
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.breakdown.find((it: any) => it.column == row.name)
-    ) {
-      dashboardPanelData.data.queries[
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.breakdown.find((it: any) => it.column == row.name)
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.breakdown.push({
+      label: !dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
-      ].fields.breakdown.push({
-        label: !dashboardPanelData.data.queries[
+      ].customQuery
+        ? generateLabelFromName(row.name)
+        : row.name,
+      alias:
+        !dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].customQuery
-          ? generateLabelFromName(row.name)
+        ].customQuery && !isDerived
+          ? "breakdown_" +
+            (dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields.breakdown.length +
+              1)
           : row.name,
-        alias:
-          !dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].customQuery && !isDerived
-            ? "breakdown_" +
-              (dashboardPanelData.data.queries[
-                dashboardPanelData.layout.currentQueryIndex
-              ].fields.breakdown.length +
-                1)
-            : row.name,
-        column: row.name,
-        color: null,
-        aggregationFunction:
-          row.name == store.state.zoConfig.timestamp_column && !isDerived
-            ? "histogram"
-            : null,
-        sortBy:
-          row.name == store.state.zoConfig.timestamp_column
-            ? dashboardPanelData.data.type == "table"
-              ? "DESC"
-              : "ASC"
-            : null,
-        isDerived,
-        havingConditions: [],
-      });
-    }
+      // column: row.name,
+      color: null,
+      type: "build",
+      functionName:
+        row.name == store.state.zoConfig.timestamp_column && !isDerived
+          ? "histogram"
+          : null,
+      args:
+        row.name == store.state.zoConfig.timestamp_column && !isDerived
+          ? [
+              {
+                type: "field",
+                value: {
+                  field: row.name,
+                  streamAlias: row.streamAlias,
+                },
+              },
+              {
+                type: "histogramInterval",
+                value: null,
+              },
+            ]
+          : [
+              {
+                type: "field",
+                value: {
+                  field: row.name,
+                  streamAlias: row.streamAlias,
+                },
+              },
+            ],
+      sortBy:
+        row.name == store.state.zoConfig.timestamp_column
+          ? dashboardPanelData.data.type == "table"
+            ? "DESC"
+            : "ASC"
+          : null,
+      isDerived,
+      havingConditions: [],
+    });
+    // }
 
     updateArrayAlias();
   };
@@ -555,39 +662,48 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
 
     const isDerived = checkIsDerivedField(row.name) ?? false;
 
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.y.find((it: any) => it?.column == row.name)
-    ) {
-      dashboardPanelData.data.queries[
+    // HERE NEED CHANGES
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.y.find((it: any) => it?.column == row.name)
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.y.push({
+      label: !dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
-      ].fields.y.push({
-        label: !dashboardPanelData.data.queries[
+      ].customQuery
+        ? generateLabelFromName(row.name)
+        : row.name,
+      alias:
+        !dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].customQuery
-          ? generateLabelFromName(row.name)
+        ].customQuery && !isDerived
+          ? "y_axis_" +
+            (dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields.y.length +
+              1)
           : row.name,
-        alias:
-          !dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].customQuery && !isDerived
-            ? "y_axis_" +
-              (dashboardPanelData.data.queries[
-                dashboardPanelData.layout.currentQueryIndex
-              ].fields.y.length +
-                1)
-            : row.name,
-        column: row.name,
-        color: getNewColorValue(),
-        aggregationFunction:
-          dashboardPanelData.data.type == "heatmap" || isDerived
-            ? null
-            : "count",
-        isDerived,
-        havingConditions: [],
-      });
-    }
+      // column: row.name,
+      color: getNewColorValue(),
+      type: "build",
+      functionName:
+        dashboardPanelData.data.type == "heatmap" || isDerived ? null : "count",
+      args: [
+        {
+          type: "field",
+          value: {
+            field: row.name,
+            streamAlias: row.streamAlias,
+          },
+        },
+      ],
+      isDerived,
+      havingConditions: [],
+    });
+    // }
     updateArrayAlias();
   };
 
@@ -608,201 +724,298 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
 
     const isDerived = checkIsDerivedField(row.name) ?? false;
 
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.z.find((it: any) => it.column == row.name)
-    ) {
-      dashboardPanelData.data.queries[
+    // HERE NEED CHANGES
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.z.find((it: any) => it.column == row.name)
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.z.push({
+      label: !dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
-      ].fields.z.push({
-        label: !dashboardPanelData.data.queries[
+      ].customQuery
+        ? generateLabelFromName(row.name)
+        : row.name,
+      alias:
+        !dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].customQuery
-          ? generateLabelFromName(row.name)
+        ].customQuery && !isDerived
+          ? "z_axis_" +
+            (dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields.z.length +
+              1)
           : row.name,
-        alias:
-          !dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].customQuery && !isDerived
-            ? "z_axis_" +
-              (dashboardPanelData.data.queries[
-                dashboardPanelData.layout.currentQueryIndex
-              ].fields.z.length +
-                1)
-            : row.name,
-        column: row.name,
-        color: getNewColorValue(),
-        aggregationFunction: isDerived ? null : "count",
-        isDerived,
-        havingConditions: [],
-      });
-    }
+      // column: row.name,
+      color: getNewColorValue(),
+      type: "build",
+      functionName: isDerived ? null : "count",
+      args: [
+        {
+          type: "field",
+          value: {
+            field: row.name,
+            streamAlias: row.streamAlias,
+          },
+        },
+      ],
+      isDerived,
+      havingConditions: [],
+    });
+    // }
     updateArrayAlias();
   };
 
   const addLatitude = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.latitude
-    ) {
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.latitude = {
-        label: generateLabelFromName(row.name),
-        alias: isDerived ? row.name : "latitude",
-        column: row.name,
-        color: getNewColorValue(),
-        aggregationFunction: null, // You can set the appropriate aggregation function here
-        isDerived,
-        havingConditions: [],
-      };
-    }
+    // HERE NEED CHANGES
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.latitude
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.latitude = {
+      label: generateLabelFromName(row.name),
+      alias: isDerived ? row.name : "latitude",
+      // column: row.name,
+      color: getNewColorValue(),
+      type: "build",
+      functionName: null, // You can set the appropriate aggregation function here
+      args: [
+        {
+          type: "field",
+          value: {
+            field: row.name,
+            streamAlias: row.streamAlias,
+          },
+        },
+      ],
+      isDerived,
+      havingConditions: [],
+    };
+    // }
   };
 
   const addLongitude = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.longitude
-    ) {
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.longitude = {
-        label: generateLabelFromName(row.name),
-        alias: isDerived ? row.name : "longitude",
-        column: row.name,
-        color: getNewColorValue(),
-        aggregationFunction: null, // You can set the appropriate aggregation function here
-        isDerived,
-        havingConditions: [],
-      };
-    }
+    // HERE NEED CHANGES
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.longitude
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.longitude = {
+      label: generateLabelFromName(row.name),
+      alias: isDerived ? row.name : "longitude",
+      // column: row.name,
+      color: getNewColorValue(),
+      type: "build",
+      functionName: null, // You can set the appropriate aggregation function here
+      args: [
+        {
+          type: "field",
+          value: {
+            field: row.name,
+            streamAlias: row.streamAlias,
+          },
+        },
+      ],
+      isDerived,
+      havingConditions: [],
+    };
+    // }
   };
 
   const addWeight = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.weight
-    ) {
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.weight = {
-        label: generateLabelFromName(row.name),
-        alias: isDerived ? row.name : "weight",
-        column: row.name,
-        color: getNewColorValue(),
-        aggregationFunction: isDerived ? null : "count", // You can set the appropriate aggregation function here
-        isDerived,
-        havingConditions: [],
-      };
-    }
+    // HERE NEED CHANGES
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.weight
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.weight = {
+      label: generateLabelFromName(row.name),
+      alias: isDerived ? row.name : "weight",
+      // column: row.name,
+      color: getNewColorValue(),
+      type: "build",
+      functionName: isDerived ? null : "count", // You can set the appropriate aggregation function here
+      args: [
+        {
+          type: "field",
+          value: {
+            field: row.name,
+            streamAlias: row.streamAlias,
+          },
+        },
+      ],
+      isDerived,
+      havingConditions: [],
+    };
+    // }
   };
 
   const addMapName = (row: any) => {
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.name
-    ) {
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.name = {
-        label: generateLabelFromName(row.name),
-        alias: "name",
-        column: row.name,
-        color: getNewColorValue(),
-        aggregationFunction: null, // You can set the appropriate aggregation function here
-        havingConditions: [],
-      };
-    }
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.name
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.name = {
+      label: generateLabelFromName(row.name),
+      alias: "name",
+      // column: row.name,
+      color: getNewColorValue(),
+      type: "build",
+      functionName: null, // You can set the appropriate aggregation function here
+      args: [
+        {
+          type: "field",
+          value: {
+            field: row.name,
+            streamAlias: row.streamAlias,
+          },
+        },
+      ],
+      havingConditions: [],
+    };
+    // }
   };
 
   const addMapValue = (row: any) => {
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.value_for_maps
-    ) {
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.value_for_maps = {
-        label: generateLabelFromName(row.name),
-        alias: "value_for_maps",
-        column: row.name,
-        color: getNewColorValue(),
-        aggregationFunction: "count", // You can set the appropriate aggregation function here
-        havingConditions: [],
-      };
-    }
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.value_for_maps
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.value_for_maps = {
+      label: generateLabelFromName(row.name),
+      alias: "value_for_maps",
+      // column: row.name,
+      color: getNewColorValue(),
+      type: "build",
+      functionName: "count", // You can set the appropriate aggregation function here
+      havingConditions: [],
+      args: [
+        {
+          type: "field",
+          value: {
+            field: row.name,
+            streamAlias: row.streamAlias,
+          },
+        },
+      ],
+    };
+    // }
   };
 
   const addSource = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.source
-    ) {
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.source = {
-        label: generateLabelFromName(row.name),
-        alias: isDerived ? row.name : "source",
-        column: row.name,
-        color: getNewColorValue(),
-        aggregationFunction: null, // You can set the appropriate aggregation function here
-        isDerived,
-        havingConditions: [],
-      };
-    }
+    // HERE NEED CHANGES
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.source
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.source = {
+      label: generateLabelFromName(row.name),
+      alias: isDerived ? row.name : "source",
+      // column: row.name,
+      color: getNewColorValue(),
+      type: "build",
+      functionName: null, // You can set the appropriate aggregation function here
+      args: [
+        {
+          type: "field",
+          value: {
+            field: row.name,
+            streamAlias: row.streamAlias,
+          },
+        },
+      ],
+      isDerived,
+      havingConditions: [],
+    };
+    // }
   };
 
   const addTarget = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.target
-    ) {
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.target = {
-        label: generateLabelFromName(row.name),
-        alias: isDerived ? row.name : "target",
-        column: row.name,
-        color: getNewColorValue(),
-        aggregationFunction: null, // You can set the appropriate aggregation function here
-        isDerived,
-        havingConditions: [],
-      };
-    }
+    // HERE NEED CHANGES
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.target
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.target = {
+      label: generateLabelFromName(row.name),
+      alias: isDerived ? row.name : "target",
+      // column: row.name,
+      color: getNewColorValue(),
+      type: "build",
+      functionName: null, // You can set the appropriate aggregation function here
+      args: [
+        {
+          type: "field",
+          value: {
+            field: row.name,
+            streamAlias: row.streamAlias,
+          },
+        },
+      ],
+      isDerived,
+      havingConditions: [],
+    };
+    // }
   };
 
   const addValue = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    if (
-      !dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.value
-    ) {
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.value = {
-        label: generateLabelFromName(row.name),
-        alias: isDerived ? row.name : "value",
-        column: row.name,
-        color: getNewColorValue(),
-        aggregationFunction: isDerived ? null : "sum", // You can set the appropriate aggregation function here
-        isDerived,
-        havingConditions: [],
-      };
-    }
+    // HERE NEED CHANGES
+    // if (
+    //   !dashboardPanelData.data.queries[
+    //     dashboardPanelData.layout.currentQueryIndex
+    //   ].fields.value
+    // ) {
+    dashboardPanelData.data.queries[
+      dashboardPanelData.layout.currentQueryIndex
+    ].fields.value = {
+      label: generateLabelFromName(row.name),
+      alias: isDerived ? row.name : "value",
+      // column: row.name,
+      color: getNewColorValue(),
+      type: "build",
+      functionName: isDerived ? null : "sum", // You can set the appropriate aggregation function here
+      args: [
+        {
+          type: "field",
+          value: {
+            field: row.name,
+            streamAlias: row.streamAlias,
+          },
+        },
+      ],
+      isDerived,
+      havingConditions: [],
+    };
+    // }
   };
 
   // get new color value based on existing color from the chart
@@ -823,7 +1036,9 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
         ].fields.y.forEach((itemY: any) => {
-          itemY.aggregationFunction = null;
+          itemY.functionName = null;
+          // take first arg
+          itemY.args = itemY.args.length ? [itemY?.args?.[0]] : [];
         });
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
@@ -863,8 +1078,10 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
         ].fields.y.forEach((itemY: any) => {
-          if (itemY.aggregationFunction === null && !itemY.isDerived) {
-            itemY.aggregationFunction = "count";
+          if (itemY.functionName === null && !itemY.isDerived) {
+            itemY.functionName = "count";
+            // take first arg
+            itemY.args = itemY.args.length ? [itemY?.args?.[0]] : [];
           }
         });
         dashboardPanelData.data.queries[
@@ -900,8 +1117,10 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
         ].fields.y.forEach((itemY: any) => {
-          if (itemY.aggregationFunction === null && !itemY.isDerived) {
-            itemY.aggregationFunction = "count";
+          if (itemY.functionName === null && !itemY.isDerived) {
+            itemY.functionName = "count";
+            // take first arg
+            itemY.args = itemY.args.length ? [itemY?.args?.[0]] : [];
           }
         });
         dashboardPanelData.data.queries[
@@ -1115,6 +1334,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
   };
 
   const removeXAxisItem = (name: string) => {
+    // HERE NEED CHANGES
     const index = dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.x.findIndex((it: any) => it.column == name);
@@ -1126,6 +1346,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
   };
 
   const removeBreakdownItem = (name: string) => {
+    // HERE NEED CHANGES
     const index = dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.breakdown.findIndex((it: any) => it.column == name);
@@ -1137,6 +1358,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
   };
 
   const removeYAxisItem = (name: string) => {
+    // HERE NEED CHANGES
     const index = dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.y.findIndex((it: any) => it.column == name);
@@ -1148,6 +1370,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
   };
 
   const removeZAxisItem = (name: string) => {
+    // HERE NEED CHANGES
     const index = dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.z.findIndex((it: any) => it.column == name);
@@ -1689,7 +1912,9 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
               (currentFieldType === "y" || currentFieldType === "z") &&
               !field.isDerived
             ) {
-              field.aggregationFunction = "count";
+              field.functionName = "count";
+              // take first arg
+              field.args = field.args.length ? [field?.args?.[0]] : [];
             }
           }
 
@@ -1896,6 +2121,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
           const newName = newArray[changedIndex[0]]?.name;
 
           // Update the field alias and column to the new name
+          // HERE NEED CHANGES
           field.alias = newName;
           field.column = newName;
         }
@@ -2125,7 +2351,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     return "";
   };
 
-  const sqlchart = () => {
+  const sqlchart = async () => {
     // STEP 1: first check if there is at least 1 field selected
     if (
       dashboardPanelData.data.queries[
@@ -2145,8 +2371,18 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     }
 
     // STEP 2: Now, continue if we have at least 1 field selected
-    // merge the fields list
+
+    // To build the SQL query
+    // 1. SELECT
+    // 2. FROM & Join query
+    // 3. Filter
+    // 4. Group by
+    // 5. Order by
+    // 6. Limit
+
     let query = "SELECT ";
+    // 1. SELECT
+    // merge the fields list
     const fields = [
       ...dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
@@ -2176,60 +2412,37 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       .flat()
       .filter((fieldObj: any) => !fieldObj.isDerived);
 
-    const filter = [
-      ...dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields?.filter.conditions,
-    ];
     const array = fields.map((field, i) => {
       let selector = "";
 
-      // TODO: add aggregator
-      if (field?.aggregationFunction) {
-        switch (field?.aggregationFunction) {
-          case "count-distinct":
-            selector += `count(distinct(${field?.column}))`;
-            break;
-          case "p50":
-            selector += `approx_percentile_cont(${field?.column}, 0.5)`;
-            break;
-          case "p90":
-            selector += `approx_percentile_cont(${field?.column}, 0.9)`;
-            break;
-          case "p95":
-            selector += `approx_percentile_cont(${field?.column}, 0.95)`;
-            break;
-          case "p99":
-            selector += `approx_percentile_cont(${field?.column}, 0.99)`;
-            break;
-          case "histogram": {
-            // if interval is not null, then use it
-            if (field?.args && field?.args?.length && field?.args[0].value) {
-              selector += `${field?.aggregationFunction}(${field?.column}, '${field?.args[0]?.value}')`;
-            } else {
-              selector += `${field?.aggregationFunction}(${field?.column})`;
-            }
-            break;
-          }
-          default:
-            selector += `${field?.aggregationFunction}(${field?.column})`;
-            break;
-        }
-      } else {
-        selector += `${field?.column}`;
-      }
+      selector += buildSQLQueryFromInput(
+        field,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
+      );
+      // } else {
+      //   selector += `${field?.column}`;
+      // }
+
       selector += ` as "${field?.alias}"${i == fields.length - 1 ? " " : ", "}`;
       return selector;
     });
     query += array?.join("");
 
+    // 2. Stream, Join query
     // now add from stream name
     query += ` FROM "${
       dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
       ].fields?.stream
-    }" `;
+    }" ${buildSQLJoinsFromInput(
+      dashboardPanelData.data.queries[
+        dashboardPanelData.layout.currentQueryIndex
+      ].joins,
+    )}`;
 
+    // 3. Filter
     // Add the AND/OR condition logic
     const filterData =
       dashboardPanelData.data.queries[
@@ -2239,6 +2452,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     const whereClause = buildWhereClause(filterData);
     query += whereClause;
 
+    // 4. Group by
     // add group by statement
     const xAxisAlias = dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
@@ -2349,6 +2563,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     // append with query by joining array with comma
     query += orderByArr.length ? " ORDER BY " + orderByArr.join(", ") : "";
 
+    // 6. Limit
     // append limit
     // if limit is less than or equal to 0 then don't add
     const queryLimit =
@@ -2378,31 +2593,50 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     let query = "";
 
     if (name && value_for_maps) {
-      query = `SELECT ${name.column} as "${name.alias}", `;
-
-      if (value_for_maps?.aggregationFunction) {
-        switch (value_for_maps.aggregationFunction) {
-          case "p50":
-            query += `approx_percentile_cont(${value_for_maps.column}, 0.5) as ${value_for_maps.alias}`;
-            break;
-          case "p90":
-            query += `approx_percentile_cont(${value_for_maps.column}, 0.9) as ${value_for_maps.alias}`;
-            break;
-          case "p95":
-            query += `approx_percentile_cont(${value_for_maps.column}, 0.95) as ${value_for_maps.alias}`;
-            break;
-          case "p99":
-            query += `approx_percentile_cont(${value_for_maps.column}, 0.99) as ${value_for_maps.alias}`;
-            break;
-          case "count-distinct":
-            query += `count(distinct(${value_for_maps.column})) as "${value_for_maps.alias}"`;
-            break;
-          default:
-            query += `${value_for_maps.aggregationFunction}(${value_for_maps.column}) as "${value_for_maps.alias}"`;
-            break;
-        }
+      // query = `SELECT ${name.column} as "${name.alias}", `;
+      query = `SELECT ${buildSQLQueryFromInput(
+        name,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
+      )} as "${name.alias}",  `;
+
+      if (value_for_maps?.functionName) {
+        // switch (value_for_maps.functionName) {
+        //   case "p50":
+        //     query += `approx_percentile_cont(${value_for_maps.column}, 0.5) as ${value_for_maps.alias}`;
+        //     break;
+        //   case "p90":
+        //     query += `approx_percentile_cont(${value_for_maps.column}, 0.9) as ${value_for_maps.alias}`;
+        //     break;
+        //   case "p95":
+        //     query += `approx_percentile_cont(${value_for_maps.column}, 0.95) as ${value_for_maps.alias}`;
+        //     break;
+        //   case "p99":
+        //     query += `approx_percentile_cont(${value_for_maps.column}, 0.99) as ${value_for_maps.alias}`;
+        //     break;
+        //   case "count-distinct":
+        //     query += `count(distinct(${value_for_maps.column})) as "${value_for_maps.alias}"`;
+        //     break;
+        //   default:
+        //     query += `${value_for_maps.functionName}(${value_for_maps.column}) as "${value_for_maps.alias}"`;
+        //     break;
+        // }
+
+        query += `${buildSQLQueryFromInput(
+          value_for_maps,
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields?.stream,
+        )} as "${value_for_maps.alias}"`;
       } else {
-        query += `${value_for_maps.column} as "${value_for_maps.alias}"`;
+        // query += `${value_for_maps.column} as "${value_for_maps.alias}"`;
+        query += `${buildSQLQueryFromInput(
+          value_for_maps,
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields?.stream,
+        )} as "${value_for_maps.alias}"`;
       }
 
       query += ` FROM "${
@@ -2485,35 +2719,64 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       ].fields;
 
     if (latitude && !latitude.isDerived && longitude && !longitude.isDerived) {
-      query += `SELECT ${latitude.column} as ${latitude.alias}, ${longitude.column} as ${longitude.alias}`;
+      query += `SELECT ${buildSQLQueryFromInput(
+        latitude,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
+      )} as ${latitude.alias}, ${buildSQLQueryFromInput(
+        longitude,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
+      )} as ${longitude.alias}`;
+      // query += `SELECT ${latitude.column} as ${latitude.alias}, ${longitude.column} as ${longitude.alias}`;
     } else if (latitude && !latitude.isDerived) {
-      query += `SELECT ${latitude.column} as ${latitude.alias}`;
+      query += `SELECT ${buildSQLQueryFromInput(
+        latitude,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
+      )} as ${latitude.alias}`;
+      // query += `SELECT ${latitude.column} as ${latitude.alias}`;
     } else if (longitude && !longitude.isDerived) {
-      query += `SELECT ${longitude.column} as ${longitude.alias}`;
+      query += `SELECT ${buildSQLQueryFromInput(
+        longitude,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
+      )} as ${longitude.alias}`;
+      // query += `SELECT ${longitude.column} as ${longitude.alias}`;
     }
 
     if (query) {
       if (weight && !weight.isDerived) {
-        switch (weight?.aggregationFunction) {
-          case "p50":
-            query += `, approx_percentile_cont(${weight.column}, 0.5) as ${weight.alias}`;
-            break;
-          case "p90":
-            query += `, approx_percentile_cont(${weight.column}, 0.9) as ${weight.alias}`;
-            break;
-          case "p95":
-            query += `, approx_percentile_cont(${weight.column}, 0.95) as ${weight.alias}`;
-            break;
-          case "p99":
-            query += `, approx_percentile_cont(${weight.column}, 0.99) as ${weight.alias}`;
-            break;
-          case "count-distinct":
-            query += `, count(distinct(${weight.column})) as ${weight.alias}`;
-            break;
-          default:
-            query += `, ${weight.aggregationFunction}(${weight.column}) as ${weight.alias}`;
-            break;
-        }
+        // switch (weight?.functionName) {
+        //   case "p50":
+        //     query += `, approx_percentile_cont(${weight.column}, 0.5) as ${weight.alias}`;
+        //     break;
+        //   case "p90":
+        //     query += `, approx_percentile_cont(${weight.column}, 0.9) as ${weight.alias}`;
+        //     break;
+        //   case "p95":
+        //     query += `, approx_percentile_cont(${weight.column}, 0.95) as ${weight.alias}`;
+        //     break;
+        //   case "p99":
+        //     query += `, approx_percentile_cont(${weight.column}, 0.99) as ${weight.alias}`;
+        //     break;
+        //   case "count-distinct":
+        //     query += `, count(distinct(${weight.column})) as ${weight.alias}`;
+        //     break;
+        //   default:
+        //     query += `, ${weight.functionName}(${weight.column}) as ${weight.alias}`;
+        //     break;
+        // }
+        query += `, ${buildSQLQueryFromInput(
+          weight,
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields?.stream,
+        )} as ${weight.alias}`;
       }
       query += ` FROM "${
         dashboardPanelData.data.queries[
@@ -2611,41 +2874,65 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     const selectFields = [];
 
     if (source && !source.isDerived) {
-      selectFields.push(`${source.column} as ${source.alias}`);
+      // selectFields.push(`${source.column} as ${source.alias}`);
+      selectFields.push(
+        `${buildSQLQueryFromInput(
+          source,
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields?.stream,
+        )} as ${source.alias}`,
+      );
     }
 
     if (target && !target.isDerived) {
-      selectFields.push(`${target.column} as ${target.alias}`);
+      // selectFields.push(`${target.column} as ${target.alias}`);
+      selectFields.push(
+        `${buildSQLQueryFromInput(
+          target,
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields?.stream,
+        )} as ${target.alias}`,
+      );
     }
 
     if (value && !value.isDerived) {
-      switch (value?.aggregationFunction) {
-        case "p50":
-          selectFields.push(
-            `approx_percentile_cont(${value?.column}, 0.5) as ${value.alias}`,
-          );
-          break;
-        case "p90":
-          selectFields.push(
-            `approx_percentile_cont(${value?.column}, 0.9) as ${value.alias}`,
-          );
-          break;
-        case "p95":
-          selectFields.push(
-            `approx_percentile_cont(${value?.column}, 0.95) as ${value.alias}`,
-          );
-          break;
-        case "p99":
-          selectFields.push(
-            `approx_percentile_cont(${value?.column}, 0.99) as ${value.alias}`,
-          );
-          break;
-        default:
-          selectFields.push(
-            `${value.aggregationFunction}(${value.column}) as ${value.alias}`,
-          );
-          break;
-      }
+      // switch (value?.functionName) {
+      //   case "p50":
+      //     selectFields.push(
+      //       `approx_percentile_cont(${value?.column}, 0.5) as ${value.alias}`,
+      //     );
+      //     break;
+      //   case "p90":
+      //     selectFields.push(
+      //       `approx_percentile_cont(${value?.column}, 0.9) as ${value.alias}`,
+      //     );
+      //     break;
+      //   case "p95":
+      //     selectFields.push(
+      //       `approx_percentile_cont(${value?.column}, 0.95) as ${value.alias}`,
+      //     );
+      //     break;
+      //   case "p99":
+      //     selectFields.push(
+      //       `approx_percentile_cont(${value?.column}, 0.99) as ${value.alias}`,
+      //     );
+      //     break;
+      //   default:
+      //     selectFields.push(
+      //       `${value.functionName}(${value.column}) as ${value.alias}`,
+      //     );
+      //     break;
+      // }
+      selectFields.push(
+        `${buildSQLQueryFromInput(
+          value,
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields?.stream,
+        )} as ${value.alias}`,
+      );
     }
 
     // Adding the selected fields to the query
@@ -2721,7 +3008,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
   };
 
   // based on chart type it will create auto sql query
-  const makeAutoSQLQuery = () => {
+  const makeAutoSQLQuery = async () => {
     // only continue if current mode is auto query generation
     if (
       !dashboardPanelData.data.queries[
@@ -2740,89 +3027,253 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       } else if (dashboardPanelData.data.type == "maps") {
         query = mapChart();
       } else {
-        query = sqlchart();
+        query = await sqlchart();
       }
       dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
       ].query = query;
+      return query;
     }
   };
 
-  // Generate the query when the fields are updated
-  watch(
-    () => [
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.stream,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.x,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.y,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.breakdown,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.z,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.filter,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].customQuery,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.latitude,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.longitude,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.weight,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.source,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.target,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.value,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.name,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].fields.value_for_maps,
-      dashboardPanelData.data.queries[
-        dashboardPanelData.layout.currentQueryIndex
-      ].config.limit,
-    ],
-    () => {
-      // only continue if current mode is auto query generation
+  // so, it is not above common state
+  // expect 2nd arg for x, y and breakdown field validation
+  const validatePanel = (
+    errors: string[],
+    isFieldsValidationRequired: boolean = true,
+  ) => {
+    //check each query is empty or not for promql
+    if (dashboardPanelData?.data?.queryType == "promql") {
+      dashboardPanelData.data.queries.map((q: any, index: number) => {
+        if (q && q.query == "") {
+          errors.push(`Query-${index + 1} is empty`);
+        }
+      });
+    }
+
+    //check each query is empty or not for geomap
+    if (dashboardPanelData.data.type == "geomap") {
+      dashboardPanelData.data.queries.map((q: any, index: number) => {
+        if (q && q.query == "") {
+          errors.push(`Query-${index + 1} is empty`);
+        }
+      });
+    }
+
+    //check content should be empty for html
+    if (dashboardPanelData.data.type == "html") {
+      if (dashboardPanelData.data.htmlContent.trim() == "") {
+        errors.push("Please enter your HTML code");
+      }
+    }
+
+    //check content should be empty for html
+    if (dashboardPanelData.data.type == "markdown") {
+      if (dashboardPanelData.data.markdownContent.trim() == "") {
+        errors.push("Please enter your markdown code");
+      }
+    }
+    if (dashboardPanelData.data.type == "custom_chart") {
+      if (dashboardPanelData.data.queries[0].query.trim() == "") {
+        errors.push("Please enter query for custom chart");
+      }
+    }
+
+    if (promqlMode.value) {
+      // 1. chart type: only line chart is supported
+      const allowedChartTypes = [
+        "area",
+        "line",
+        "bar",
+        "scatter",
+        "area-stacked",
+        "metric",
+        "gauge",
+        "html",
+        "markdown",
+      ];
+      if (!allowedChartTypes.includes(dashboardPanelData.data.type)) {
+        errors.push(
+          "Selected chart type is not supported for PromQL. Only line chart is supported.",
+        );
+      }
+
+      // 2. x axis, y axis, filters should be blank
       if (
-        !dashboardPanelData.data.queries[
+        dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].customQuery
+        ].fields.x.length > 0
       ) {
-        makeAutoSQLQuery();
+        errors.push(
+          "X-Axis is not supported for PromQL. Remove anything added to the X-Axis.",
+        );
       }
-    },
-    { deep: true },
-  );
 
-  // Replace the existing validatePanel function with a wrapper that calls the generic function
-  const validatePanelWrapper = (
-    errors: string[],
-    isFieldsValidationRequired: boolean = true,
-  ) => {
-    validatePanel(dashboardPanelData, errors, isFieldsValidationRequired, [
-      ...selectedStreamFieldsBasedOnUserDefinedSchema.value,
-      ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
-      ...dashboardPanelData.meta.stream.customQueryFields,
-    ]);
+      if (
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.y.length > 0
+      ) {
+        errors.push(
+          "Y-Axis is not supported for PromQL. Remove anything added to the Y-Axis.",
+        );
+      }
+
+      if (
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.filter.conditions.length > 0
+      ) {
+        errors.push(
+          "Filters are not supported for PromQL. Remove anything added to the Filters.",
+        );
+      }
+
+      // if(!dashboardPanelData.data.query) {
+      //   errors.push("Query should not be empty")
+      // }
+    } else {
+      validateSQLPanelFields(
+        dashboardPanelData.data,
+        dashboardPanelData.layout.currentQueryIndex,
+        currentXLabel.value,
+        currentYLabel.value,
+        errors,
+        isFieldsValidationRequired,
+      );
+
+      if (isFieldsValidationRequired) {
+        // check if field selection is from the custom query fields when the custom query mode is ON
+        if (
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].customQuery
+        ) {
+          // const customQueryXFieldError = dashboardPanelData.data.queries[
+          //   dashboardPanelData.layout.currentQueryIndex
+          // ].fields.x.filter(
+          //   (it: any) =>
+          //     ![
+          //       ...dashboardPanelData.meta.stream.customQueryFields,
+          //       ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
+          //     ].find((i: any) => i.name == it.column),
+          // );
+          //  HERE NEED CHANGES
+          // Now, we can not check field name is there on stream or not
+          // if (customQueryXFieldError.length) {
+          //   errors.push(
+          //     ...customQueryXFieldError.map(
+          //       (it: any) =>
+          //         `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid`,
+          //     ),
+          //   );
+          // }
+
+          const customQueryYFieldError = dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields.y.filter(
+            (it: any) =>
+              ![
+                ...dashboardPanelData.meta.stream.customQueryFields,
+                ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
+              ].find((i: any) => i.name == it.column),
+          );
+          if (customQueryYFieldError.length) {
+            errors.push(
+              ...customQueryYFieldError.map(
+                (it: any) =>
+                  `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid`,
+              ),
+            );
+          }
+        } else {
+          // check if field selection is from the selected stream fields when the custom query mode is OFF
+          // const customQueryXFieldError = dashboardPanelData.data.queries[
+          //   dashboardPanelData.layout.currentQueryIndex
+          // ].fields.x.filter(
+          //   (it: any) =>
+          //     ![
+          //       ...selectedStreamFieldsBasedOnUserDefinedSchema.value,
+          //       ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
+          //     ].find((i: any) => i.name == it.column),
+          // );
+          // if (customQueryXFieldError.length) {
+          //   errors.push(
+          //     ...customQueryXFieldError.map(
+          //       (it: any) =>
+          //         `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid for selected stream`,
+          //     ),
+          //   );
+          // }
+          // const customQueryYFieldError = dashboardPanelData.data.queries[
+          //   dashboardPanelData.layout.currentQueryIndex
+          // ].fields.y.filter(
+          //   (it: any) =>
+          //     ![
+          //       ...selectedStreamFieldsBasedOnUserDefinedSchema.value,
+          //       ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
+          //     ].find((i: any) => i.name == it.column),
+          // );
+          // if (customQueryYFieldError.length) {
+          //   errors.push(
+          //     ...customQueryYFieldError.map(
+          //       (it: any) =>
+          //         `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid for selected stream`,
+          //     ),
+          //   );
+          // }
+
+          // Add join schema validation
+          const currentQuery =
+            dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ];
+
+          // Validate joins if present
+          if (currentQuery.joins && currentQuery.joins.length > 0) {
+            currentQuery.joins.forEach((join: any, index: number) => {
+              // Validate required join fields
+              if (!join.stream) {
+                errors.push(`Join #${index + 1}: Stream name is required`);
+              }
+              if (!join.joinType) {
+                errors.push(`Join #${index + 1}: Join type is required`);
+              }
+
+              // Validate join conditions
+              if (!join.conditions || join.conditions.length === 0) {
+                errors.push(
+                  `Join #${index + 1}: At least one join condition is required`,
+                );
+              } else {
+                join.conditions.forEach((condition: any, condIndex: number) => {
+                  // Validate left field
+                  if (!condition.leftField?.field) {
+                    errors.push(
+                      `Join #${index + 1}, Condition #${condIndex + 1}: Left field is required`,
+                    );
+                  }
+
+                  // Validate right field
+                  if (!condition.rightField?.field) {
+                    errors.push(
+                      `Join #${index + 1}, Condition #${condIndex + 1}: Right field is required`,
+                    );
+                  }
+
+                  // Validate operation
+                  if (!condition.operation) {
+                    errors.push(
+                      `Join #${index + 1}, Condition #${condIndex + 1}: Operation is required`,
+                    );
+                  }
+                });
+              }
+            });
+          }
+        }
+      }
+    }
   };
 
   const VARIABLE_PLACEHOLDER = "substituteValue";
@@ -3118,11 +3569,13 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     resetAggregationFunction,
     cleanupDraggingFields,
     getDefaultQueries,
-    validatePanel: validatePanelWrapper, // Replace with the wrapper function
+    validatePanel,
+    makeAutoSQLQuery,
     currentXLabel,
     currentYLabel,
     generateLabelFromName,
     selectedStreamFieldsBasedOnUserDefinedSchema,
+    updateGroupedFields,
   };
 };
 export default useDashboardPanelData;
diff --git a/web/src/locales/languages/en.json b/web/src/locales/languages/en.json
index a8025697c62..16274d8b3ed 100644
--- a/web/src/locales/languages/en.json
+++ b/web/src/locales/languages/en.json
@@ -854,6 +854,7 @@
     "otherColumn": "Other Columns",
     "config": "Config",
     "filters": "Filters",
+    "joins": "Joins",
     "customSql": "Custom SQL",
     "field": "Fields",
     "discard": "Discard",
diff --git a/web/src/utils/dashboard/convertDashboardSchemaVersion.ts b/web/src/utils/dashboard/convertDashboardSchemaVersion.ts
index 577177f90f6..91b5995b017 100644
--- a/web/src/utils/dashboard/convertDashboardSchemaVersion.ts
+++ b/web/src/utils/dashboard/convertDashboardSchemaVersion.ts
@@ -54,6 +54,68 @@ const convertPanelSchemaVersion = (data: any) => {
   };
 };
 
+const migrateV5FieldsToV6 = (
+  fieldItem: any,
+  isCustomQuery: boolean,
+  stream: string,
+) => {
+  // if fieldItem is undefined, do nothing
+  if (!fieldItem) return;
+  // mirgrate old args
+  // previously, args was only used for histogram interval
+  // so, add arg type as histogramInverval
+  if (!fieldItem.args) {
+    fieldItem.args = [];
+  } else {
+    fieldItem.args.forEach((arg: any) => {
+      if (!arg.type) {
+        arg.type = "histogramInverval";
+      }
+    });
+  }
+
+  // if customQuery then do nothing
+  // else need to shift column name to as first arg
+  if (isCustomQuery) {
+    fieldItem.type = "custom";
+  } else {
+    fieldItem.type = "build";
+    // prepend column in args
+    fieldItem.args.unshift({
+      type: "field",
+      value: {
+        field: fieldItem.column,
+        streamAlias: stream,
+      },
+    });
+    delete fieldItem.column;
+  }
+
+  // rename aggregationFunction to functionName
+  if (fieldItem.aggregationFunction) {
+    fieldItem.functionName = fieldItem.aggregationFunction;
+    delete fieldItem.aggregationFunction;
+  } else {
+    // if no aggregationFunction then set functionName to null
+    fieldItem.functionName = null;
+  }
+};
+
+function migrateFields(
+  fields: any | any[],
+  isCustomQuery: boolean,
+  stream: string,
+  migrateFunction: (field: any, isCustomQuery: boolean, stream: string) => void,
+) {
+  if (Array.isArray(fields)) {
+    fields.forEach((field: any) =>
+      migrateFunction(field, isCustomQuery, stream),
+    );
+  } else {
+    migrateFunction(fields, isCustomQuery, stream);
+  }
+}
+
 export function convertDashboardSchemaVersion(data: any) {
   if (!data) {
     return;
@@ -172,6 +234,57 @@ export function convertDashboardSchemaVersion(data: any) {
       // update the version
       data.version = 5;
     }
+
+    case 5: {
+      // need to traverse all panels
+      // for each panel
+      //   for each query
+      //      for each fields [x, y, z, breakdown, latitude, longitude, weight, source, target, value] Make sure that some of fields is not array
+      //          add type: "build"
+      //          field.column will go inside args array : {type: "field", value: field.column}
+      data.tabs.forEach((tabItem: any) => {
+        tabItem.panels.forEach((panelItem: any) => {
+          panelItem.queries.forEach((queryItem: any) => {
+            const {
+              x,
+              y,
+              z,
+              breakdown,
+              latitude,
+              longitude,
+              weight,
+              source,
+              target,
+              value,
+            } = queryItem.fields;
+
+            // Migrate all fields
+            [
+              x,
+              y,
+              z,
+              breakdown,
+              latitude,
+              longitude,
+              weight,
+              source,
+              target,
+              value,
+            ].forEach((field: any) => {
+              migrateFields(
+                field,
+                queryItem.customQuery,
+                queryItem.stream,
+                migrateV5FieldsToV6,
+              );
+            });
+          });
+        });
+      });
+
+      // update the version
+      data.version = 6;
+    }
   }
 
   // return converted data
diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index 000ee68c565..e493c3caf84 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -1,5 +1,6 @@
 import { date } from "quasar";
 import { CURRENT_DASHBOARD_SCHEMA_VERSION } from "@/utils/dashboard/convertDashboardSchemaVersion";
+import functionValidation from "../../components/dashboards/addPanel/dynamicFunction/functionValidation.json";
 
 const units: any = {
   bytes: [
@@ -453,81 +454,93 @@ export const calculateOptimalFontSize = (text: string, canvasWidth: number) => {
  */
 function validateConditions(conditions: any, errors: any) {
   conditions.forEach((it: any) => {
-    if (it?.filterType === "condition") {
+    if (it.filterType === "condition") {
       // If the condition is a list, check if at least 1 item is selected
-      if (it?.type == "list" && !it?.values?.length) {
+      if (it.type == "list" && !it.values?.length) {
         errors.push(
           `Filter: ${it.column}: Select at least 1 item from the list`,
         );
       }
 
-      if (it?.type == "condition") {
+      if (it.type == "condition") {
         // Check if condition operator is selected
-        if (it?.operator == null) {
-          errors.push(`Filter: ${it?.column}: Operator selection required`);
+        if (it.operator == null) {
+          errors.push(`Filter: ${it.column}: Operator selection required`);
         }
 
         // Check if condition value is required based on the operator
         if (
-          !["Is Null", "Is Not Null"].includes(it?.operator) &&
-          (it?.value == null || it?.value == "")
+          !["Is Null", "Is Not Null"].includes(it.operator) &&
+          (it.value == null || it.value == "")
         ) {
-          errors.push(`Filter: ${it?.column}: Condition value required`);
+          errors.push(`Filter: ${it.column}: Condition value required`);
         }
       }
-    } else if (it?.filterType === "group") {
+    } else if (it.filterType === "group") {
       // Recursively validate the conditions in the group
-      validateConditions(it?.conditions ?? [], errors);
+      validateConditions(it.conditions, errors);
     }
   });
 }
 
-/**
- * Shared validation logic for panel field configuration based on chart type
- *
- * @param chartType The type of chart being validated
- * @param fields The fields configuration to validate
- * @param errors Array to collect error messages
- * @param xAxisLabel Optional custom label for X-Axis in error messages
- * @param yAxisLabel Optional custom label for Y-Axis in error messages
- */
-const validateChartFieldsConfiguration = (
-  chartType: string,
-  fields: any,
+export const validateSQLPanelFields = (
+  panelData: any,
+  queryIndex: number,
+  currentXLabel: any,
+  currentYLabel: any,
   errors: string[],
-  xAxisLabel: string = "X-Axis",
-  yAxisLabel: string = "Y-Axis",
+  isFieldsValidationRequired: boolean = true,
 ) => {
-  switch (chartType) {
+  // check if fields validation is required
+  if (isFieldsValidationRequired === false) {
+    return;
+  }
+
+  switch (panelData?.type) {
     case "donut":
     case "pie": {
-      if (fields?.y?.length > 1 || fields?.y?.length === 0) {
+      if (
+        panelData?.queries[queryIndex].fields.y.length > 1 ||
+        panelData?.queries[queryIndex].fields.y.length == 0
+      ) {
         errors.push("Add one value field for donut and pie charts");
       }
 
-      if (fields?.x?.length > 1 || fields?.x?.length === 0) {
+      if (
+        panelData?.queries[queryIndex].fields.x.length > 1 ||
+        panelData?.queries[queryIndex].fields.x.length == 0
+      ) {
         errors.push("Add one label field for donut and pie charts");
       }
+
       break;
     }
     case "metric": {
-      if (fields?.y?.length > 1 || fields?.y?.length === 0) {
+      if (
+        panelData.queries[queryIndex].fields.y.length > 1 ||
+        panelData.queries[queryIndex].fields.y.length == 0
+      ) {
         errors.push("Add one value field for metric charts");
       }
 
-      if (fields?.x?.length) {
-        errors.push(`${xAxisLabel} field is not allowed for Metric chart`);
+      if (panelData.queries[queryIndex].fields.x.length) {
+        errors.push(`${currentXLabel} field is not allowed for Metric chart`);
       }
+
       break;
     }
     case "gauge": {
-      if (fields?.y?.length !== 1) {
+      if (panelData.queries[queryIndex].fields.y.length != 1) {
         errors.push("Add one value field for gauge chart");
       }
       // gauge can have zero or one label
-      if (fields?.x?.length !== 1 && fields?.x?.length !== 0) {
-        errors.push("Add one label field for gauge chart");
+      if (
+        panelData.queries[queryIndex].fields.x.length != 1 &&
+        panelData.queries[queryIndex].fields.x.length != 0
+      ) {
+        errors.push(`Add one label field for gauge chart`);
       }
+
       break;
     }
     case "h-bar":
@@ -535,86 +548,105 @@ const validateChartFieldsConfiguration = (
     case "line":
     case "scatter":
     case "bar": {
-      if (fields?.y?.length < 1) {
-        errors.push(`Add at least one field for the ${yAxisLabel}`);
+      if (panelData.queries[queryIndex].fields.y.length < 1) {
+        errors.push("Add at least one field for the Y-Axis");
       }
 
-      if (fields?.x?.length > 1 || fields?.x?.length === 0) {
-        errors.push(`Add one fields for the ${xAxisLabel}`);
+      if (
+        panelData.queries[queryIndex].fields.x.length > 1 ||
+        panelData.queries[queryIndex].fields.x.length == 0
+      ) {
+        errors.push(`Add one fields for the X-Axis`);
       }
+
       break;
     }
     case "table": {
-      if (fields?.y?.length === 0 && fields?.x?.length === 0) {
-        errors.push(`Add at least one field on ${xAxisLabel} or ${yAxisLabel}`);
+      if (
+        panelData.queries[queryIndex].fields.y.length == 0 &&
+        panelData.queries[queryIndex].fields.x.length == 0
+      ) {
+        errors.push("Add at least one field on X-Axis or Y-Axis");
       }
+
       break;
     }
     case "heatmap": {
-      if (fields?.y?.length === 0) {
-        errors.push(`Add at least one field for the ${yAxisLabel}`);
+      if (panelData.queries[queryIndex].fields.y.length == 0) {
+        errors.push("Add at least one field for the Y-Axis");
       }
 
-      if (fields?.x?.length === 0) {
-        errors.push(`Add one field for the ${xAxisLabel}`);
+      if (panelData.queries[queryIndex].fields.x.length == 0) {
+        errors.push(`Add one field for the X-Axis`);
       }
 
-      if (fields?.z?.length === 0) {
-        errors.push("Add one field for the Z-Axis");
+      if (panelData.queries[queryIndex].fields.z.length == 0) {
+        errors.push(`Add one field for the Z-Axis`);
       }
+
       break;
     }
     case "stacked":
     case "h-stacked": {
-      if (fields?.y?.length === 0) {
-        errors.push(`Add at least one field for the ${yAxisLabel}`);
+      if (panelData.queries[queryIndex].fields.y.length == 0) {
+        errors.push("Add at least one field for the Y-Axis");
       }
-      if (fields?.x?.length !== 1 || fields?.breakdown?.length !== 1) {
+      if (
+        panelData.queries[queryIndex].fields.x.length != 1 ||
+        panelData.queries[queryIndex].fields.breakdown.length != 1
+      ) {
         errors.push(
-          `Add exactly one field on the ${xAxisLabel} and breakdown for stacked and h-stacked charts`,
+          `Add exactly one fields on the X-Axis and breakdown for stacked and h-stacked charts`,
         );
       }
+
       break;
     }
     case "area-stacked": {
-      if (fields?.y?.length > 1 || fields?.y?.length === 0) {
-        errors.push(
-          `Add exactly one field on ${yAxisLabel} for area-stacked charts`,
-        );
+      if (
+        panelData.queries[queryIndex].fields.y.length > 1 ||
+        panelData.queries[queryIndex].fields.y.length == 0
+      ) {
+        errors.push("Add exactly one field on Y-Axis for area-stacked charts");
       }
-      if (fields?.x?.length !== 1 || fields?.breakdown?.length !== 1) {
+      if (
+        panelData.queries[queryIndex].fields.x.length != 1 ||
+        panelData.queries[queryIndex].fields.breakdown.length != 1
+      ) {
         errors.push(
-          `Add exactly one field on the ${xAxisLabel} and breakdown for area-stacked charts`,
+          `Add exactly one fields on the X-Axis and breakdown for stacked, area-stacked and h-stacked charts`,
         );
       }
+
       break;
     }
     case "geomap": {
-      if (fields?.latitude == null) {
+      if (panelData.queries[queryIndex].fields.latitude == null) {
         errors.push("Add one field for the latitude");
       }
-      if (fields?.longitude == null) {
+      if (panelData.queries[queryIndex].fields.longitude == null) {
         errors.push("Add one field for the longitude");
       }
       break;
     }
+
     case "sankey": {
-      if (fields?.source == null) {
+      if (panelData.queries[queryIndex].fields.source == null) {
         errors.push("Add one field for the source");
       }
-      if (fields?.target == null) {
+      if (panelData.queries[queryIndex].fields.target == null) {
         errors.push("Add one field for the target");
       }
-      if (fields?.value == null) {
+      if (panelData.queries[queryIndex].fields.value == null) {
         errors.push("Add one field for the value");
       }
       break;
     }
     case "maps": {
-      if (fields?.name == null) {
+      if (panelData.queries[queryIndex].fields.name == null) {
         errors.push("Add one field for the name");
       }
-      if (fields?.value_for_maps == null) {
+      if (panelData.queries[queryIndex].fields.value_for_maps == null) {
         errors.push("Add one field for the value");
       }
       break;
@@ -623,544 +655,246 @@ const validateChartFieldsConfiguration = (
       break;
   }
 
-  // Check filter conditions validity
-  if (fields?.filter?.conditions?.length) {
-    // Validate the conditions
-    validateConditions(fields?.filter?.conditions ?? [], errors);
-  }
-};
-
-/**
- * Validates the fields configuration for SQL panels
- * @param {object} panelData - The panel data object
- * @param {number} queryIndex - The current query index
- * @param {string} currentXLabel - Label for X-Axis (for error messages)
- * @param {string} currentYLabel - Label for Y-Axis (for error messages)
- * @param {array} errors - Array to collect errors
- * @param {boolean} isFieldsValidationRequired - Whether field validation is required
- */
-export const validateSQLPanelFields = (
-  panelData: any,
-  queryIndex: number,
-  currentXLabel: string,
-  currentYLabel: string,
-  errors: string[],
-  isFieldsValidationRequired: boolean = true,
-) => {
-  if (isFieldsValidationRequired) {
-    // Validate fields configuration based on chart type
-    validateChartFieldsConfiguration(
-      panelData?.type,
-      panelData?.queries?.[queryIndex]?.fields ?? {},
-      errors,
-      currentXLabel,
-      currentYLabel,
+  // check if aggregation function is selected or not
+  if (panelData?.type && !(panelData?.type == "heatmap")) {
+    const aggregationFunctionError = panelData.queries[
+      queryIndex
+    ].fields.y.filter(
+      (it: any) =>
+        !it.isDerived &&
+        it.type == "build" &&
+        (it.functionName == null || it.functionName == ""),
     );
-  }
-};
-
-/**
- * Validates that queries aren't empty
- * @param queries Array of queries to validate
- * @param errors Array to collect error messages
- * @param customMessage Optional custom error message
- */
-const validateQueriesNotEmpty = (
-  queries: any[] = [],
-  errors: string[],
-  customMessage?: string,
-) => {
-  queries.forEach((q: any, index: number) => {
-    if (q && q?.query === "") {
-      errors.push(customMessage || `Query-${index + 1} is empty`);
+    if (
+      panelData.queries[queryIndex].fields.y.length &&
+      aggregationFunctionError.length
+    ) {
+      errors.push(
+        ...aggregationFunctionError.map(
+          (it: any) =>
+            `${currentYLabel}: ${it.column}: Aggregation function required`,
+        ),
+      );
     }
-  });
-};
-
-/**
- * Validates that a content field isn't empty
- * @param content Content field to validate
- * @param errors Array to collect error messages
- * @param errorMessage Error message to add if validation fails
- */
-const validateContentNotEmpty = (
-  content: string = "",
-  errors: string[],
-  errorMessage: string,
-) => {
-  if (content.trim() === "") {
-    errors.push(errorMessage);
-  }
-};
-
-/**
- * Validates panel content based on panel type
- * @param panel The panel to validate
- * @param errors Array to collect error messages
- */
-const validatePanelContentByType = (panel: any, errors: string[]) => {
-  // Check for promQL query type
-  if (panel?.queryType === "promql") {
-    validateQueriesNotEmpty(panel?.queries, errors);
   }
 
-  // Check by panel type
-  switch (panel?.type) {
-    case "geomap":
-      validateQueriesNotEmpty(panel?.queries, errors);
-      break;
-    case "html":
-      validateContentNotEmpty(
-        panel?.htmlContent,
-        errors,
-        "Please enter your HTML code",
-      );
-      break;
-    case "markdown":
-      validateContentNotEmpty(
-        panel?.markdownContent,
-        errors,
-        "Please enter your markdown code",
-      );
-      break;
-    case "custom_chart":
-      validateQueriesNotEmpty(
-        [panel?.queries?.[0]],
-        errors,
-        "Please enter query for custom chart",
-      );
-      break;
+  // check if labels are there for y axis items
+  const labelError = panelData?.queries?.[queryIndex]?.fields?.y?.filter(
+    (it: any) => it?.label == null || it?.label == "",
+  );
+  if (
+    panelData?.queries?.[queryIndex]?.fields?.y?.length &&
+    labelError?.length
+  ) {
+    errors.push(
+      ...labelError.map(
+        (it: any) => `${currentYLabel}: ${it.column}: Label required`,
+      ),
+    );
   }
-};
 
-/**
- * Validates panel fields without validating stream field existence
- *
- * @param panel The panel to validate
- * @param errors Array to collect error messages
- */
-const validatePanelFields = (panel: any, errors: string[] = []) => {
-  // Check if panel has promQL query type
-  const isPromQLMode = panel?.queryType === "promql";
-  const currentQueryIndex = 0; // Default to first query
-
-  // Validate panel content based on type
-  validatePanelContentByType(panel, errors);
-
-  if (!isPromQLMode && panel.queries?.[currentQueryIndex]?.fields) {
-    // Validate fields configuration based on chart type
-    validateChartFieldsConfiguration(
-      panel?.type,
-      panel?.queries?.[currentQueryIndex]?.fields ?? {},
+  if (panelData?.queries?.[queryIndex]?.fields?.filter?.conditions?.length) {
+    // Validate the top-level conditions
+    validateConditions(
+      panelData?.queries?.[queryIndex]?.fields?.filter?.conditions,
       errors,
     );
   }
-
-  return errors;
 };
 
-/**
- * Validates an individual panel's content
- * Only checks basic structure, used by validateDashboardJson
- *
- * @param panel The panel object to validate
- * @returns Array of validation errors
- */
-const validatePanelContent = (panel: any): string[] => {
-  const errors: string[] = [];
-
-  // Required fields validation
-  if (!panel?.type) {
-    errors.push(`Panel ${panel?.id}: Panel type is required`);
-    return errors;
+export function buildSQLQueryFromInput(
+  fields: any,
+  defaultStream: any,
+): string {
+  // if fields type is raw, return rawQuery
+  if (fields.type === "raw") {
+    return `${fields?.rawQuery ?? ""}`;
   }
 
-  // Check if panel type is in the allowed types list
-  const allowedTypes = [
-    "area",
-    "line",
-    "bar",
-    "scatter",
-    "area-stacked",
-    "donut",
-    "pie",
-    "h-bar",
-    "stacked",
-    "h-stacked",
-    "heatmap",
-    "metric",
-    "gauge",
-    "geomap",
-    "maps",
-    "table",
-    "sankey",
-    "custom_chart",
-    "html",
-    "markdown",
-  ];
-
-  if (!allowedTypes.includes(panel?.type)) {
-    errors.push(
-      `Panel ${panel?.id}: Chart type "${panel?.type}" is not supported.`,
-    );
-  }
+  // Extract functionName and args from the input
+  const { functionName, args } = fields;
 
-  if (!panel?.title) {
-    errors.push(`Panel ${panel?.id}: Panel title is required`);
-  }
+  // Find the function definition based on the functionName
+  const selectedFunction = functionValidation.find(
+    (fn: any) => fn.functionName === functionName,
+  );
 
-  // Layout validation
-  if (!panel?.layout) {
-    errors.push(`Panel ${panel?.id}: Layout is required`);
-  } else {
-    if (typeof panel?.layout?.x !== "number")
-      errors.push(`Panel ${panel?.id}: Layout x must be a number`);
-    if (typeof panel?.layout?.y !== "number")
-      errors.push(`Panel ${panel?.id}: Layout y must be a number`);
-    if (typeof panel?.layout?.w !== "number")
-      errors.push(`Panel ${panel?.id}: Layout w must be a number`);
-    if (typeof panel?.layout?.h !== "number")
-      errors.push(`Panel ${panel?.id}: Layout h must be a number`);
+  // If the function is not found, throw an error
+  if (!selectedFunction) {
+    throw new Error(`Function "${functionName}" is not supported.`);
   }
 
-  return errors;
-};
+  // Validate the provided args against the function's argument definitions
+  const argsDefinition = selectedFunction.args;
 
-/**
- * Validates a dashboard panel's configuration
- * @param {object} panelData - The panel data object to validate
- * @param {array} errors - Array to collect errors
- * @param {boolean} isFieldsValidationRequired - Whether to validate fields (default: true)
- * @returns {array} An array of validation error messages
- */
-export const validatePanel = (
-  panelData: any,
-  errors: string[] = [],
-  isFieldsValidationRequired: boolean = true,
-  allStreamFields: any[] = [],
-) => {
-  // Get current query index
-  const currentQueryIndex = panelData?.layout?.currentQueryIndex || 0;
-
-  // Check if panel has promQL query type
-  const isPromQLMode = panelData?.data?.queryType === "promql";
-
-  // Validate panel content based on type
-  validatePanelContentByType(panelData?.data, errors);
-
-  if (isPromQLMode) {
-    // 1. Chart type: only specific chart types are supported for PromQL
-    const allowedChartTypes = [
-      "area",
-      "line",
-      "bar",
-      "scatter",
-      "area-stacked",
-      "metric",
-      "gauge",
-      "html",
-      "markdown",
-    ];
-    if (!allowedChartTypes.includes(panelData?.data?.type)) {
-      errors.push(
-        "Selected chart type is not supported for PromQL. Only line chart is supported.",
-      );
-    }
+  if (!argsDefinition || argsDefinition.length === 0) {
+    return `${functionName}()`; // If no args are required, return the function call
+  }
 
-    // 2. x axis, y axis, filters should be blank for PromQL
-    if (panelData?.data?.queries?.[currentQueryIndex]?.fields?.x?.length > 0) {
-      errors.push(
-        "X-Axis is not supported for PromQL. Remove anything added to the X-Axis.",
-      );
-    }
+  const sqlArgs = [];
+  for (let i = 0; i < args.length; i++) {
+    const argValue = args[i]?.value;
+    const argType = args[i]?.type;
 
-    if (panelData?.data?.queries?.[currentQueryIndex]?.fields?.y?.length > 0) {
-      errors.push(
-        "Y-Axis is not supported for PromQL. Remove anything added to the Y-Axis.",
-      );
+    if (argValue === undefined || argValue === null) {
+      continue;
     }
 
-    if (
-      panelData?.data?.queries?.[currentQueryIndex]?.fields?.filter?.conditions
-        ?.length > 0
-    ) {
-      errors.push(
-        "Filters are not supported for PromQL. Remove anything added to the Filters.",
+    // Add the argument to the SQL query
+    if (argType === "field") {
+      // If the argument type is "field", do not wrap with quotes
+      sqlArgs.push(
+        argValue.streamAlias
+          ? argValue.streamAlias + "." + argValue.field
+          : defaultStream + "." + argValue.field,
       );
-    }
-  } else {
-    // Calculate the x and y axis labels based on chart type
-    const currentXLabel =
-      panelData?.data?.type === "table"
-        ? "First Column"
-        : panelData?.data?.type === "h-bar"
-          ? "Y-Axis"
-          : "X-Axis";
-
-    const currentYLabel =
-      panelData?.data?.type === "table"
-        ? "Other Columns"
-        : panelData?.data?.type === "h-bar"
-          ? "X-Axis"
-          : "Y-Axis";
-
-    // Validate panel fields based on chart type
-    validateSQLPanelFields(
-      panelData?.data,
-      currentQueryIndex,
-      currentXLabel,
-      currentYLabel,
-      errors,
-      isFieldsValidationRequired,
-    );
-
-    // Validate fields against streams if field validation is required
-    if (isFieldsValidationRequired) {
-      const isCustomQueryMode =
-        panelData?.data?.queries?.[currentQueryIndex]?.customQueryMode;
-
-      if (isCustomQueryMode) {
-        validateCustomQueryFields(panelData, currentQueryIndex, errors);
+    } else if (argType === "string" || argType === "histogramInterval") {
+      // Wrap strings in quotes if they are not already wrapped
+      if (
+        typeof argValue === "string" &&
+        !argValue.startsWith("'") &&
+        !argValue.endsWith("'")
+      ) {
+        sqlArgs.push(`'${argValue}'`);
       } else {
-        validateStreamFields(
-          panelData,
-          currentQueryIndex,
-          errors,
-          allStreamFields,
-        );
-      }
+        sqlArgs.push(argValue);
+      }
+    } else if (argType === "number") {
+      // Add numbers as-is
+      sqlArgs.push(argValue);
+    } else if (argType === "function") {
+      // Recursively build the SQL query for the nested function
+      const nestedFunctionQuery = buildSQLQueryFromInput(
+        argValue,
+        defaultStream,
+      );
+      sqlArgs.push(nestedFunctionQuery);
+    } else {
+      throw new Error(
+        `Unsupported argument type "${argType}" for argument at position ${i + 1}.`,
+      );
     }
   }
 
-  return errors;
-};
-
-/**
- * Validates fields for custom query mode
- * @param {object} panelData - The panel data object
- * @param {number} queryIndex - The current query index
- * @param {array} errors - Array to collect errors
- */
-const validateCustomQueryFields = (
-  panelData: any,
-  queryIndex: number,
-  errors: string[],
-) => {
-  const customQueryXFieldError = panelData?.data?.queries?.[
-    queryIndex
-  ]?.fields?.x?.filter(
-    (it: any) =>
-      ![
-        ...panelData?.meta?.stream?.customQueryFields,
-        ...panelData?.meta?.stream?.vrlFunctionFieldList,
-      ].find((i: any) => i.name === it.column),
-  );
+  // TODO: add aggregator
+  switch (functionName) {
+    case "count-distinct":
+      return `count(distinct(${sqlArgs.join(", ")}))`;
+    case "p50":
+      return `approx_percentile_cont(${sqlArgs.join(", ")}, 0.5)`;
+    case "p90":
+      return `approx_percentile_cont(${sqlArgs.join(", ")}, 0.9)`;
+    case "p95":
+      return `approx_percentile_cont(${sqlArgs.join(", ")}, 0.95)`;
+    case "p99":
+      return `approx_percentile_cont(${sqlArgs.join(", ")}, 0.99)`;
+    case "p50":
+      return `approx_percentile_cont(${sqlArgs.join(", ")}, 0.5)`;
+  }
+
+  // Construct the SQL query string
+  // if the function is not null, return the function call statement
+  // else return the first argument(if function is null, always only one argument will be there)
+  return functionName
+    ? `${functionName}(${sqlArgs.join(", ")})`
+    : `${sqlArgs[0]}`;
+}
 
-  if (customQueryXFieldError.length) {
-    errors.push(
-      ...customQueryXFieldError.map(
-        (it: any) =>
-          `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid`,
-      ),
-    );
+export function buildSQLJoinsFromInput(joins: any[]): string {
+  if (!joins || joins.length === 0) {
+    return ""; // No joins, return empty string
   }
 
-  const customQueryYFieldError = panelData?.data?.queries?.[
-    queryIndex
-  ]?.fields?.y?.filter(
-    (it: any) =>
-      ![
-        ...panelData?.meta?.stream?.customQueryFields,
-        ...panelData?.meta?.stream?.vrlFunctionFieldList,
-      ].find((i: any) => i.name === it.column),
-  );
+  let joinClauses: string[] = [];
 
-  if (customQueryYFieldError.length) {
-    errors.push(
-      ...customQueryYFieldError.map(
-        (it: any) =>
-          `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid`,
-      ),
-    );
-  }
-};
+  for (const join of joins) {
+    const { stream, streamAlias, joinType, conditions } = join;
 
-/**
- * Validates fields for stream selection mode
- * @param {object} panelData - The panel data object
- * @param {number} queryIndex - The current query index
- * @param {array} errors - Array to collect errors
- * @param {array} streamFields - Fields available in the selected stream
- */
-const validateStreamFields = (
-  panelData: any,
-  queryIndex: number,
-  errors: string[],
-  allStreamFields: any[] = [],
-) => {
-  const customQueryXFieldError = panelData?.data?.queries?.[
-    queryIndex
-  ]?.fields?.x?.filter(
-    (it: any) => !allStreamFields.find((i: any) => i.name == it.column),
-  );
+    if (
+      !stream ||
+      !streamAlias ||
+      !joinType ||
+      !conditions ||
+      conditions.length === 0
+    ) {
+      // Invalid join, return empty string
+      return "";
+    }
 
-  if (customQueryXFieldError.length) {
-    errors.push(
-      ...customQueryXFieldError.map(
-        (it: any) =>
-          `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid for selected stream`,
-      ),
-    );
-  }
+    let joinConditionStrings: string[] = [];
 
-  const customQueryYFieldError = panelData?.data?.queries?.[
-    queryIndex
-  ]?.fields?.y?.filter(
-    (it: any) => !allStreamFields.find((i: any) => i.name == it.column),
-  );
+    for (const condition of conditions) {
+      const { leftField, rightField, operation, logicalOperator } = condition;
 
-  if (customQueryYFieldError.length) {
-    errors.push(
-      ...customQueryYFieldError.map(
-        (it: any) =>
-          `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid for selected stream`,
-      ),
-    );
-  }
-};
+      if (!leftField || !rightField || !operation) {
+        // Invalid condition, return empty string
+        return "";
+      }
 
-/**
- * Validates the dashboard JSON structure
- *
- * @param dashboardJson The dashboard JSON to validate
- * @returns Array of validation errors or empty array if valid
- */
-export const validateDashboardJson = (dashboardJson: any): string[] => {
-  const errors: string[] = [];
+      const leftFieldStr = leftField.streamAlias
+        ? `${leftField.streamAlias}.${leftField.field}`
+        : leftField.field;
 
-  // Basic structure validation
-  if (!dashboardJson) {
-    errors.push("Dashboard JSON is empty or invalid");
-    return errors;
-  }
+      const rightFieldStr = rightField.streamAlias
+        ? `${rightField.streamAlias}.${rightField.field}`
+        : rightField.field;
 
-  // Required fields validation
-  if (!dashboardJson?.dashboardId) {
-    errors.push("Dashboard ID is required");
-  }
+      joinConditionStrings.push(
+        `${leftFieldStr} ${operation} ${rightFieldStr}`,
+      );
+    }
 
-  if (!dashboardJson?.title) {
-    errors.push("Dashboard title is required");
-  }
+    // Combine conditions with logical operators (e.g., AND, OR)
+    const joinConditionsSQL = joinConditionStrings.join(" AND ");
 
-  // Version should be present and match current schema version
-  if (!dashboardJson?.version) {
-    errors.push("Dashboard version is required");
-  } else if (dashboardJson.version !== CURRENT_DASHBOARD_SCHEMA_VERSION) {
-    errors.push(
-      `Dashboard version must be ${CURRENT_DASHBOARD_SCHEMA_VERSION}.`,
+    // Construct the JOIN SQL statement
+    joinClauses.push(
+      `${joinType.toUpperCase()} JOIN "${stream}" AS ${streamAlias} ON ${joinConditionsSQL}`,
     );
   }
 
-  // Check tabs
-  if (
-    !Array.isArray(dashboardJson?.tabs) ||
-    dashboardJson?.tabs?.length === 0
-  ) {
-    errors.push("Dashboard must have at least one tab");
-    return errors;
-  }
-
-  // Check for unique tab IDs
-  const tabIds = new Set<string>();
-  for (const tab of dashboardJson?.tabs) {
-    if (!tab?.tabId) {
-      errors.push("Each tab must have a tabId");
-    } else if (tabIds.has(tab?.tabId)) {
-      errors.push(`Duplicate tab ID found: ${tab?.tabId}`);
-    } else {
-      tabIds.add(tab?.tabId);
-    }
+  return joinClauses.join(" ");
+}
 
-    if (!tab?.name) {
-      errors.push(`Tab ${tab?.tabId} must have a name`);
-    }
-  }
+export function addMissingArgs(fields: any): any {
+  const { functionName, args } = fields;
 
-  // Check for unique panel IDs across all tabs and validate each panel
-  const panelIds = new Set<string>();
-  const layoutIValues = new Map<string, Set<string>>();
+  // Find the function definition in functionValidation
+  const functionDef = functionValidation.find(
+    (fn: any) => fn.functionName === functionName,
+  );
 
-  for (const tab of dashboardJson.tabs) {
-    if (!Array.isArray(tab?.panels)) {
-      errors.push(`Tab ${tab?.tabId} must have a panels array`);
-      continue;
-    }
+  if (!functionDef) {
+    return fields;
+  }
 
-    // Create a set for layout i values for this tab
-    layoutIValues.set(tab?.tabId, new Set<string>());
+  const updatedArgs = [...args]; // Clone the existing args array
 
-    for (const panel of tab.panels) {
-      // Check panel ID uniqueness
-      if (!panel?.id) {
-        errors.push(`Panel in tab ${tab?.tabId} is missing an ID`);
-      } else if (panelIds.has(panel?.id)) {
-        errors.push(`Duplicate panel ID found: ${panel?.id}`);
-      } else {
-        panelIds.add(panel?.id);
-      }
+  // Iterate through the function definition's arguments
+  functionDef.args.forEach((argDef: any) => {
+    const isArgProvided = updatedArgs.some((arg: any) => {
+      // Check if the argument's type matches any of the required types
+      return argDef.type.includes(arg.type);
+    });
 
-      // Check layout i value uniqueness within the tab
-      if (!panel?.layout || !panel?.layout?.i) {
-        errors.push(`Panel ${panel?.id} is missing a layout.i value`);
-      } else {
-        const tabLayoutValues = layoutIValues.get(tab?.tabId);
-        if (
-          tabLayoutValues &&
-          tabLayoutValues.has(panel?.layout?.i?.toString())
-        ) {
-          errors.push(
-            `Duplicate layout.i value found in tab ${tab?.tabId}: ${panel?.layout?.i}`,
-          );
-        } else if (tabLayoutValues) {
-          tabLayoutValues.add(panel?.layout?.i?.toString());
-        }
-      }
+    if (!isArgProvided) {
+      // If the argument is missing, add it
+      const argType = argDef.type[0]; // Always take the first type
+      const defaultValue =
+        argDef.defaultValue !== undefined ? argDef.defaultValue : "";
 
-      // Validate basic panel structure
-      const panelStructureErrors = validatePanelContent(panel);
-      errors.push(...panelStructureErrors);
-
-      // Validate panel fields but skip stream validation
-      if (panel?.type !== "markdown" && panel?.type !== "html") {
-        try {
-          const panelDetailErrors: string[] = [];
-
-          // Only validate the panel fields (not stream field existence)
-          validatePanelFields(panel, panelDetailErrors);
-
-          // Add panel identifier to each error
-          const prefixedErrors = panelDetailErrors.map(
-            (error) => `Panel ${panel?.id || "unknown"}: ${error}`,
-          );
-
-          errors.push(...prefixedErrors);
-        } catch (error) {
-          // If validation fails
-          errors.push(
-            `Panel ${panel?.id || "unknown"}: ${
-              error instanceof Error
-                ? error?.message
-                : "Unable to validate panel configuration"
-            }`,
-          );
-        }
-      }
+      updatedArgs.push({
+        type: argType,
+        value: defaultValue,
+      });
     }
-  }
+  });
 
-  return errors;
-};
+  return {
+    ...fields,
+    args: updatedArgs,
+  };
+}
 
 // Modify the getContrastColor function to consider theme
 export const getContrastColor = (
diff --git a/web/src/utils/dashboard/convertSQLData.ts b/web/src/utils/dashboard/convertSQLData.ts
index 26ac5e9926b..aaef39924e4 100644
--- a/web/src/utils/dashboard/convertSQLData.ts
+++ b/web/src/utils/dashboard/convertSQLData.ts
@@ -262,8 +262,9 @@ export const convertSQLData = async (
       }
 
       const yAxisValue = item[yAxisKey];
-
-      acc[breakdownValue] = (acc[breakdownValue] || 0) + (+yAxisValue || 0);
+      if (breakdownValue !== null && breakdownValue !== undefined) {
+        acc[breakdownValue] = (acc[breakdownValue] || 0) + (+yAxisValue || 0);
+      }
       return acc;
     }, {});
 
@@ -1944,7 +1945,7 @@ export const convertSQLData = async (
 
         const field = panelSchema.queries[0].fields?.x.find(
           (it: any) =>
-            it.aggregationFunction == "histogram" &&
+            it.functionName == "histogram" &&
             it.column == store.state.zoConfig.timestamp_column,
         );
         // if histogram
@@ -2250,14 +2251,13 @@ export const convertSQLData = async (
     // auto SQL: if x axis has time series(aggregation function is histogram)
     const field = panelSchema.queries[0].fields?.x.find(
       (it: any) =>
-        it.aggregationFunction == "histogram" &&
+        it.functionName == "histogram" &&
         it.column == store.state.zoConfig.timestamp_column,
     );
 
     const timestampField = panelSchema.queries[0].fields?.x.find(
       (it: any) =>
-        !it.aggregationFunction &&
-        it.column == store.state.zoConfig.timestamp_column,
+        !it.functionName && it.column == store.state.zoConfig.timestamp_column,
     );
 
     //if x axis has time series
diff --git a/web/src/utils/dashboard/convertTableData.ts b/web/src/utils/dashboard/convertTableData.ts
index 6b03fcb501d..6cfb41373cf 100644
--- a/web/src/utils/dashboard/convertTableData.ts
+++ b/web/src/utils/dashboard/convertTableData.ts
@@ -102,7 +102,7 @@ export const convertTableData = (
   // identify histogram fields for auto and custom sql
   if (panelSchema?.queries[0]?.customQuery === false) {
     for (const field of columnData) {
-      if (field?.aggregationFunction === "histogram") {
+      if (field?.functionName === "histogram") {
         histogramFields.push(field.alias);
       } else {
         const sample = tableRows
@@ -119,7 +119,7 @@ export const convertTableData = (
   } else {
     // need sampling to identify timeseries data
     for (const field of columnData) {
-      if (field?.aggregationFunction === "histogram") {
+      if (field?.functionName === "histogram") {
         histogramFields.push(field.alias);
       } else {
         const sample = tableRows
diff --git a/web/src/utils/query/sqlUtils.ts b/web/src/utils/query/sqlUtils.ts
index c21f2289f55..89ae11de3a0 100644
--- a/web/src/utils/query/sqlUtils.ts
+++ b/web/src/utils/query/sqlUtils.ts
@@ -753,3 +753,392 @@ export const convertQueryIntoSingleLine = async (query: any) => {
     return query;
   }
 };
+
+// // List of known aggregation functions
+// const aggregationFunctions = new Set([
+//   "count",
+//   "count-distinct",
+//   "sum",
+//   "avg",
+//   "min",
+//   "max",
+//   "p50",
+//   "p90",
+//   "p95",
+//   "p99",
+// ]);
+
+// // Helper function to process function arguments
+// const processFunctionArgs = (args: any[]) => {
+//   return {
+//     type: "expr_list",
+//     value: args.map((arg) => {
+//       if (!arg || !arg.type)
+//         return { type: "default", value: "unknown_column" };
+
+//       switch (arg.type) {
+//         case "field":
+//           return {
+//             type: "column_ref",
+//             table: null,
+//             column: arg.value?.field || "unknown_column",
+//           };
+
+//         case "number":
+//           return {
+//             type: "number",
+//             value: arg.value ?? 0,
+//           };
+
+//         case "string":
+//           return {
+//             type: "string",
+//             value: arg.value || "",
+//           };
+
+//         case "function":
+//           return processField(arg.value); // Recursively process nested functions
+
+//         default:
+//           return { type: "default", value: "unknown_column" };
+//       }
+//     }),
+//   };
+// };
+
+// // Helper function to process fields for SELECT clause
+// const processField: any = (field: any) => {
+//   if (!field || !field.alias) return null; // Ignore invalid fields
+
+//   if (field.functionName) {
+//     const functionNameLower = field.functionName.toLowerCase();
+//     const isAggregation = aggregationFunctions.has(functionNameLower);
+
+//     console.log(isAggregation, "isAggregation", field);
+
+//     return {
+//       type: "expr",
+//       expr: {
+//         type: isAggregation ? "aggr_func" : "function",
+//         name: isAggregation
+//           ? field.functionName.toUpperCase()
+//           : { name: [{ type: "default", value: field.functionName }] },
+//         args: processFunctionArgs(field.args || []),
+//         over: null,
+//       },
+//       as: field.alias,
+//     };
+//   } else {
+//     return {
+//       type: "expr",
+//       expr: {
+//         type: "column_ref",
+//         table: null,
+//         column: field.column || "unknown_column",
+//       },
+//       as: field.alias,
+//     };
+//   }
+// };
+
+// // Main function to build SQL query using AST
+// export async function buildSQLQueryWithParser(
+//   fields: any,
+//   joins: any[],
+// ): Promise<string> {
+//   // import parser
+//   await importSqlParser();
+
+//   console.log(
+//     parser.astify(
+//       "select histogram(_timestamp) as x_axis_1, count(_timestamp) as y_axis_1 from default group by x_axis_1 order by x_axis_1",
+//     ),
+//     "parser.astify",
+//   );
+
+//   const ast: any = {
+//     type: "select",
+//     columns: [],
+//     from: [{ db: null, table: fields?.stream || "unknown_table", as: null }],
+//     where: null,
+//     groupby: null,
+//     orderby: null,
+//     joins: [],
+//   };
+
+//   // Process X-Axis Fields
+//   if (Array.isArray(fields?.x)) {
+//     fields.x.forEach((xField: any) => {
+//       const processedField = processField(xField);
+//       if (processedField) ast.columns.push(processedField);
+//     });
+//   }
+
+//   // Process Y-Axis Fields
+//   if (Array.isArray(fields?.y)) {
+//     fields.y.forEach((yField: any) => {
+//       const processedField = processField(yField);
+//       if (processedField) ast.columns.push(processedField);
+//     });
+//   }
+
+//   console.log(ast, "AST");
+
+//   const sql = parser.sqlify(ast);
+//   return sql.replace(/`/g, '"');
+// }
+
+// List of known aggregation functions
+const aggregationFunctions = new Set([
+  "count",
+  "count-distinct",
+  "sum",
+  "avg",
+  "min",
+  "max",
+  "p50",
+  "p90",
+  "p95",
+  "p99",
+]);
+
+// Helper function to process function arguments
+const processFunctionArgs = (args: any[], isAggregation: boolean) => {
+  if (isAggregation) {
+    // Aggregation functions need a single `expr` argument
+    return {
+      distinct: null,
+      expr: {
+        type: "column_ref",
+        table: null,
+        column: args[0]?.value?.field || args[0]?.value || "unknown_column",
+      },
+      orderby: null,
+      separator: null,
+    };
+  } else {
+    // Regular functions need an `expr_list`
+    return {
+      type: "expr_list",
+      value: args.map((arg) => ({
+        type: "column_ref",
+        table: null,
+        column: arg.value?.field || arg.value || "unknown_column",
+      })),
+    };
+  }
+};
+
+// Helper function to process fields for SELECT clause
+const processField = (field: any) => {
+  if (!field || !field.alias) return null; // Ignore invalid fields
+
+  if (field.functionName) {
+    const functionNameLower = field.functionName.toLowerCase();
+    const isAggregation = aggregationFunctions.has(functionNameLower);
+
+    return {
+      type: "expr",
+      expr: {
+        type: isAggregation ? "aggr_func" : "function",
+        name: isAggregation
+          ? field.functionName.toUpperCase()
+          : { name: [{ type: "default", value: field.functionName }] },
+        args: processFunctionArgs(field.args || [], isAggregation),
+        over: null,
+      },
+      as: field.alias,
+    };
+  } else {
+    return {
+      type: "expr",
+      expr: {
+        type: "column_ref",
+        table: null,
+        column: field.column || "unknown_column",
+      },
+      as: field.alias,
+    };
+  }
+};
+
+function buildJoinConditions(conditions: any[]) {
+  if (!conditions || conditions.length === 0) return null;
+
+  if (conditions.length === 1) {
+    return createBinaryExpr(conditions[0]);
+  }
+
+  let conditionTree = createBinaryExpr(conditions[0]);
+
+  for (let i = 1; i < conditions.length; i++) {
+    conditionTree = {
+      type: "binary_expr",
+      operator: "AND",
+      left: conditionTree,
+      right: createBinaryExpr(conditions[i]),
+    };
+  }
+
+  return conditionTree;
+}
+
+function createBinaryExpr(condition: any) {
+  return {
+    type: "binary_expr",
+    operator: condition.operation,
+    left: {
+      type: "column_ref",
+      table: condition.leftField.streamAlias || null,
+      column: { expr: { type: "default", value: condition.leftField.field } },
+    },
+    right: {
+      type: "column_ref",
+      table: condition.rightField.streamAlias || null,
+      column: { expr: { type: "default", value: condition.rightField.field } },
+    },
+  };
+}
+
+// Main function to build SQL query using AST
+export async function buildSQLQueryWithParser(
+  fields: any,
+  joins: any[],
+): Promise<string> {
+  // Import parser
+  await importSqlParser();
+
+  const ast: any = {
+    with: null,
+    type: "select",
+    options: null,
+    distinct: { type: null },
+    columns: [],
+    from: [],
+    where: null,
+    groupby: { columns: [] },
+    having: null,
+    orderby: [],
+    limit: { separator: "", value: [] },
+    window: null,
+  };
+
+  const groupByFields: any[] = [];
+
+  // Main table reference
+  if (fields?.stream) {
+    ast.from.push({
+      db: null,
+      table: fields.stream,
+      as: null,
+    });
+  }
+
+  // Process X-Axis Fields (Included in GROUP BY & ORDER BY if applicable)
+  if (Array.isArray(fields?.x)) {
+    fields.x.forEach((xField: any) => {
+      const processedField = processField(xField);
+      if (processedField) {
+        ast.columns.push(processedField);
+        groupByFields.push({
+          type: "column_ref",
+          table: null,
+          column: xField.alias || xField.column || "unknown_column",
+        });
+
+        // Handle ORDER BY for X-axis
+        if (xField.sortBy) {
+          ast.orderby.push({
+            expr: {
+              type: "column_ref",
+              table: null,
+              column: xField.alias || xField.column || "unknown_column",
+            },
+            type: xField.sortBy.toLowerCase() === "desc" ? "DESC" : "ASC",
+          });
+        }
+      }
+    });
+  }
+
+  // Process Breakdown Fields (Included in GROUP BY & ORDER BY if applicable)
+  if (Array.isArray(fields?.breakdown)) {
+    fields.breakdown.forEach((breakdownField: any) => {
+      const processedField = processField(breakdownField);
+      if (processedField) {
+        ast.columns.push(processedField);
+        groupByFields.push({
+          type: "column_ref",
+          table: null,
+          column:
+            breakdownField.alias || breakdownField.column || "unknown_column",
+        });
+
+        // Handle ORDER BY for Breakdown
+        if (breakdownField.sortBy) {
+          ast.orderby.push({
+            expr: {
+              type: "column_ref",
+              table: null,
+              column:
+                breakdownField.alias ||
+                breakdownField.column ||
+                "unknown_column",
+            },
+            type:
+              breakdownField.sortBy.toLowerCase() === "desc" ? "DESC" : "ASC",
+          });
+        }
+      }
+    });
+  }
+
+  // Process Y-Axis Fields (These may have ORDER BY)
+  if (Array.isArray(fields?.y)) {
+    fields.y.forEach((yField: any) => {
+      const processedField = processField(yField);
+      if (processedField) {
+        ast.columns.push(processedField);
+        if (yField.sortBy) {
+          ast.orderby.push({
+            expr: {
+              type: "column_ref",
+              table: null,
+              column: yField.alias || yField.column || "unknown_column",
+            },
+            type: yField.sortBy.toLowerCase() === "desc" ? "DESC" : "ASC",
+          });
+        }
+      }
+    });
+  }
+
+  // Assign GROUP BY fields if there are any
+  if (groupByFields.length > 0) {
+    ast.groupby = groupByFields;
+  }
+
+  // Process Joins
+  if (Array.isArray(joins)) {
+    joins.forEach((join: any) => {
+      ast.from.push({
+        db: null,
+        table: join.stream,
+        as: join.streamAlias,
+        join: join.joinType.toUpperCase() + " JOIN",
+        on: buildJoinConditions(join.conditions),
+      });
+    });
+  }
+
+  console.log(
+    "Abhay: ast",
+    parser.astify(
+      `SELECT histogram(default._timestamp) as "x_axis_1", count(stream_0.kubernetes_host) as "y_axis_1"  FROM "default" join e2e_automate as stream_0 on default.k8s_namespace_name = stream_0.k8s_namespace_name AND default.abc != stream_0.bcd  GROUP BY x_axis_1 ORDER BY x_axis_1 ASC`,
+    ),
+  );
+
+  // Convert AST to SQL
+  const sql = parser.sqlify(ast);
+  return sql.replace(/`/g, '"'); // Replace backticks with double quotes for consistency
+}
diff --git a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
new file mode 100644
index 00000000000..6472140a211
--- /dev/null
+++ b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
@@ -0,0 +1,345 @@
+<!-- Copyright 2023 OpenObserve Inc.
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+     http:www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License. 
+-->
+
+<!-- eslint-disable vue/no-unused-components -->
+<template>
+  <div class="o2-input" data-test="dashboard-join-pop-up">
+    <div>
+      <div
+        class="tw-flex tw-flex-row tw-w-full tw-gap-10 items-center q-table__title q-mr-md"
+      >
+        <q-select
+          behavior="menu"
+          borderless
+          dense
+          outlined
+          filled
+          v-model="mainStream"
+          :options="[]"
+          :disable="true"
+          label="Joining Stream"
+          class="tw-w-52"
+          stack-label
+          data-test="dashboard-config-panel-join-from"
+        />
+
+        <q-select
+          outlined
+          filled
+          v-model="modelValue.joinType"
+          :options="joinOptions"
+          label="With Join Type"
+          class="q-py-md tw-w-1/3"
+          stack-label
+          data-test="dashboard-config-panel-join-type"
+        />
+
+        <q-select
+          outlined
+          filled
+          v-model="modelValue.stream"
+          :options="streamOptions"
+          emit-value
+          map-options
+          label="On Stream"
+          class="q-py-md tw-w-1/3"
+          stack-label
+          data-test="dashboard-config-panel-join-to"
+        />
+      </div>
+
+      <q-separator />
+
+      <div>
+        <span class="tw-w-full tw-text-center tw-mt-5 tw-text-lg">On</span>
+        <div
+          v-for="(arg, argIndex) in modelValue.conditions"
+          :key="argIndex"
+          class="tw-w-full tw-flex tw-flex-col"
+        >
+          <div>
+            <div>
+              <label :for="'arg-' + argIndex"
+                >condition {{ argIndex + 1 }}</label
+              >
+            </div>
+            <div class="tw-flex tw-gap-x-3">
+              <!-- Left field selector using StreamFieldSelect -->
+              <div class="tw-w-1/3">
+                <StreamFieldSelect
+                  :streams="getStreamsBasedJoinIndex()"
+                  v-model="modelValue.conditions[argIndex].leftField"
+                  :data-test="`dashboard-join-condition-leftField-${argIndex}`"
+                />
+              </div>
+
+              <!-- operator selector -->
+              <q-select
+                behavior="menu"
+                borderless
+                v-model="modelValue.conditions[argIndex].operation"
+                :options="operationOptions"
+                dense
+                filled
+                label="Select Operation"
+                :data-test="`dashboard-join-condition-operation-${argIndex}`"
+                class="tw-w-1/3"
+              />
+
+              <!-- Right field selector using StreamFieldSelect -->
+              <div class="tw-w-1/3">
+                <StreamFieldSelect
+                  :streams="[
+                    {
+                      stream: modelValue.stream,
+                      streamAlias: modelValue.streamAlias,
+                    },
+                  ]"
+                  v-model="modelValue.conditions[argIndex].rightField"
+                  :data-test="`dashboard-join-condition-rightField-${argIndex}`"
+                />
+              </div>
+
+              <!-- Remove argument button -->
+              <!-- only allow if more than 1 -->
+              <q-btn
+                v-if="modelValue.conditions.length > 1"
+                :data-test="`dashboard-join-condition-remove-${argIndex}`"
+                icon="close"
+                dense
+                flat
+                round
+                @click="removeCondition(argIndex)"
+                class="tw-h-10 tw-w-10"
+              />
+            </div>
+          </div>
+        </div>
+        <q-btn
+          @click="addCondition()"
+          color="primary"
+          label="+ Add Condition"
+          padding="5px 14px"
+          class="tw-mt-3"
+          no-caps
+          dense
+        />
+      </div>
+    </div>
+  </div>
+</template>
+
+<script lang="ts">
+import { defineComponent, watch, onMounted, inject, ref } from "vue";
+import { useI18n } from "vue-i18n";
+import { useStore } from "vuex";
+import { useLoading } from "@/composables/useLoading";
+import useStreams from "@/composables/useStreams";
+import useDashboardPanelData from "@/composables/useDashboardPanel";
+import StreamFieldSelect from "@/components/dashboards/addPanel/StreamFieldSelect.vue";
+
+export default defineComponent({
+  name: "AddJoinPopUp",
+
+  components: {
+    StreamFieldSelect,
+  },
+
+  props: {
+    mainStream: {
+      type: String,
+      required: true,
+    },
+    joinIndex: {
+      type: Number,
+      required: true,
+    },
+    modelValue: {
+      type: Object,
+      default: () => {
+        return {
+          stream: "",
+          joinType: "inner",
+          streamAlias: "",
+          conditions: [
+            {
+              leftField: {
+                streamAlias: "",
+                field: "",
+              },
+              rightField: {
+                streamAlias: "",
+                field: "",
+              },
+              logicalOperator: "and",
+              operation: "=",
+            },
+          ],
+        };
+      },
+    },
+  },
+
+  emits: ["close"],
+
+  setup(props, { emit }) {
+    const { t } = useI18n();
+    const store = useStore();
+    const { getStreams, getStream } = useStreams();
+
+    const dashboardPanelDataPageKey: any = inject(
+      "dashboardPanelDataPageKey",
+      "dashboard",
+    );
+
+    const { dashboardPanelData } = useDashboardPanelData(
+      dashboardPanelDataPageKey,
+    );
+
+    const streamOptions = ref([]);
+    const joinOptions = ["inner", "left", "right"];
+    const operationOptions = ["=", "!=", ">", "<", ">=", "<="];
+
+    // get the stream list by making an API call
+    const getStreamList = async (stream_type: any) => {
+      await getStreams(stream_type, false).then((res: any) => {
+        streamOptions.value = res.list.map((stream: any) => {
+          return {
+            label: stream.name,
+            value: stream.name,
+          };
+        });
+
+        if (streamOptions.value.length > 0) {
+          // check if current selected stream is in the list
+          // if not select first stream
+          const selectedStream = streamOptions.value.find((option: any) => {
+            if (option.value === props.modelValue.stream) {
+              return option;
+            }
+          });
+
+          if (!selectedStream) {
+            props.modelValue.stream = res.list[0].name;
+          }
+        }
+      });
+    };
+
+    // get stream list
+    const streamDataLoading = useLoading(async (stream_type: any) => {
+      await getStreamList(stream_type);
+    });
+
+    // get the stream list based on the selected stream type
+    const loadStreamsListBasedOnType = async () => {
+      streamDataLoading.execute(
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.stream_type,
+      );
+    };
+
+    // watch the stream type and load the stream list
+    watch(
+      () =>
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.stream_type,
+      async () => {
+        loadStreamsListBasedOnType();
+      },
+    );
+
+    onMounted(() => {
+      loadStreamsListBasedOnType();
+    });
+
+    const removeCondition = (argIndex: number) => {
+      props.modelValue.conditions.splice(argIndex, 1);
+    };
+
+    const addCondition = () => {
+      props.modelValue.conditions.push({
+        leftField: {
+          streamAlias: "",
+          field: "",
+        },
+        rightField: {
+          streamAlias: "",
+          field: "",
+        },
+        logicalOperator: "and",
+        operation: "=",
+      });
+    };
+
+    const getStreamsBasedJoinIndex = () => {
+      // return list of all streams upto current join index
+      return [
+        {
+          stream:
+            dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields.stream,
+        },
+        ...(dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ]?.joins
+          ?.slice(0, props.joinIndex)
+          ?.map((join: any) => {
+            return { stream: join.stream, streamAlias: join.streamAlias };
+          }) ?? []),
+      ];
+    };
+
+    return {
+      t,
+      streamOptions,
+      joinOptions,
+      removeCondition,
+      addCondition,
+      operationOptions,
+      getStreamsBasedJoinIndex,
+    };
+  },
+});
+</script>
+
+<style lang="scss" scoped>
+.selected {
+  background-color: var(--q-primary) !important;
+  font-weight: bold;
+  color: white;
+}
+.dropdownDiv {
+  display: flex;
+  align-items: center;
+  margin: 10px 0px;
+  width: 100%;
+}
+
+.dropdownLabel {
+  width: 150px;
+}
+
+.dropdown {
+  min-width: 100%;
+}
+
+:deep(.no-case .q-field__native > :first-child) {
+  text-transform: none !important;
+}
+</style>
diff --git a/web/src/views/Dashboards/addPanel/AddPanel.vue b/web/src/views/Dashboards/addPanel/AddPanel.vue
index ede3460d7d5..70a49da96a1 100644
--- a/web/src/views/Dashboards/addPanel/AddPanel.vue
+++ b/web/src/views/Dashboards/addPanel/AddPanel.vue
@@ -202,7 +202,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                   <template #before>
                     <div
                       class="layout-panel-container col"
-                      style="height: 100%"
+                      style="height: 100%; width: 100%"
                     >
                       <DashboardQueryBuilder
                         :dashboardData="currentDashboardData.data"
@@ -491,6 +491,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                           />
                         </template>
                       </q-splitter>
+
                       <DashboardErrorsComponent
                         :errors="errorData"
                         class="col-auto"
@@ -641,6 +642,7 @@ export default defineComponent({
       resetDashboardPanelDataAndAddTimeField,
       resetAggregationFunction,
       validatePanel,
+      makeAutoSQLQuery,
     } = useDashboardPanelData("dashboard");
     const editMode = ref(false);
     const selectedDate: any = ref(null);
@@ -983,6 +985,75 @@ export default defineComponent({
       },
     );
 
+    // Generate the query when the fields are updated
+    watch(
+      () => [
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.stream,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.x,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.y,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.breakdown,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.z,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.filter,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].customQuery,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.latitude,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.longitude,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.weight,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.source,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.target,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.value,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.name,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields.value_for_maps,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].config.limit,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].joins,
+      ],
+      () => {
+        // only continue if current mode is auto query generation
+        if (
+          !dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].customQuery
+        ) {
+          // makeAutoSQLQuery is async function
+          makeAutoSQLQuery();
+        }
+      },
+      { deep: true },
+    );
+
     const runQuery = () => {
       try {
         // console.time("runQuery");
diff --git a/web/src/views/Dashboards/addPanel/DashboardJoinsOption.vue b/web/src/views/Dashboards/addPanel/DashboardJoinsOption.vue
new file mode 100644
index 00000000000..ca2e3e8c2a9
--- /dev/null
+++ b/web/src/views/Dashboards/addPanel/DashboardJoinsOption.vue
@@ -0,0 +1,222 @@
+<template>
+  <div>
+    <div
+      v-if="
+        !(
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].customQuery && dashboardPanelData.data.queryType == 'sql'
+        )
+      "
+      style="display: flex; flex-direction: row"
+      class="q-pl-md"
+    >
+      <div class="layout-name">{{ t("panel.joins") }}</div>
+      <span class="layout-separator">:</span>
+      <div
+        class="axis-container droppable scroll row"
+        data-test="dashboard-filter-layout"
+      >
+        <div
+          class="row q-mr-sm q-my-xs"
+          v-for="(joinObj, index) in dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].joins"
+          :key="index"
+        >
+          <q-btn-group class="axis-field">
+            <div>
+              <!-- <q-icon
+                name="drag_indicator"
+                color="grey-13"
+                size="13px"
+                class="cursor-grab q-my-xs"
+              /> -->
+              <!-- icon-right="arrow_drop_down" -->
+              <q-btn
+                no-caps
+                dense
+                color="primary"
+                square
+                :no-wrap="true"
+                size="sm"
+                :label="index"
+                :data-test="`dashboard-join-item-${index}`"
+                class="q-pl-sm"
+              >
+                <q-menu
+                  class="q-pa-md"
+                  :data-test="`dashboard-join-menu-${index}`"
+                >
+                  <AddJoinPopUp
+                    :class="
+                      store.state.theme == 'dark' ? 'dark-mode' : 'bg-white'
+                    "
+                    v-model="
+                      dashboardPanelData.data.queries[
+                        dashboardPanelData.layout.currentQueryIndex
+                      ].joins[index]
+                    "
+                    :joinIndex="index"
+                    :mainStream="
+                      dashboardPanelData.data.queries[
+                        dashboardPanelData.layout.currentQueryIndex
+                      ].fields.stream
+                    "
+                  />
+                </q-menu>
+              </q-btn>
+              <q-btn
+                style="height: 100%"
+                size="xs"
+                dense
+                :data-test="`dashboard-join-item-${index}-remove`"
+                icon="close"
+                @click="removeJoin(index)"
+              />
+            </div>
+          </q-btn-group>
+        </div>
+        <q-btn
+          icon="add"
+          color="primary"
+          size="xs"
+          round
+          class="add-btn"
+          data-test="dashboard-add-join-btn"
+          @click="addJoin"
+        />
+      </div>
+    </div>
+  </div>
+</template>
+
+<script lang="ts">
+import { defineComponent, ref, inject, onMounted, watch } from "vue";
+import useDashboardPanelData from "../../../composables/useDashboardPanel";
+import { useI18n } from "vue-i18n";
+import { useStore } from "vuex";
+import AddJoinPopUp from "./AddJoinPopUp.vue";
+
+export default defineComponent({
+  name: "DashboardJoinOption",
+  components: {
+    AddJoinPopUp,
+  },
+  props: [],
+
+  setup(props) {
+    const dashboardPanelDataPageKey = inject(
+      "dashboardPanelDataPageKey",
+      "dashboard",
+    );
+
+    const { dashboardPanelData, removeFilterItem, loadFilterItem } =
+      useDashboardPanelData(dashboardPanelDataPageKey);
+
+    const { t } = useI18n();
+    const store = useStore();
+
+    const initializeJoinObj = () => {
+      dashboardPanelData?.data?.queries?.forEach((queryObj: any) => {
+        if (!queryObj?.joins) {
+          queryObj.joins = [];
+        }
+      });
+    };
+
+    const addJoin = () => {
+      const initialValue = {
+        stream: "",
+        streamAlias: "",
+        joinType: "inner",
+        conditions: [
+          {
+            leftField: {
+              streamAlias: "",
+              field: "",
+            },
+            rightField: {
+              streamAlias: "",
+              field: "",
+            },
+            logicalOperator: "AND",
+            operation: "=",
+          },
+        ],
+      };
+
+      // initialize join array is available for old version as well
+      initializeJoinObj();
+
+      dashboardPanelData.data.queries[
+        dashboardPanelData.layout.currentQueryIndex
+      ]?.joins?.push(initialValue);
+    };
+
+    const removeJoin = (index: number) => {
+      dashboardPanelData.data.queries[
+        dashboardPanelData.layout.currentQueryIndex
+      ].joins.splice(index, 1);
+    };
+
+    onMounted(() => {
+      // initialize join array is available for old version as well
+      initializeJoinObj();
+    });
+
+    watch(
+      () =>
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].joins,
+      () => {
+        // generate alias for each join stream
+        // make sure that alias is unique
+        // if stream is duplicate then add _1, _2, _3 etc
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ]?.joins?.forEach((join: any, index: number) => {
+          if (join?.stream) {
+            join.streamAlias = `stream_${index}`;
+          }
+        });
+      },
+      {
+        deep: true,
+      },
+    );
+
+    return {
+      t,
+      store,
+      dashboardPanelData,
+      removeFilterItem,
+      loadFilterItem,
+      addJoin,
+      removeJoin,
+    };
+  },
+});
+</script>
+
+<style lang="scss" scoped>
+.layout-name {
+  font-size: 14px;
+  white-space: nowrap;
+  min-width: 130px;
+  display: flex;
+  align-items: center;
+}
+
+.layout-separator {
+  display: flex;
+  align-items: center;
+  margin-left: 2px;
+  margin-right: 2px;
+}
+
+.axis-container {
+  margin: 5px;
+}
+</style>
diff --git a/web/src/views/Dashboards/addPanel/Group.vue b/web/src/views/Dashboards/addPanel/Group.vue
index 27b65b0bfb5..041712e968e 100644
--- a/web/src/views/Dashboards/addPanel/Group.vue
+++ b/web/src/views/Dashboards/addPanel/Group.vue
@@ -1,5 +1,5 @@
 <template>
-  <q-select
+  <!-- <q-select
     v-if="groupIndex !== 0"
     v-model="group.logicalOperator"
     dense
@@ -9,7 +9,7 @@
     @update:model-value="emitLogicalOperatorChange"
     class="condition-logical-operator"
     data-test="dashboard-add-group-logical-operator"
-  />
+  /> -->
   <div class="group" :style="`--group-index: ${groupNestedIndex}`">
     <div class="group-conditions">
       <div

From bfddd6b392643fcf4c84f2a9c689038c92d972a0 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 27 Mar 2025 16:37:48 +0530
Subject: [PATCH 02/61] add: missing validation functions

---
 web/src/composables/useDashboardPanel.ts      |   2 +-
 .../dashboard/convertDataIntoUnitValue.ts     | 943 +++++++++++++++---
 2 files changed, 815 insertions(+), 130 deletions(-)

diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index 01b46eb8b23..163bd436f4b 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -19,10 +19,10 @@ import { useStore } from "vuex";
 import useNotifications from "./useNotifications";
 import { splitQuotedString, escapeSingleQuotes } from "@/utils/zincutils";
 import { extractFields } from "@/utils/query/sqlUtils";
-import { validateSQLPanelFields } from "@/utils/dashboard/convertDataIntoUnitValue";
 import {
   buildSQLQueryFromInput,
   buildSQLJoinsFromInput,
+  validateSQLPanelFields,
 } from "@/utils/dashboard/convertDataIntoUnitValue";
 import useStreams from "./useStreams";
 
diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index e493c3caf84..8f1efa3b0bd 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -483,64 +483,52 @@ function validateConditions(conditions: any, errors: any) {
   });
 }
 
-export const validateSQLPanelFields = (
-  panelData: any,
-  queryIndex: number,
-  currentXLabel: any,
-  currentYLabel: any,
+/**
+ * Shared validation logic for panel field configuration based on chart type
+ *
+ * @param chartType The type of chart being validated
+ * @param fields The fields configuration to validate
+ * @param errors Array to collect error messages
+ * @param xAxisLabel Optional custom label for X-Axis in error messages
+ * @param yAxisLabel Optional custom label for Y-Axis in error messages
+ */
+const validateChartFieldsConfiguration = (
+  chartType: string,
+  fields: any,
   errors: string[],
-  isFieldsValidationRequired: boolean = true,
+  xAxisLabel: string = "X-Axis",
+  yAxisLabel: string = "Y-Axis",
 ) => {
-  // check if fields validation is required
-  if (isFieldsValidationRequired === false) {
-    return;
-  }
-
-  switch (panelData?.type) {
+  switch (chartType) {
     case "donut":
     case "pie": {
-      if (
-        panelData?.queries[queryIndex].fields.y.length > 1 ||
-        panelData?.queries[queryIndex].fields.y.length == 0
-      ) {
+      if (fields?.y?.length > 1 || fields?.y?.length === 0) {
         errors.push("Add one value field for donut and pie charts");
       }
 
-      if (
-        panelData?.queries[queryIndex].fields.x.length > 1 ||
-        panelData?.queries[queryIndex].fields.x.length == 0
-      ) {
+      if (fields?.x?.length > 1 || fields?.x?.length === 0) {
         errors.push("Add one label field for donut and pie charts");
       }
-
       break;
     }
     case "metric": {
-      if (
-        panelData.queries[queryIndex].fields.y.length > 1 ||
-        panelData.queries[queryIndex].fields.y.length == 0
-      ) {
+      if (fields?.y?.length > 1 || fields?.y?.length === 0) {
         errors.push("Add one value field for metric charts");
       }
 
-      if (panelData.queries[queryIndex].fields.x.length) {
-        errors.push(`${currentXLabel} field is not allowed for Metric chart`);
+      if (fields?.x?.length) {
+        errors.push(`${xAxisLabel} field is not allowed for Metric chart`);
       }
-
       break;
     }
     case "gauge": {
-      if (panelData.queries[queryIndex].fields.y.length != 1) {
+      if (fields?.y?.length !== 1) {
         errors.push("Add one value field for gauge chart");
       }
       // gauge can have zero or one label
-      if (
-        panelData.queries[queryIndex].fields.x.length != 1 &&
-        panelData.queries[queryIndex].fields.x.length != 0
-      ) {
-        errors.push(`Add one label field for gauge chart`);
+      if (fields?.x?.length !== 1 && fields?.x?.length !== 0) {
+        errors.push("Add one label field for gauge chart");
       }
-
       break;
     }
     case "h-bar":
@@ -548,105 +536,86 @@ export const validateSQLPanelFields = (
     case "line":
     case "scatter":
     case "bar": {
-      if (panelData.queries[queryIndex].fields.y.length < 1) {
-        errors.push("Add at least one field for the Y-Axis");
+      if (fields?.y?.length < 1) {
+        errors.push(`Add at least one field for the ${yAxisLabel}`);
       }
 
-      if (
-        panelData.queries[queryIndex].fields.x.length > 1 ||
-        panelData.queries[queryIndex].fields.x.length == 0
-      ) {
-        errors.push(`Add one fields for the X-Axis`);
+      if (fields?.x?.length > 1 || fields?.x?.length === 0) {
+        errors.push(`Add one fields for the ${xAxisLabel}`);
       }
-
       break;
     }
     case "table": {
-      if (
-        panelData.queries[queryIndex].fields.y.length == 0 &&
-        panelData.queries[queryIndex].fields.x.length == 0
-      ) {
-        errors.push("Add at least one field on X-Axis or Y-Axis");
+      if (fields?.y?.length === 0 && fields?.x?.length === 0) {
+        errors.push(`Add at least one field on ${xAxisLabel} or ${yAxisLabel}`);
       }
-
       break;
     }
     case "heatmap": {
-      if (panelData.queries[queryIndex].fields.y.length == 0) {
-        errors.push("Add at least one field for the Y-Axis");
+      if (fields?.y?.length === 0) {
+        errors.push(`Add at least one field for the ${yAxisLabel}`);
       }
 
-      if (panelData.queries[queryIndex].fields.x.length == 0) {
-        errors.push(`Add one field for the X-Axis`);
+      if (fields?.x?.length === 0) {
+        errors.push(`Add one field for the ${xAxisLabel}`);
       }
 
-      if (panelData.queries[queryIndex].fields.z.length == 0) {
-        errors.push(`Add one field for the Z-Axis`);
+      if (fields?.z?.length === 0) {
+        errors.push("Add one field for the Z-Axis");
       }
-
       break;
     }
     case "stacked":
     case "h-stacked": {
-      if (panelData.queries[queryIndex].fields.y.length == 0) {
-        errors.push("Add at least one field for the Y-Axis");
+      if (fields?.y?.length === 0) {
+        errors.push(`Add at least one field for the ${yAxisLabel}`);
       }
-      if (
-        panelData.queries[queryIndex].fields.x.length != 1 ||
-        panelData.queries[queryIndex].fields.breakdown.length != 1
-      ) {
+      if (fields?.x?.length !== 1 || fields?.breakdown?.length !== 1) {
         errors.push(
-          `Add exactly one fields on the X-Axis and breakdown for stacked and h-stacked charts`,
+          `Add exactly one field on the ${xAxisLabel} and breakdown for stacked and h-stacked charts`,
         );
       }
-
       break;
     }
     case "area-stacked": {
-      if (
-        panelData.queries[queryIndex].fields.y.length > 1 ||
-        panelData.queries[queryIndex].fields.y.length == 0
-      ) {
-        errors.push("Add exactly one field on Y-Axis for area-stacked charts");
+      if (fields?.y?.length > 1 || fields?.y?.length === 0) {
+        errors.push(
+          `Add exactly one field on ${yAxisLabel} for area-stacked charts`,
+        );
       }
-      if (
-        panelData.queries[queryIndex].fields.x.length != 1 ||
-        panelData.queries[queryIndex].fields.breakdown.length != 1
-      ) {
+      if (fields?.x?.length !== 1 || fields?.breakdown?.length !== 1) {
         errors.push(
-          `Add exactly one fields on the X-Axis and breakdown for stacked, area-stacked and h-stacked charts`,
+          `Add exactly one field on the ${xAxisLabel} and breakdown for area-stacked charts`,
         );
       }
-
       break;
     }
     case "geomap": {
-      if (panelData.queries[queryIndex].fields.latitude == null) {
+      if (fields?.latitude == null) {
         errors.push("Add one field for the latitude");
       }
-      if (panelData.queries[queryIndex].fields.longitude == null) {
+      if (fields?.longitude == null) {
         errors.push("Add one field for the longitude");
       }
       break;
     }
-
     case "sankey": {
-      if (panelData.queries[queryIndex].fields.source == null) {
+      if (fields?.source == null) {
         errors.push("Add one field for the source");
       }
-      if (panelData.queries[queryIndex].fields.target == null) {
+      if (fields?.target == null) {
         errors.push("Add one field for the target");
       }
-      if (panelData.queries[queryIndex].fields.value == null) {
+      if (fields?.value == null) {
         errors.push("Add one field for the value");
       }
       break;
     }
     case "maps": {
-      if (panelData.queries[queryIndex].fields.name == null) {
+      if (fields?.name == null) {
         errors.push("Add one field for the name");
       }
-      if (panelData.queries[queryIndex].fields.value_for_maps == null) {
+      if (fields?.value_for_maps == null) {
         errors.push("Add one field for the value");
       }
       break;
@@ -654,54 +623,227 @@ export const validateSQLPanelFields = (
     default:
       break;
   }
-
-  // check if aggregation function is selected or not
-  if (panelData?.type && !(panelData?.type == "heatmap")) {
-    const aggregationFunctionError = panelData.queries[
-      queryIndex
-    ].fields.y.filter(
-      (it: any) =>
-        !it.isDerived &&
-        it.type == "build" &&
-        (it.functionName == null || it.functionName == ""),
-    );
-    if (
-      panelData.queries[queryIndex].fields.y.length &&
-      aggregationFunctionError.length
-    ) {
-      errors.push(
-        ...aggregationFunctionError.map(
-          (it: any) =>
-            `${currentYLabel}: ${it.column}: Aggregation function required`,
-        ),
-      );
-    }
-  }
-
-  // check if labels are there for y axis items
-  const labelError = panelData?.queries?.[queryIndex]?.fields?.y?.filter(
-    (it: any) => it?.label == null || it?.label == "",
-  );
-  if (
-    panelData?.queries?.[queryIndex]?.fields?.y?.length &&
-    labelError?.length
-  ) {
-    errors.push(
-      ...labelError.map(
-        (it: any) => `${currentYLabel}: ${it.column}: Label required`,
-      ),
-    );
-  }
-
-  if (panelData?.queries?.[queryIndex]?.fields?.filter?.conditions?.length) {
-    // Validate the top-level conditions
-    validateConditions(
-      panelData?.queries?.[queryIndex]?.fields?.filter?.conditions,
-      errors,
-    );
-  }
 };
 
+// export const validateSQLPanelFields = (
+//   panelData: any,
+//   queryIndex: number,
+//   currentXLabel: any,
+//   currentYLabel: any,
+//   errors: string[],
+//   isFieldsValidationRequired: boolean = true,
+// ) => {
+//   // check if fields validation is required
+//   if (isFieldsValidationRequired === false) {
+//     return;
+//   }
+
+//   switch (panelData?.type) {
+//     case "donut":
+//     case "pie": {
+//       if (
+//         panelData?.queries[queryIndex].fields.y.length > 1 ||
+//         panelData?.queries[queryIndex].fields.y.length == 0
+//       ) {
+//         errors.push("Add one value field for donut and pie charts");
+//       }
+
+//       if (
+//         panelData?.queries[queryIndex].fields.x.length > 1 ||
+//         panelData?.queries[queryIndex].fields.x.length == 0
+//       ) {
+//         errors.push("Add one label field for donut and pie charts");
+//       }
+
+//       break;
+//     }
+//     case "metric": {
+//       if (
+//         panelData.queries[queryIndex].fields.y.length > 1 ||
+//         panelData.queries[queryIndex].fields.y.length == 0
+//       ) {
+//         errors.push("Add one value field for metric charts");
+//       }
+
+//       if (panelData.queries[queryIndex].fields.x.length) {
+//         errors.push(`${currentXLabel} field is not allowed for Metric chart`);
+//       }
+
+//       break;
+//     }
+//     case "gauge": {
+//       if (panelData.queries[queryIndex].fields.y.length != 1) {
+//         errors.push("Add one value field for gauge chart");
+//       }
+//       // gauge can have zero or one label
+//       if (
+//         panelData.queries[queryIndex].fields.x.length != 1 &&
+//         panelData.queries[queryIndex].fields.x.length != 0
+//       ) {
+//         errors.push(`Add one label field for gauge chart`);
+//       }
+
+//       break;
+//     }
+//     case "h-bar":
+//     case "area":
+//     case "line":
+//     case "scatter":
+//     case "bar": {
+//       if (panelData.queries[queryIndex].fields.y.length < 1) {
+//         errors.push("Add at least one field for the Y-Axis");
+//       }
+
+//       if (
+//         panelData.queries[queryIndex].fields.x.length > 1 ||
+//         panelData.queries[queryIndex].fields.x.length == 0
+//       ) {
+//         errors.push(`Add one fields for the X-Axis`);
+//       }
+
+//       break;
+//     }
+//     case "table": {
+//       if (
+//         panelData.queries[queryIndex].fields.y.length == 0 &&
+//         panelData.queries[queryIndex].fields.x.length == 0
+//       ) {
+//         errors.push("Add at least one field on X-Axis or Y-Axis");
+//       }
+
+//       break;
+//     }
+//     case "heatmap": {
+//       if (panelData.queries[queryIndex].fields.y.length == 0) {
+//         errors.push("Add at least one field for the Y-Axis");
+//       }
+
+//       if (panelData.queries[queryIndex].fields.x.length == 0) {
+//         errors.push(`Add one field for the X-Axis`);
+//       }
+
+//       if (panelData.queries[queryIndex].fields.z.length == 0) {
+//         errors.push(`Add one field for the Z-Axis`);
+//       }
+
+//       break;
+//     }
+//     case "stacked":
+//     case "h-stacked": {
+//       if (panelData.queries[queryIndex].fields.y.length == 0) {
+//         errors.push("Add at least one field for the Y-Axis");
+//       }
+//       if (
+//         panelData.queries[queryIndex].fields.x.length != 1 ||
+//         panelData.queries[queryIndex].fields.breakdown.length != 1
+//       ) {
+//         errors.push(
+//           `Add exactly one fields on the X-Axis and breakdown for stacked and h-stacked charts`,
+//         );
+//       }
+
+//       break;
+//     }
+//     case "area-stacked": {
+//       if (
+//         panelData.queries[queryIndex].fields.y.length > 1 ||
+//         panelData.queries[queryIndex].fields.y.length == 0
+//       ) {
+//         errors.push("Add exactly one field on Y-Axis for area-stacked charts");
+//       }
+//       if (
+//         panelData.queries[queryIndex].fields.x.length != 1 ||
+//         panelData.queries[queryIndex].fields.breakdown.length != 1
+//       ) {
+//         errors.push(
+//           `Add exactly one fields on the X-Axis and breakdown for stacked, area-stacked and h-stacked charts`,
+//         );
+//       }
+
+//       break;
+//     }
+//     case "geomap": {
+//       if (panelData.queries[queryIndex].fields.latitude == null) {
+//         errors.push("Add one field for the latitude");
+//       }
+//       if (panelData.queries[queryIndex].fields.longitude == null) {
+//         errors.push("Add one field for the longitude");
+//       }
+//       break;
+//     }
+
+//     case "sankey": {
+//       if (panelData.queries[queryIndex].fields.source == null) {
+//         errors.push("Add one field for the source");
+//       }
+//       if (panelData.queries[queryIndex].fields.target == null) {
+//         errors.push("Add one field for the target");
+//       }
+//       if (panelData.queries[queryIndex].fields.value == null) {
+//         errors.push("Add one field for the value");
+//       }
+//       break;
+//     }
+//     case "maps": {
+//       if (panelData.queries[queryIndex].fields.name == null) {
+//         errors.push("Add one field for the name");
+//       }
+//       if (panelData.queries[queryIndex].fields.value_for_maps == null) {
+//         errors.push("Add one field for the value");
+//       }
+//       break;
+//     }
+//     default:
+//       break;
+//   }
+
+//   // check if aggregation function is selected or not
+//   if (panelData?.type && !(panelData?.type == "heatmap")) {
+//     const aggregationFunctionError = panelData.queries[
+//       queryIndex
+//     ].fields.y.filter(
+//       (it: any) =>
+//         !it.isDerived &&
+//         it.type == "build" &&
+//         (it.functionName == null || it.functionName == ""),
+//     );
+//     if (
+//       panelData.queries[queryIndex].fields.y.length &&
+//       aggregationFunctionError.length
+//     ) {
+//       errors.push(
+//         ...aggregationFunctionError.map(
+//           (it: any) =>
+//             `${currentYLabel}: ${it.column}: Aggregation function required`,
+//         ),
+//       );
+//     }
+//   }
+
+//   // check if labels are there for y axis items
+//   const labelError = panelData?.queries?.[queryIndex]?.fields?.y?.filter(
+//     (it: any) => it?.label == null || it?.label == "",
+//   );
+//   if (
+//     panelData?.queries?.[queryIndex]?.fields?.y?.length &&
+//     labelError?.length
+//   ) {
+//     errors.push(
+//       ...labelError.map(
+//         (it: any) => `${currentYLabel}: ${it.column}: Label required`,
+//       ),
+//     );
+//   }
+
+//   if (panelData?.queries?.[queryIndex]?.fields?.filter?.conditions?.length) {
+//     // Validate the top-level conditions
+//     validateConditions(
+//       panelData?.queries?.[queryIndex]?.fields?.filter?.conditions,
+//       errors,
+//     );
+//   }
+// };
+
 export function buildSQLQueryFromInput(
   fields: any,
   defaultStream: any,
@@ -896,6 +1038,549 @@ export function addMissingArgs(fields: any): any {
   };
 }
 
+/**
+ * Validates the fields configuration for SQL panels
+ * @param {object} panelData - The panel data object
+ * @param {number} queryIndex - The current query index
+ * @param {string} currentXLabel - Label for X-Axis (for error messages)
+ * @param {string} currentYLabel - Label for Y-Axis (for error messages)
+ * @param {array} errors - Array to collect errors
+ * @param {boolean} isFieldsValidationRequired - Whether field validation is required
+ */
+export const validateSQLPanelFields = (
+  panelData: any,
+  queryIndex: number,
+  currentXLabel: string,
+  currentYLabel: string,
+  errors: string[],
+  isFieldsValidationRequired: boolean = true,
+) => {
+  if (isFieldsValidationRequired) {
+    // Validate fields configuration based on chart type
+    validateChartFieldsConfiguration(
+      panelData?.type,
+      panelData?.queries?.[queryIndex]?.fields ?? {},
+      errors,
+      currentXLabel,
+      currentYLabel,
+    );
+  }
+};
+
+/**
+ * Validates that queries aren't empty
+ * @param queries Array of queries to validate
+ * @param errors Array to collect error messages
+ * @param customMessage Optional custom error message
+ */
+const validateQueriesNotEmpty = (
+  queries: any[] = [],
+  errors: string[],
+  customMessage?: string,
+) => {
+  queries.forEach((q: any, index: number) => {
+    if (q && q?.query === "") {
+      errors.push(customMessage || `Query-${index + 1} is empty`);
+    }
+  });
+};
+
+/**
+ * Validates that a content field isn't empty
+ * @param content Content field to validate
+ * @param errors Array to collect error messages
+ * @param errorMessage Error message to add if validation fails
+ */
+const validateContentNotEmpty = (
+  content: string = "",
+  errors: string[],
+  errorMessage: string,
+) => {
+  if (content.trim() === "") {
+    errors.push(errorMessage);
+  }
+};
+
+/**
+ * Validates panel content based on panel type
+ * @param panel The panel to validate
+ * @param errors Array to collect error messages
+ */
+const validatePanelContentByType = (panel: any, errors: string[]) => {
+  // Check for promQL query type
+  if (panel?.queryType === "promql") {
+    validateQueriesNotEmpty(panel?.queries, errors);
+  }
+
+  // Check by panel type
+  switch (panel?.type) {
+    case "geomap":
+      validateQueriesNotEmpty(panel?.queries, errors);
+      break;
+    case "html":
+      validateContentNotEmpty(
+        panel?.htmlContent,
+        errors,
+        "Please enter your HTML code",
+      );
+      break;
+    case "markdown":
+      validateContentNotEmpty(
+        panel?.markdownContent,
+        errors,
+        "Please enter your markdown code",
+      );
+      break;
+    case "custom_chart":
+      validateQueriesNotEmpty(
+        [panel?.queries?.[0]],
+        errors,
+        "Please enter query for custom chart",
+      );
+      break;
+  }
+};
+
+/**
+ * Validates panel fields without validating stream field existence
+ *
+ * @param panel The panel to validate
+ * @param errors Array to collect error messages
+ */
+const validatePanelFields = (panel: any, errors: string[] = []) => {
+  // Check if panel has promQL query type
+  const isPromQLMode = panel?.queryType === "promql";
+  const currentQueryIndex = 0; // Default to first query
+
+  // Validate panel content based on type
+  validatePanelContentByType(panel, errors);
+
+  if (!isPromQLMode && panel.queries?.[currentQueryIndex]?.fields) {
+    // Validate fields configuration based on chart type
+    validateChartFieldsConfiguration(
+      panel?.type,
+      panel?.queries?.[currentQueryIndex]?.fields ?? {},
+      errors,
+    );
+
+    // Check filter conditions validity
+    if (
+      panel?.queries?.[currentQueryIndex]?.fields?.filter?.conditions?.length
+    ) {
+      // Validate the conditions
+      validateConditions(
+        panel?.queries?.[currentQueryIndex]?.fields?.filter?.conditions ?? [],
+        errors,
+      );
+    }
+  }
+
+  return errors;
+};
+
+/**
+ * Validates an individual panel's content
+ * Only checks basic structure, used by validateDashboardJson
+ *
+ * @param panel The panel object to validate
+ * @returns Array of validation errors
+ */
+const validatePanelContent = (panel: any): string[] => {
+  const errors: string[] = [];
+
+  // Required fields validation
+  if (!panel?.type) {
+    errors.push(`Panel ${panel?.id}: Panel type is required`);
+    return errors;
+  }
+
+  // Check if panel type is in the allowed types list
+  const allowedTypes = [
+    "area",
+    "line",
+    "bar",
+    "scatter",
+    "area-stacked",
+    "donut",
+    "pie",
+    "h-bar",
+    "stacked",
+    "h-stacked",
+    "heatmap",
+    "metric",
+    "gauge",
+    "geomap",
+    "maps",
+    "table",
+    "sankey",
+    "custom_chart",
+    "html",
+    "markdown",
+  ];
+
+  if (!allowedTypes.includes(panel?.type)) {
+    errors.push(
+      `Panel ${panel?.id}: Chart type "${panel?.type}" is not supported.`,
+    );
+  }
+
+  if (!panel?.title) {
+    errors.push(`Panel ${panel?.id}: Panel title is required`);
+  }
+
+  // Layout validation
+  if (!panel?.layout) {
+    errors.push(`Panel ${panel?.id}: Layout is required`);
+  } else {
+    if (typeof panel?.layout?.x !== "number")
+      errors.push(`Panel ${panel?.id}: Layout x must be a number`);
+    if (typeof panel?.layout?.y !== "number")
+      errors.push(`Panel ${panel?.id}: Layout y must be a number`);
+    if (typeof panel?.layout?.w !== "number")
+      errors.push(`Panel ${panel?.id}: Layout w must be a number`);
+    if (typeof panel?.layout?.h !== "number")
+      errors.push(`Panel ${panel?.id}: Layout h must be a number`);
+  }
+
+  return errors;
+};
+
+/**
+ * Validates a dashboard panel's configuration
+ * @param {object} panelData - The panel data object to validate
+ * @param {array} errors - Array to collect errors
+ * @param {boolean} isFieldsValidationRequired - Whether to validate fields (default: true)
+ * @returns {array} An array of validation error messages
+ */
+export const validatePanel = (
+  panelData: any,
+  errors: string[] = [],
+  isFieldsValidationRequired: boolean = true,
+  allStreamFields: any[] = [],
+) => {
+  // Get current query index
+  const currentQueryIndex = panelData?.layout?.currentQueryIndex || 0;
+
+  // Check if panel has promQL query type
+  const isPromQLMode = panelData?.data?.queryType === "promql";
+
+  // Validate panel content based on type
+  validatePanelContentByType(panelData?.data, errors);
+
+  if (isPromQLMode) {
+    // 1. Chart type: only specific chart types are supported for PromQL
+    const allowedChartTypes = [
+      "area",
+      "line",
+      "bar",
+      "scatter",
+      "area-stacked",
+      "metric",
+      "gauge",
+      "html",
+      "markdown",
+    ];
+    if (!allowedChartTypes.includes(panelData?.data?.type)) {
+      errors.push(
+        "Selected chart type is not supported for PromQL. Only line chart is supported.",
+      );
+    }
+
+    // 2. x axis, y axis, filters should be blank for PromQL
+    if (panelData?.data?.queries?.[currentQueryIndex]?.fields?.x?.length > 0) {
+      errors.push(
+        "X-Axis is not supported for PromQL. Remove anything added to the X-Axis.",
+      );
+    }
+
+    if (panelData?.data?.queries?.[currentQueryIndex]?.fields?.y?.length > 0) {
+      errors.push(
+        "Y-Axis is not supported for PromQL. Remove anything added to the Y-Axis.",
+      );
+    }
+
+    if (
+      panelData?.data?.queries?.[currentQueryIndex]?.fields?.filter?.conditions
+        ?.length > 0
+    ) {
+      errors.push(
+        "Filters are not supported for PromQL. Remove anything added to the Filters.",
+      );
+    }
+  } else {
+    // Calculate the x and y axis labels based on chart type
+    const currentXLabel =
+      panelData?.data?.type === "table"
+        ? "First Column"
+        : panelData?.data?.type === "h-bar"
+          ? "Y-Axis"
+          : "X-Axis";
+
+    const currentYLabel =
+      panelData?.data?.type === "table"
+        ? "Other Columns"
+        : panelData?.data?.type === "h-bar"
+          ? "X-Axis"
+          : "Y-Axis";
+
+    // Validate panel fields based on chart type
+    validateSQLPanelFields(
+      panelData?.data,
+      currentQueryIndex,
+      currentXLabel,
+      currentYLabel,
+      errors,
+      isFieldsValidationRequired,
+    );
+
+    // Validate fields against streams if field validation is required
+    if (isFieldsValidationRequired) {
+      const isCustomQueryMode =
+        panelData?.data?.queries?.[currentQueryIndex]?.customQueryMode;
+
+      if (isCustomQueryMode) {
+        validateCustomQueryFields(panelData, currentQueryIndex, errors);
+      } else {
+        validateStreamFields(
+          panelData,
+          currentQueryIndex,
+          errors,
+          allStreamFields,
+        );
+      }
+    }
+  }
+
+  return errors;
+};
+
+/**
+ * Validates fields for custom query mode
+ * @param {object} panelData - The panel data object
+ * @param {number} queryIndex - The current query index
+ * @param {array} errors - Array to collect errors
+ */
+const validateCustomQueryFields = (
+  panelData: any,
+  queryIndex: number,
+  errors: string[],
+) => {
+  const customQueryXFieldError = panelData?.data?.queries?.[
+    queryIndex
+  ]?.fields?.x?.filter(
+    (it: any) =>
+      ![
+        ...panelData?.meta?.stream?.customQueryFields,
+        ...panelData?.meta?.stream?.vrlFunctionFieldList,
+      ].find((i: any) => i.name === it.column),
+  );
+
+  if (customQueryXFieldError.length) {
+    errors.push(
+      ...customQueryXFieldError.map(
+        (it: any) =>
+          `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid`,
+      ),
+    );
+  }
+
+  const customQueryYFieldError = panelData?.data?.queries?.[
+    queryIndex
+  ]?.fields?.y?.filter(
+    (it: any) =>
+      ![
+        ...panelData?.meta?.stream?.customQueryFields,
+        ...panelData?.meta?.stream?.vrlFunctionFieldList,
+      ].find((i: any) => i.name === it.column),
+  );
+
+  if (customQueryYFieldError.length) {
+    errors.push(
+      ...customQueryYFieldError.map(
+        (it: any) =>
+          `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid`,
+      ),
+    );
+  }
+};
+
+/**
+ * Validates fields for stream selection mode
+ * @param {object} panelData - The panel data object
+ * @param {number} queryIndex - The current query index
+ * @param {array} errors - Array to collect errors
+ * @param {array} streamFields - Fields available in the selected stream
+ */
+const validateStreamFields = (
+  panelData: any,
+  queryIndex: number,
+  errors: string[],
+  allStreamFields: any[] = [],
+) => {
+  const customQueryXFieldError = panelData?.data?.queries?.[
+    queryIndex
+  ]?.fields?.x?.filter(
+    (it: any) => !allStreamFields.find((i: any) => i.name == it.column),
+  );
+
+  if (customQueryXFieldError.length) {
+    errors.push(
+      ...customQueryXFieldError.map(
+        (it: any) =>
+          `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid for selected stream`,
+      ),
+    );
+  }
+
+  const customQueryYFieldError = panelData?.data?.queries?.[
+    queryIndex
+  ]?.fields?.y?.filter(
+    (it: any) => !allStreamFields.find((i: any) => i.name == it.column),
+  );
+
+  if (customQueryYFieldError.length) {
+    errors.push(
+      ...customQueryYFieldError.map(
+        (it: any) =>
+          `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid for selected stream`,
+      ),
+    );
+  }
+};
+
+/**
+ * Validates the dashboard JSON structure
+ *
+ * @param dashboardJson The dashboard JSON to validate
+ * @returns Array of validation errors or empty array if valid
+ */
+export const validateDashboardJson = (dashboardJson: any): string[] => {
+  const errors: string[] = [];
+
+  // Basic structure validation
+  if (!dashboardJson) {
+    errors.push("Dashboard JSON is empty or invalid");
+    return errors;
+  }
+
+  // Required fields validation
+  if (!dashboardJson?.dashboardId) {
+    errors.push("Dashboard ID is required");
+  }
+
+  if (!dashboardJson?.title) {
+    errors.push("Dashboard title is required");
+  }
+
+  // Version should be present and match current schema version
+  if (!dashboardJson?.version) {
+    errors.push("Dashboard version is required");
+  } else if (dashboardJson.version !== CURRENT_DASHBOARD_SCHEMA_VERSION) {
+    errors.push(
+      `Dashboard version must be ${CURRENT_DASHBOARD_SCHEMA_VERSION}.`,
+    );
+  }
+
+  // Check tabs
+  if (
+    !Array.isArray(dashboardJson?.tabs) ||
+    dashboardJson?.tabs?.length === 0
+  ) {
+    errors.push("Dashboard must have at least one tab");
+    return errors;
+  }
+
+  // Check for unique tab IDs
+  const tabIds = new Set<string>();
+  for (const tab of dashboardJson?.tabs) {
+    if (!tab?.tabId) {
+      errors.push("Each tab must have a tabId");
+    } else if (tabIds.has(tab?.tabId)) {
+      errors.push(`Duplicate tab ID found: ${tab?.tabId}`);
+    } else {
+      tabIds.add(tab?.tabId);
+    }
+
+    if (!tab?.name) {
+      errors.push(`Tab ${tab?.tabId} must have a name`);
+    }
+  }
+
+  // Check for unique panel IDs across all tabs and validate each panel
+  const panelIds = new Set<string>();
+  const layoutIValues = new Map<string, Set<string>>();
+
+  for (const tab of dashboardJson.tabs) {
+    if (!Array.isArray(tab?.panels)) {
+      errors.push(`Tab ${tab?.tabId} must have a panels array`);
+      continue;
+    }
+
+    // Create a set for layout i values for this tab
+    layoutIValues.set(tab?.tabId, new Set<string>());
+
+    for (const panel of tab.panels) {
+      // Check panel ID uniqueness
+      if (!panel?.id) {
+        errors.push(`Panel in tab ${tab?.tabId} is missing an ID`);
+      } else if (panelIds.has(panel?.id)) {
+        errors.push(`Duplicate panel ID found: ${panel?.id}`);
+      } else {
+        panelIds.add(panel?.id);
+      }
+
+      // Check layout i value uniqueness within the tab
+      if (!panel?.layout || !panel?.layout?.i) {
+        errors.push(`Panel ${panel?.id} is missing a layout.i value`);
+      } else {
+        const tabLayoutValues = layoutIValues.get(tab?.tabId);
+        if (
+          tabLayoutValues &&
+          tabLayoutValues.has(panel?.layout?.i?.toString())
+        ) {
+          errors.push(
+            `Duplicate layout.i value found in tab ${tab?.tabId}: ${panel?.layout?.i}`,
+          );
+        } else if (tabLayoutValues) {
+          tabLayoutValues.add(panel?.layout?.i?.toString());
+        }
+      }
+
+      // Validate basic panel structure
+      const panelStructureErrors = validatePanelContent(panel);
+      errors.push(...panelStructureErrors);
+
+      // Validate panel fields but skip stream validation
+      if (panel?.type !== "markdown" && panel?.type !== "html") {
+        try {
+          const panelDetailErrors: string[] = [];
+
+          // Only validate the panel fields (not stream field existence)
+          validatePanelFields(panel, panelDetailErrors);
+
+          // Add panel identifier to each error
+          const prefixedErrors = panelDetailErrors.map(
+            (error) => `Panel ${panel?.id || "unknown"}: ${error}`,
+          );
+
+          errors.push(...prefixedErrors);
+        } catch (error) {
+          // If validation fails
+          errors.push(
+            `Panel ${panel?.id || "unknown"}: ${
+              error instanceof Error
+                ? error?.message
+                : "Unable to validate panel configuration"
+            }`,
+          );
+        }
+      }
+    }
+  }
+
+  return errors;
+};
+
 // Modify the getContrastColor function to consider theme
 export const getContrastColor = (
   backgroundColor: string,

From 7f271e54f362027a5a42adee0545d52d5352fc47 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Fri, 28 Mar 2025 13:04:50 +0530
Subject: [PATCH 03/61] add: generalize validation function

---
 web/src/composables/useDashboardPanel.ts  | 246 +---------------------
 web/src/utils/dashboard/convertSQLData.ts |   4 +-
 2 files changed, 10 insertions(+), 240 deletions(-)

diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index 163bd436f4b..d8819aa1dc7 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -22,7 +22,7 @@ import { extractFields } from "@/utils/query/sqlUtils";
 import {
   buildSQLQueryFromInput,
   buildSQLJoinsFromInput,
-  validateSQLPanelFields,
+  validatePanel,
 } from "@/utils/dashboard/convertDataIntoUnitValue";
 import useStreams from "./useStreams";
 
@@ -3036,244 +3036,16 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     }
   };
 
-  // so, it is not above common state
-  // expect 2nd arg for x, y and breakdown field validation
-  const validatePanel = (
+  // Replace the existing validatePanel function with a wrapper that calls the generic function
+  const validatePanelWrapper = (
     errors: string[],
     isFieldsValidationRequired: boolean = true,
   ) => {
-    //check each query is empty or not for promql
-    if (dashboardPanelData?.data?.queryType == "promql") {
-      dashboardPanelData.data.queries.map((q: any, index: number) => {
-        if (q && q.query == "") {
-          errors.push(`Query-${index + 1} is empty`);
-        }
-      });
-    }
-
-    //check each query is empty or not for geomap
-    if (dashboardPanelData.data.type == "geomap") {
-      dashboardPanelData.data.queries.map((q: any, index: number) => {
-        if (q && q.query == "") {
-          errors.push(`Query-${index + 1} is empty`);
-        }
-      });
-    }
-
-    //check content should be empty for html
-    if (dashboardPanelData.data.type == "html") {
-      if (dashboardPanelData.data.htmlContent.trim() == "") {
-        errors.push("Please enter your HTML code");
-      }
-    }
-
-    //check content should be empty for html
-    if (dashboardPanelData.data.type == "markdown") {
-      if (dashboardPanelData.data.markdownContent.trim() == "") {
-        errors.push("Please enter your markdown code");
-      }
-    }
-    if (dashboardPanelData.data.type == "custom_chart") {
-      if (dashboardPanelData.data.queries[0].query.trim() == "") {
-        errors.push("Please enter query for custom chart");
-      }
-    }
-
-    if (promqlMode.value) {
-      // 1. chart type: only line chart is supported
-      const allowedChartTypes = [
-        "area",
-        "line",
-        "bar",
-        "scatter",
-        "area-stacked",
-        "metric",
-        "gauge",
-        "html",
-        "markdown",
-      ];
-      if (!allowedChartTypes.includes(dashboardPanelData.data.type)) {
-        errors.push(
-          "Selected chart type is not supported for PromQL. Only line chart is supported.",
-        );
-      }
-
-      // 2. x axis, y axis, filters should be blank
-      if (
-        dashboardPanelData.data.queries[
-          dashboardPanelData.layout.currentQueryIndex
-        ].fields.x.length > 0
-      ) {
-        errors.push(
-          "X-Axis is not supported for PromQL. Remove anything added to the X-Axis.",
-        );
-      }
-
-      if (
-        dashboardPanelData.data.queries[
-          dashboardPanelData.layout.currentQueryIndex
-        ].fields.y.length > 0
-      ) {
-        errors.push(
-          "Y-Axis is not supported for PromQL. Remove anything added to the Y-Axis.",
-        );
-      }
-
-      if (
-        dashboardPanelData.data.queries[
-          dashboardPanelData.layout.currentQueryIndex
-        ].fields.filter.conditions.length > 0
-      ) {
-        errors.push(
-          "Filters are not supported for PromQL. Remove anything added to the Filters.",
-        );
-      }
-
-      // if(!dashboardPanelData.data.query) {
-      //   errors.push("Query should not be empty")
-      // }
-    } else {
-      validateSQLPanelFields(
-        dashboardPanelData.data,
-        dashboardPanelData.layout.currentQueryIndex,
-        currentXLabel.value,
-        currentYLabel.value,
-        errors,
-        isFieldsValidationRequired,
-      );
-
-      if (isFieldsValidationRequired) {
-        // check if field selection is from the custom query fields when the custom query mode is ON
-        if (
-          dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].customQuery
-        ) {
-          // const customQueryXFieldError = dashboardPanelData.data.queries[
-          //   dashboardPanelData.layout.currentQueryIndex
-          // ].fields.x.filter(
-          //   (it: any) =>
-          //     ![
-          //       ...dashboardPanelData.meta.stream.customQueryFields,
-          //       ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
-          //     ].find((i: any) => i.name == it.column),
-          // );
-          //  HERE NEED CHANGES
-          // Now, we can not check field name is there on stream or not
-          // if (customQueryXFieldError.length) {
-          //   errors.push(
-          //     ...customQueryXFieldError.map(
-          //       (it: any) =>
-          //         `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid`,
-          //     ),
-          //   );
-          // }
-
-          const customQueryYFieldError = dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].fields.y.filter(
-            (it: any) =>
-              ![
-                ...dashboardPanelData.meta.stream.customQueryFields,
-                ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
-              ].find((i: any) => i.name == it.column),
-          );
-          if (customQueryYFieldError.length) {
-            errors.push(
-              ...customQueryYFieldError.map(
-                (it: any) =>
-                  `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid`,
-              ),
-            );
-          }
-        } else {
-          // check if field selection is from the selected stream fields when the custom query mode is OFF
-          // const customQueryXFieldError = dashboardPanelData.data.queries[
-          //   dashboardPanelData.layout.currentQueryIndex
-          // ].fields.x.filter(
-          //   (it: any) =>
-          //     ![
-          //       ...selectedStreamFieldsBasedOnUserDefinedSchema.value,
-          //       ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
-          //     ].find((i: any) => i.name == it.column),
-          // );
-          // if (customQueryXFieldError.length) {
-          //   errors.push(
-          //     ...customQueryXFieldError.map(
-          //       (it: any) =>
-          //         `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid for selected stream`,
-          //     ),
-          //   );
-          // }
-          // const customQueryYFieldError = dashboardPanelData.data.queries[
-          //   dashboardPanelData.layout.currentQueryIndex
-          // ].fields.y.filter(
-          //   (it: any) =>
-          //     ![
-          //       ...selectedStreamFieldsBasedOnUserDefinedSchema.value,
-          //       ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
-          //     ].find((i: any) => i.name == it.column),
-          // );
-          // if (customQueryYFieldError.length) {
-          //   errors.push(
-          //     ...customQueryYFieldError.map(
-          //       (it: any) =>
-          //         `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid for selected stream`,
-          //     ),
-          //   );
-          // }
-
-          // Add join schema validation
-          const currentQuery =
-            dashboardPanelData.data.queries[
-              dashboardPanelData.layout.currentQueryIndex
-            ];
-
-          // Validate joins if present
-          if (currentQuery.joins && currentQuery.joins.length > 0) {
-            currentQuery.joins.forEach((join: any, index: number) => {
-              // Validate required join fields
-              if (!join.stream) {
-                errors.push(`Join #${index + 1}: Stream name is required`);
-              }
-              if (!join.joinType) {
-                errors.push(`Join #${index + 1}: Join type is required`);
-              }
-
-              // Validate join conditions
-              if (!join.conditions || join.conditions.length === 0) {
-                errors.push(
-                  `Join #${index + 1}: At least one join condition is required`,
-                );
-              } else {
-                join.conditions.forEach((condition: any, condIndex: number) => {
-                  // Validate left field
-                  if (!condition.leftField?.field) {
-                    errors.push(
-                      `Join #${index + 1}, Condition #${condIndex + 1}: Left field is required`,
-                    );
-                  }
-
-                  // Validate right field
-                  if (!condition.rightField?.field) {
-                    errors.push(
-                      `Join #${index + 1}, Condition #${condIndex + 1}: Right field is required`,
-                    );
-                  }
-
-                  // Validate operation
-                  if (!condition.operation) {
-                    errors.push(
-                      `Join #${index + 1}, Condition #${condIndex + 1}: Operation is required`,
-                    );
-                  }
-                });
-              }
-            });
-          }
-        }
-      }
-    }
+    validatePanel(dashboardPanelData, errors, isFieldsValidationRequired, [
+      ...selectedStreamFieldsBasedOnUserDefinedSchema.value,
+      ...dashboardPanelData.meta.stream.vrlFunctionFieldList,
+      ...dashboardPanelData.meta.stream.customQueryFields,
+    ]);
   };
 
   const VARIABLE_PLACEHOLDER = "substituteValue";
@@ -3569,7 +3341,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     resetAggregationFunction,
     cleanupDraggingFields,
     getDefaultQueries,
-    validatePanel,
+    validatePanel: validatePanelWrapper,
     makeAutoSQLQuery,
     currentXLabel,
     currentYLabel,
diff --git a/web/src/utils/dashboard/convertSQLData.ts b/web/src/utils/dashboard/convertSQLData.ts
index aaef39924e4..14f3f33cfbb 100644
--- a/web/src/utils/dashboard/convertSQLData.ts
+++ b/web/src/utils/dashboard/convertSQLData.ts
@@ -262,9 +262,7 @@ export const convertSQLData = async (
       }
 
       const yAxisValue = item[yAxisKey];
-      if (breakdownValue !== null && breakdownValue !== undefined) {
-        acc[breakdownValue] = (acc[breakdownValue] || 0) + (+yAxisValue || 0);
-      }
+      acc[breakdownValue] = (acc[breakdownValue] || 0) + (+yAxisValue || 0);
       return acc;
     }, {});
 

From 3daa71f08c4ef67265ab1c04bbc0bc8b82667b31 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 31 Mar 2025 11:33:14 +0530
Subject: [PATCH 04/61] fix: use default stream for join query

---
 web/src/composables/useDashboardPanel.ts      |  3 +
 .../dashboard/convertDataIntoUnitValue.ts     | 69 +++++++++----------
 2 files changed, 36 insertions(+), 36 deletions(-)

diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index d8819aa1dc7..5358358a3c9 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -2440,6 +2440,9 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
       ].joins,
+      dashboardPanelData.data.queries[
+        dashboardPanelData.layout.currentQueryIndex
+      ].fields?.stream,
     )}`;
 
     // 3. Filter
diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index 8f1efa3b0bd..d5cd9dc5cbf 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -942,7 +942,10 @@ export function buildSQLQueryFromInput(
     : `${sqlArgs[0]}`;
 }
 
-export function buildSQLJoinsFromInput(joins: any[]): string {
+export function buildSQLJoinsFromInput(
+  joins: any[],
+  defaultStream: any,
+): string {
   if (!joins || joins.length === 0) {
     return ""; // No joins, return empty string
   }
@@ -952,13 +955,7 @@ export function buildSQLJoinsFromInput(joins: any[]): string {
   for (const join of joins) {
     const { stream, streamAlias, joinType, conditions } = join;
 
-    if (
-      !stream ||
-      !streamAlias ||
-      !joinType ||
-      !conditions ||
-      conditions.length === 0
-    ) {
+    if (!stream || !joinType || !conditions || conditions.length === 0) {
       // Invalid join, return empty string
       return "";
     }
@@ -968,18 +965,18 @@ export function buildSQLJoinsFromInput(joins: any[]): string {
     for (const condition of conditions) {
       const { leftField, rightField, operation, logicalOperator } = condition;
 
-      if (!leftField || !rightField || !operation) {
+      if (!leftField?.field || !rightField?.field || !operation) {
         // Invalid condition, return empty string
         return "";
       }
 
       const leftFieldStr = leftField.streamAlias
         ? `${leftField.streamAlias}.${leftField.field}`
-        : leftField.field;
+        : `${defaultStream}.${leftField.field}`;
 
       const rightFieldStr = rightField.streamAlias
         ? `${rightField.streamAlias}.${rightField.field}`
-        : rightField.field;
+        : `${defaultStream}.${rightField.field}`;
 
       joinConditionStrings.push(
         `${leftFieldStr} ${operation} ${rightFieldStr}`,
@@ -991,7 +988,7 @@ export function buildSQLJoinsFromInput(joins: any[]): string {
 
     // Construct the JOIN SQL statement
     joinClauses.push(
-      `${joinType.toUpperCase()} JOIN "${stream}" AS ${streamAlias} ON ${joinConditionsSQL}`,
+      `${joinType.toUpperCase()} JOIN "${stream}" AS ${streamAlias ?? defaultStream} ON ${joinConditionsSQL}`,
     );
   }
 
@@ -1376,12 +1373,12 @@ const validateCustomQueryFields = (
   );
 
   if (customQueryXFieldError.length) {
-    errors.push(
-      ...customQueryXFieldError.map(
-        (it: any) =>
-          `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid`,
-      ),
-    );
+    // errors.push(
+    //   ...customQueryXFieldError.map(
+    //     (it: any) =>
+    //       `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid`,
+    //   ),
+    // );
   }
 
   const customQueryYFieldError = panelData?.data?.queries?.[
@@ -1395,12 +1392,12 @@ const validateCustomQueryFields = (
   );
 
   if (customQueryYFieldError.length) {
-    errors.push(
-      ...customQueryYFieldError.map(
-        (it: any) =>
-          `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid`,
-      ),
-    );
+    // errors.push(
+    //   ...customQueryYFieldError.map(
+    //     (it: any) =>
+    //       `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid`,
+    //   ),
+    // );
   }
 };
 
@@ -1424,12 +1421,12 @@ const validateStreamFields = (
   );
 
   if (customQueryXFieldError.length) {
-    errors.push(
-      ...customQueryXFieldError.map(
-        (it: any) =>
-          `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid for selected stream`,
-      ),
-    );
+    // errors.push(
+    //   ...customQueryXFieldError.map(
+    //     (it: any) =>
+    //       `Please update X-Axis Selection. Current X-Axis field ${it.column} is invalid for selected stream`,
+    //   ),
+    // );
   }
 
   const customQueryYFieldError = panelData?.data?.queries?.[
@@ -1439,12 +1436,12 @@ const validateStreamFields = (
   );
 
   if (customQueryYFieldError.length) {
-    errors.push(
-      ...customQueryYFieldError.map(
-        (it: any) =>
-          `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid for selected stream`,
-      ),
-    );
+    // errors.push(
+    //   ...customQueryYFieldError.map(
+    //     (it: any) =>
+    //       `Please update Y-Axis Selection. Current Y-Axis field ${it.column} is invalid for selected stream`,
+    //   ),
+    // );
   }
 };
 

From 270df7ea94a73f1d061f8829f99abb0ebe4b4dd6 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 1 Apr 2025 11:37:33 +0530
Subject: [PATCH 05/61] fix: arg reset issue

---
 .../dashboards/addPanel/dynamicFunction/SelectFunction.vue  | 2 +-
 web/src/utils/dashboard/convertDataIntoUnitValue.ts         | 6 +++++-
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index dc0a0889094..ec7b6e8ff2c 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -369,7 +369,7 @@ export default {
             // need to consider `min` config for each arg
             Array.from({ length: arg.min ?? 1 }).map(() => ({
               type: arg.type[0],
-              value: arg?.defaultValue,
+              value: arg.type[0] === "field" ? {} : arg?.defaultValue,
             })),
           );
         }
diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index d5cd9dc5cbf..5c160458c41 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -1020,7 +1020,11 @@ export function addMissingArgs(fields: any): any {
       // If the argument is missing, add it
       const argType = argDef.type[0]; // Always take the first type
       const defaultValue =
-        argDef.defaultValue !== undefined ? argDef.defaultValue : "";
+        argDef.defaultValue !== undefined
+          ? argDef.defaultValue
+          : argType === "field"
+            ? {}
+            : "";
 
       updatedArgs.push({
         type: argType,

From 69905a368629f6529587b9d551198c19b4620129 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Wed, 2 Apr 2025 14:30:12 +0530
Subject: [PATCH 06/61] fix: do not use field while query build, if config is
 missing

---
 web/src/composables/useDashboardPanel.ts      | 190 ++++++++----------
 .../dashboard/convertDataIntoUnitValue.ts     |  63 ++++--
 2 files changed, 131 insertions(+), 122 deletions(-)

diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index 5358358a3c9..3d7649955ae 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -2412,22 +2412,28 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       .flat()
       .filter((fieldObj: any) => !fieldObj.isDerived);
 
-    const array = fields.map((field, i) => {
-      let selector = "";
+    const array = fields
+      .map((field, i) => {
+        let selector = "";
 
-      selector += buildSQLQueryFromInput(
-        field,
-        dashboardPanelData.data.queries[
-          dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
-      );
-      // } else {
-      //   selector += `${field?.column}`;
-      // }
+        const fieldExpression = buildSQLQueryFromInput(
+          field,
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields?.stream,
+        );
+
+        // Skip fields that return empty expressions
+        if (!fieldExpression) {
+          return null;
+        }
+
+        selector += fieldExpression;
+        selector += ` as "${field?.alias}"${i == fields.length - 1 ? " " : ", "}`;
+        return selector;
+      })
+      .filter(Boolean); // Remove null entries
 
-      selector += ` as "${field?.alias}"${i == fields.length - 1 ? " " : ", "}`;
-      return selector;
-    });
     query += array?.join("");
 
     // 2. Stream, Join query
@@ -2593,54 +2599,25 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       console.warn("Map value field is required but not provided");
       return "";
     }
-    let query = "";
+    let query = "SELECT ";
 
     if (name && value_for_maps) {
-      // query = `SELECT ${name.column} as "${name.alias}", `;
-      query = `SELECT ${buildSQLQueryFromInput(
+      const sqlField = buildSQLQueryFromInput(
         name,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
         ].fields?.stream,
-      )} as "${name.alias}",  `;
-
-      if (value_for_maps?.functionName) {
-        // switch (value_for_maps.functionName) {
-        //   case "p50":
-        //     query += `approx_percentile_cont(${value_for_maps.column}, 0.5) as ${value_for_maps.alias}`;
-        //     break;
-        //   case "p90":
-        //     query += `approx_percentile_cont(${value_for_maps.column}, 0.9) as ${value_for_maps.alias}`;
-        //     break;
-        //   case "p95":
-        //     query += `approx_percentile_cont(${value_for_maps.column}, 0.95) as ${value_for_maps.alias}`;
-        //     break;
-        //   case "p99":
-        //     query += `approx_percentile_cont(${value_for_maps.column}, 0.99) as ${value_for_maps.alias}`;
-        //     break;
-        //   case "count-distinct":
-        //     query += `count(distinct(${value_for_maps.column})) as "${value_for_maps.alias}"`;
-        //     break;
-        //   default:
-        //     query += `${value_for_maps.functionName}(${value_for_maps.column}) as "${value_for_maps.alias}"`;
-        //     break;
-        // }
-
-        query += `${buildSQLQueryFromInput(
-          value_for_maps,
-          dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].fields?.stream,
-        )} as "${value_for_maps.alias}"`;
-      } else {
-        // query += `${value_for_maps.column} as "${value_for_maps.alias}"`;
-        query += `${buildSQLQueryFromInput(
-          value_for_maps,
-          dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].fields?.stream,
-        )} as "${value_for_maps.alias}"`;
-      }
+      );
+
+      query += sqlField ? `${sqlField} as "${name.alias}",  ` : "";
+
+      const sqlValue = buildSQLQueryFromInput(
+        value_for_maps,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
+      );
+      query += sqlValue ? `${sqlValue} as "${value_for_maps.alias}"` : "";
 
       query += ` FROM "${
         dashboardPanelData.data.queries[
@@ -2722,64 +2699,60 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       ].fields;
 
     if (latitude && !latitude.isDerived && longitude && !longitude.isDerived) {
-      query += `SELECT ${buildSQLQueryFromInput(
+      const sqlLatitude = buildSQLQueryFromInput(
         latitude,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
         ].fields?.stream,
-      )} as ${latitude.alias}, ${buildSQLQueryFromInput(
+      );
+      const sqlLongitude = buildSQLQueryFromInput(
         longitude,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
         ].fields?.stream,
-      )} as ${longitude.alias}`;
+      );
+      query =
+        sqlLatitude && sqlLongitude
+          ? `SELECT ${sqlLatitude} as "${latitude.alias}", ${sqlLongitude} as "${longitude.alias}"`
+          : sqlLatitude
+            ? `SELECT ${sqlLatitude} as "${latitude.alias}"`
+            : sqlLongitude
+              ? `SELECT ${sqlLongitude} as "${longitude.alias}"`
+              : `SELECT `;
       // query += `SELECT ${latitude.column} as ${latitude.alias}, ${longitude.column} as ${longitude.alias}`;
     } else if (latitude && !latitude.isDerived) {
-      query += `SELECT ${buildSQLQueryFromInput(
+      const sqlLatitude = buildSQLQueryFromInput(
         latitude,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
         ].fields?.stream,
-      )} as ${latitude.alias}`;
+      );
+      query = sqlLatitude
+        ? `SELECT ${sqlLatitude} as "${latitude.alias}"`
+        : `SELECT `;
       // query += `SELECT ${latitude.column} as ${latitude.alias}`;
     } else if (longitude && !longitude.isDerived) {
-      query += `SELECT ${buildSQLQueryFromInput(
+      const sqlLongitude = buildSQLQueryFromInput(
         longitude,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
         ].fields?.stream,
-      )} as ${longitude.alias}`;
+      );
+      query = sqlLongitude
+        ? `SELECT ${sqlLongitude} as "${longitude.alias}"`
+        : `SELECT `;
       // query += `SELECT ${longitude.column} as ${longitude.alias}`;
     }
 
     if (query) {
       if (weight && !weight.isDerived) {
-        // switch (weight?.functionName) {
-        //   case "p50":
-        //     query += `, approx_percentile_cont(${weight.column}, 0.5) as ${weight.alias}`;
-        //     break;
-        //   case "p90":
-        //     query += `, approx_percentile_cont(${weight.column}, 0.9) as ${weight.alias}`;
-        //     break;
-        //   case "p95":
-        //     query += `, approx_percentile_cont(${weight.column}, 0.95) as ${weight.alias}`;
-        //     break;
-        //   case "p99":
-        //     query += `, approx_percentile_cont(${weight.column}, 0.99) as ${weight.alias}`;
-        //     break;
-        //   case "count-distinct":
-        //     query += `, count(distinct(${weight.column})) as ${weight.alias}`;
-        //     break;
-        //   default:
-        //     query += `, ${weight.functionName}(${weight.column}) as ${weight.alias}`;
-        //     break;
-        // }
-        query += `, ${buildSQLQueryFromInput(
+        const sqlWeight = buildSQLQueryFromInput(
           weight,
           dashboardPanelData.data.queries[
             dashboardPanelData.layout.currentQueryIndex
           ].fields?.stream,
-        )} as ${weight.alias}`;
+        );
+        query += sqlWeight ? `, ${sqlWeight} as "${weight.alias}"` : `, `;
       }
       query += ` FROM "${
         dashboardPanelData.data.queries[
@@ -2878,26 +2851,29 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
 
     if (source && !source.isDerived) {
       // selectFields.push(`${source.column} as ${source.alias}`);
-      selectFields.push(
-        `${buildSQLQueryFromInput(
-          source,
-          dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].fields?.stream,
-        )} as ${source.alias}`,
+      const sqlSource = buildSQLQueryFromInput(
+        source,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
       );
+
+      if (sqlSource) {
+        selectFields.push(`${sqlSource} as ${source.alias}`);
+      }
     }
 
     if (target && !target.isDerived) {
       // selectFields.push(`${target.column} as ${target.alias}`);
-      selectFields.push(
-        `${buildSQLQueryFromInput(
-          target,
-          dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].fields?.stream,
-        )} as ${target.alias}`,
+      const sqlTarget = buildSQLQueryFromInput(
+        target,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
       );
+      if (sqlTarget) {
+        selectFields.push(`${sqlTarget} as ${target.alias}`);
+      }
     }
 
     if (value && !value.isDerived) {
@@ -2928,14 +2904,16 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       //     );
       //     break;
       // }
-      selectFields.push(
-        `${buildSQLQueryFromInput(
-          value,
-          dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].fields?.stream,
-        )} as ${value.alias}`,
+      const sqlValue = buildSQLQueryFromInput(
+        value,
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].fields?.stream,
       );
+      if (sqlValue) {
+        selectFields.push(`${sqlValue} as "${value.alias}"`);
+      }
+      // selectFields.push(
     }
 
     // Adding the selected fields to the query
diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index 5c160458c41..020d2052e1d 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -848,22 +848,33 @@ export function buildSQLQueryFromInput(
   fields: any,
   defaultStream: any,
 ): string {
+  // Handle undefined or null fields
+  if (!fields) {
+    return "";
+  }
+
   // if fields type is raw, return rawQuery
   if (fields.type === "raw") {
     return `${fields?.rawQuery ?? ""}`;
   }
 
-  // Extract functionName and args from the input
-  const { functionName, args } = fields;
+  // Extract functionName and args from the input with fallbacks
+  const functionName = fields.functionName;
+  const args = Array.isArray(fields.args) ? fields.args : [];
+
+  // If no functionName is provided, return empty string
+  if (!functionName && functionName !== null) {
+    return "";
+  }
 
   // Find the function definition based on the functionName
   const selectedFunction = functionValidation.find(
     (fn: any) => fn.functionName === functionName,
   );
 
-  // If the function is not found, throw an error
+  // If the function is not found, return empty string instead of throwing
   if (!selectedFunction) {
-    throw new Error(`Function "${functionName}" is not supported.`);
+    return "";
   }
 
   // Validate the provided args against the function's argument definitions
@@ -875,6 +886,11 @@ export function buildSQLQueryFromInput(
 
   const sqlArgs = [];
   for (let i = 0; i < args.length; i++) {
+    // Skip if arg is undefined or null
+    if (!args[i]) {
+      continue;
+    }
+
     const argValue = args[i]?.value;
     const argType = args[i]?.type;
 
@@ -884,6 +900,10 @@ export function buildSQLQueryFromInput(
 
     // Add the argument to the SQL query
     if (argType === "field") {
+      // Handle case where field object might be incomplete
+      if (!argValue.field) {
+        continue;
+      }
       // If the argument type is "field", do not wrap with quotes
       sqlArgs.push(
         argValue.streamAlias
@@ -906,19 +926,30 @@ export function buildSQLQueryFromInput(
       sqlArgs.push(argValue);
     } else if (argType === "function") {
       // Recursively build the SQL query for the nested function
-      const nestedFunctionQuery = buildSQLQueryFromInput(
-        argValue,
-        defaultStream,
-      );
-      sqlArgs.push(nestedFunctionQuery);
+      try {
+        const nestedFunctionQuery = buildSQLQueryFromInput(
+          argValue,
+          defaultStream,
+        );
+        if (nestedFunctionQuery) {
+          sqlArgs.push(nestedFunctionQuery);
+        }
+      } catch (error) {
+        // If nested function fails, just skip this argument
+        continue;
+      }
     } else {
-      throw new Error(
-        `Unsupported argument type "${argType}" for argument at position ${i + 1}.`,
-      );
+      // Skip unsupported argument types instead of throwing
+      continue;
     }
   }
 
-  // TODO: add aggregator
+  // If no valid arguments were found, return minimal query
+  if (sqlArgs.length === 0 && argsDefinition.length > 0) {
+    return "";
+  }
+
+  // Special handling for specific functions
   switch (functionName) {
     case "count-distinct":
       return `count(distinct(${sqlArgs.join(", ")}))`;
@@ -930,8 +961,6 @@ export function buildSQLQueryFromInput(
       return `approx_percentile_cont(${sqlArgs.join(", ")}, 0.95)`;
     case "p99":
       return `approx_percentile_cont(${sqlArgs.join(", ")}, 0.99)`;
-    case "p50":
-      return `approx_percentile_cont(${sqlArgs.join(", ")}, 0.5)`;
   }
 
   // Construct the SQL query string
@@ -939,7 +968,9 @@ export function buildSQLQueryFromInput(
   // else return the first argument(if function is null, always only one argument will be there)
   return functionName
     ? `${functionName}(${sqlArgs.join(", ")})`
-    : `${sqlArgs[0]}`;
+    : sqlArgs.length > 0
+      ? `${sqlArgs[0]}`
+      : "";
 }
 
 export function buildSQLJoinsFromInput(

From 59754ebd0d7bfe2fd475ceab05fea9142aa541ea Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Wed, 2 Apr 2025 16:12:22 +0530
Subject: [PATCH 07/61] fix: stream field display value issue

---
 web/src/components/dashboards/addPanel/StreamFieldSelect.vue | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
index 20d227a9e8b..e3855e09212 100644
--- a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
+++ b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
@@ -5,10 +5,9 @@
         filled
         v-model="internalModel"
         :options="options"
-        label="Select a Field"
         option-label="name"
         option-value="name"
-        :display-value="internalModel?.field"
+        :display-value="internalModel?.field ?? 'Select a Field'"
         map-options
       >
         <template v-slot:option="scope">

From af23dc28219e10db40528fb7292658269ccea274 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 7 Apr 2025 16:17:40 +0530
Subject: [PATCH 08/61] add: validate selected fields config

---
 .../dynamicFunction/DynamicFunctionPopUp.vue  |   7 +-
 .../dynamicFunction/functionValidation.json   |   2 +-
 .../dashboard/convertDataIntoUnitValue.ts     | 137 ++++++++++++++++++
 3 files changed, 144 insertions(+), 2 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index 8827bf364ad..ca9a5f67b01 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -67,7 +67,12 @@ export default {
         fields.value.rawQuery = "";
       } else {
         fields.value.functionName = null;
-        fields.value.args = [];
+        fields.value.args = [
+          {
+            type: "field",
+            value: {},
+          },
+        ];
       }
     };
 
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
index e4aabd5fd4b..e38c45d9305 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
@@ -29,7 +29,7 @@
                     "function"
                 ],
                 "defaultValue": null,
-                "required": true
+                "required": false
             }
         ]
     },
diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index 020d2052e1d..bfe611489a5 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -623,6 +623,143 @@ const validateChartFieldsConfiguration = (
     default:
       break;
   }
+
+  // need to validate all the fields based on the selected aggregation function
+  // get all the fields that are not derived and type is build
+  const aggregationFunctionError = [
+    ...fields?.y,
+    ...fields?.x,
+    ...fields?.breakdown,
+    ...fields?.z,
+    fields?.source,
+    fields?.target,
+    fields?.value,
+    fields?.name,
+    fields?.value_for_maps,
+    fields?.latitude,
+    fields?.longitude,
+  ].filter((it: any) => it && !it.isDerived && it.type == "build");
+
+  if (aggregationFunctionError.length) {
+    //  loop on each fields config
+    // compare with function validation schema
+    // if validation fails, push error
+    aggregationFunctionError.forEach((it: any) => {
+      // get the selected function schema
+      const selectedFunction: any = functionValidation.find(
+        (fn: any) => fn.functionName === it.functionName,
+      );
+
+      // if function is not found, push error
+      if (!selectedFunction) {
+        errors.push(`${it.alias || "Field"}: Invalid aggregation function`);
+        return; // Skip further validation if function is invalid
+      }
+
+      //  check if args are valid based on selected function schema
+      const args = it.args;
+      const argsDefinition = selectedFunction.args;
+
+      // NOTE: Need to consider the case where there can be optional arguments or there can be N number of arguments
+      // WARNING: This needs to be test properly
+      // Proper validation of arguments
+      const allowAddArgAtValue = selectedFunction.allowAddArgAt;
+      const hasVariableArgs = !!allowAddArgAtValue;
+
+      // Parse the allowAddArgAt value to determine variable argument position
+      let variableArgPosition = -1;
+      if (hasVariableArgs) {
+        if (allowAddArgAtValue === "n") {
+          variableArgPosition = 0; // All arguments can be variable
+        } else if (allowAddArgAtValue.startsWith("n-")) {
+          // Format is "n-1", "n-2", etc.
+          const offset = parseInt(allowAddArgAtValue.substring(2));
+          variableArgPosition = argsDefinition.length - offset;
+        }
+      }
+
+      // Special handling for functions with min requirements
+      // Find the argDefinition that has the min property
+      const minArgDef = argsDefinition.find((def: any) => "min" in def);
+      const minPosition = minArgDef ? argsDefinition.indexOf(minArgDef) : -1;
+
+      // If min is specified and position is valid, check the requirement
+      if (minArgDef && minPosition !== -1) {
+        // For variable args, we count all arguments from the variable position
+        const relevantArgsCount =
+          hasVariableArgs && variableArgPosition <= minPosition
+            ? args.length - variableArgPosition + 1 // +1 because we count the variable position itself
+            : args.length;
+
+        if (relevantArgsCount < minArgDef.min) {
+          errors.push(
+            `${it.alias || "Field"}: Requires at least ${minArgDef.min} arguments`,
+          );
+        }
+      }
+
+      // Validate all provided arguments have correct types
+      args.forEach((arg: any, index: number) => {
+        if (!arg) return; // Skip undefined args
+
+        // Determine which arg definition to use for validation
+        let argDefIndex = index;
+
+        // For variable arguments
+        if (hasVariableArgs && index >= variableArgPosition) {
+          // Use the definition at the variable position
+          argDefIndex = variableArgPosition;
+        }
+
+        // Handle out-of-bounds index for non-variable args or unknown formats
+        if (argDefIndex >= argsDefinition.length) {
+          if (!hasVariableArgs) {
+            errors.push(`${it.alias || "Field"}: Too many arguments provided`);
+            return;
+          }
+          // Default to the variable argument definition
+          argDefIndex = variableArgPosition;
+        }
+
+        const allowedTypes = argsDefinition[argDefIndex].type;
+
+        // Check if current argument type is among the allowed types
+        if (arg && !allowedTypes.includes(arg.type)) {
+          errors.push(
+            `${it.alias || "Field"}: Argument ${index + 1} has invalid type (expected: ${allowedTypes.join(" or ")})`,
+          );
+          return;
+        }
+
+        // TODO: Need to handle all other types of arguments
+        // Additional validation for field type arguments
+        if (arg.type === "field") {
+          // Validate field value structure
+          if (
+            !arg.value ||
+            typeof arg.value !== "object" ||
+            !("field" in arg.value)
+          ) {
+            errors.push(
+              `${it.alias || "Field"}: Argument ${index + 1} is a field but haven't selected any field`,
+            );
+          }
+        }
+      });
+
+      // Check for missing required arguments
+      argsDefinition.forEach((argDef: any, index: number) => {
+        // Skip checking variable arg positions except the first instance
+        if (hasVariableArgs && index > variableArgPosition) return;
+
+        if (argDef.required && (index >= args.length || !args[index])) {
+          errors.push(
+            `${it.alias || "Field"}: Missing required argument at position ${index + 1}`,
+          );
+        }
+      });
+    });
+  }
 };
 
 // export const validateSQLPanelFields = (

From f666aae6c88426ba40d608d6fe6198ac1da6118e Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Wed, 9 Apr 2025 17:00:34 +0530
Subject: [PATCH 09/61] fix: css issues for join pop up

---
 .../dashboards/addPanel/StreamFieldSelect.vue |  5 ++-
 .../dynamicFunction/SelectFunction.vue        |  2 +
 .../Dashboards/addPanel/AddJoinPopUp.vue      | 40 ++-----------------
 3 files changed, 9 insertions(+), 38 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
index e3855e09212..d67399d5ea2 100644
--- a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
+++ b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
@@ -1,6 +1,6 @@
 <template>
-  <div class="q-pa-md">
-    <div class="q-gutter-md">
+  <div>
+    <div>
       <q-select
         filled
         v-model="internalModel"
@@ -9,6 +9,7 @@
         option-value="name"
         :display-value="internalModel?.field ?? 'Select a Field'"
         map-options
+        dense
       >
         <template v-slot:option="scope">
           <q-expansion-item
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index ec7b6e8ff2c..0c821408c00 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -93,6 +93,7 @@
             placeholder="Enter string"
             :required="isRequired(fields.functionName, argIndex)"
             class="tw-w-52"
+            dense
           />
 
           <q-input
@@ -102,6 +103,7 @@
             placeholder="Enter number"
             :required="isRequired(fields.functionName, argIndex)"
             class="tw-w-52"
+            dense
           />
 
           <SelectFunction
diff --git a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
index 6472140a211..7e0d22bce7b 100644
--- a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
+++ b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
@@ -15,47 +15,41 @@
 
 <!-- eslint-disable vue/no-unused-components -->
 <template>
-  <div class="o2-input" data-test="dashboard-join-pop-up">
+  <div data-test="dashboard-join-pop-up" style="width: 500px">
     <div>
       <div
         class="tw-flex tw-flex-row tw-w-full tw-gap-10 items-center q-table__title q-mr-md"
       >
         <q-select
-          behavior="menu"
-          borderless
           dense
-          outlined
           filled
           v-model="mainStream"
           :options="[]"
           :disable="true"
           label="Joining Stream"
-          class="tw-w-52"
-          stack-label
+          class="q-py-md tw-w-1/3"
           data-test="dashboard-config-panel-join-from"
         />
 
         <q-select
-          outlined
           filled
+          dense
           v-model="modelValue.joinType"
           :options="joinOptions"
           label="With Join Type"
           class="q-py-md tw-w-1/3"
-          stack-label
           data-test="dashboard-config-panel-join-type"
         />
 
         <q-select
-          outlined
           filled
+          dense
           v-model="modelValue.stream"
           :options="streamOptions"
           emit-value
           map-options
           label="On Stream"
           class="q-py-md tw-w-1/3"
-          stack-label
           data-test="dashboard-config-panel-join-to"
         />
       </div>
@@ -317,29 +311,3 @@ export default defineComponent({
   },
 });
 </script>
-
-<style lang="scss" scoped>
-.selected {
-  background-color: var(--q-primary) !important;
-  font-weight: bold;
-  color: white;
-}
-.dropdownDiv {
-  display: flex;
-  align-items: center;
-  margin: 10px 0px;
-  width: 100%;
-}
-
-.dropdownLabel {
-  width: 150px;
-}
-
-.dropdown {
-  min-width: 100%;
-}
-
-:deep(.no-case .q-field__native > :first-child) {
-  text-transform: none !important;
-}
-</style>

From e3c4d75f64e6c1fab5ad33859e2126140beff8aa Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 10 Apr 2025 17:59:32 +0530
Subject: [PATCH 10/61] fix: query generation issue

---
 .../dynamicFunction/RawQueryBuilder.vue       |  1 +
 .../dynamicFunction/SelectFunction.vue        | 24 +--------
 web/src/composables/useDashboardPanel.ts      | 41 +++++++++++---
 .../Dashboards/addPanel/AddCondition.vue      | 54 +++++++++++++++----
 4 files changed, 82 insertions(+), 38 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue b/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
index ff309e762b1..5aaaf30cf3c 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
@@ -15,6 +15,7 @@
       bg-color="input-bg"
       class="q-py-md showLabelOnTop"
       stack-label
+      disable
       filled
       dense
       label-slot
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index 0c821408c00..b511df08018 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -176,7 +176,7 @@ export default {
       "dashboardPanelDataPageKey",
       "dashboard",
     );
-    const { dashboardPanelData, selectedStreamFieldsBasedOnUserDefinedSchema } =
+    const { dashboardPanelData, selectedStreamFieldsBasedOnUserDefinedSchema, getAllSelectedStreams } =
       useDashboardPanelData(dashboardPanelDataPageKey);
 
     // const schemaOptions = computed(() =>
@@ -398,27 +398,7 @@ export default {
       }
     };
 
-    const getAllSelectedStreams = () => {
-      // get all streams
-      // mainStream + all join streams
-
-      return [
-        {
-          stream:
-            dashboardPanelData.data.queries[
-              dashboardPanelData.layout.currentQueryIndex
-            ].fields.stream,
-        },
-        ...((
-          dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ]?.joins ?? []
-        )?.map((join: any) => ({
-          stream: join.stream,
-          streamAlias: join.streamAlias,
-        })) ?? []),
-      ];
-    };
+  
 
     return {
       fields,
diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index 3d7649955ae..08629841fb5 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -370,6 +370,28 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     dashboardPanelData.meta.streamFields.groupedFields = groupedFields;
   };
 
+  const getAllSelectedStreams = () => {
+    // get all streams
+    // mainStream + all join streams
+
+    return [
+      {
+        stream:
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields.stream,
+      },
+      ...((
+        dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ]?.joins ?? []
+      )?.map((join: any) => ({
+        stream: join.stream,
+        streamAlias: join.streamAlias,
+      })) ?? []),
+    ];
+  };
+
   const isAddXAxisNotAllowed = computed((e: any) => {
     switch (dashboardPanelData.data.type) {
       case "pie":
@@ -1507,13 +1529,18 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     }
   };
 
-  const loadFilterItem = (name: any) => {
+  const loadFilterItem = ({ streamAlias, field: name }: any) => {
+    // get stream name from streamAlias
+    const streamName =
+      getAllSelectedStreams().find((it: any) => it.streamAlias == streamAlias)
+        ?.stream ??
+      dashboardPanelData.data.queries[
+        dashboardPanelData.layout.currentQueryIndex
+      ].fields.stream;
+
     StreamService.fieldValues({
       org_identifier: store.state.selectedOrganization.identifier,
-      stream_name:
-        dashboardPanelData.data.queries[
-          dashboardPanelData.layout.currentQueryIndex
-        ].fields.stream,
+      stream_name: streamName,
       start_time: new Date(
         dashboardPanelData?.meta?.dateTime?.["start_time"]?.toISOString(),
       ).getTime(),
@@ -1536,6 +1563,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         }
         dashboardPanelData.meta.filterValue.push({
           column: name,
+          streamName: streamName,
           value: res?.data?.hits?.[0]?.values
             .map((it: any) => it.zo_sql_key)
             .filter((it: any) => it)
@@ -2996,7 +3024,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         dashboardPanelData.layout.currentQueryIndex
       ].customQuery
     ) {
-      if (!dashboardPanelData.meta.stream.selectedStreamFields?.length) {
+      if (!dashboardPanelData?.meta?.streamFields?.groupedFields?.length) {
         return;
       }
 
@@ -3329,6 +3357,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     generateLabelFromName,
     selectedStreamFieldsBasedOnUserDefinedSchema,
     updateGroupedFields,
+    getAllSelectedStreams,
   };
 };
 export default useDashboardPanelData;
diff --git a/web/src/views/Dashboards/addPanel/AddCondition.vue b/web/src/views/Dashboards/addPanel/AddCondition.vue
index 23697b4bf07..4284e473c0f 100644
--- a/web/src/views/Dashboards/addPanel/AddCondition.vue
+++ b/web/src/views/Dashboards/addPanel/AddCondition.vue
@@ -24,12 +24,10 @@
         class="q-pl-sm"
         :data-test="`dashboard-add-condition-label-${conditionIndex}-${computedLabel(condition)}`"
       >
-        <q-menu
-          class="q-pa-md"
-          @show="(e: any) => loadFilterItem(condition.column)"
-        >
+        <!-- @show="(e: any) => loadFilterItem(condition.column)" -->
+        <q-menu class="q-pa-md">
           <div style="display: flex">
-            <q-select
+            <!-- <q-select
               v-model="condition.column"
               :options="filteredSchemaOptions"
               label="Filters on Field"
@@ -45,6 +43,11 @@
               emit-value
               @filter="filterStreamFn"
               @update:model-value="handleFieldChange"
+              /> -->
+            <StreamFieldSelect
+              class="tw-w-full"
+              :streams="getAllSelectedStreams()"
+              v-model="condition.column"
               :data-test="`dashboard-add-condition-column-${conditionIndex}}`"
             />
             <q-btn
@@ -177,17 +180,20 @@
 </template>
 
 <script lang="ts">
-import { defineComponent, ref, computed, toRef, watch } from "vue";
+import { defineComponent, ref, computed, toRef, watch, inject } from "vue";
 import CommonAutoComplete from "@/components/dashboards/addPanel/CommonAutoComplete.vue";
 import SanitizedHtmlRenderer from "@/components/SanitizedHtmlRenderer.vue";
 import { useI18n } from "vue-i18n";
 import { useSelectAutoComplete } from "../../../composables/useSelectAutocomplete";
+import useDashboardPanelData from "@/composables/useDashboardPanel";
+import StreamFieldSelect from "@/components/dashboards/addPanel/StreamFieldSelect.vue";
 
 export default defineComponent({
   name: "AddCondition",
   components: {
     CommonAutoComplete,
     SanitizedHtmlRenderer,
+    StreamFieldSelect,
   },
   props: [
     "condition",
@@ -199,16 +205,36 @@ export default defineComponent({
     "conditionIndex",
   ],
   setup(props, { emit }) {
+    const dashboardPanelDataPageKey = inject(
+      "dashboardPanelDataPageKey",
+      "dashboard",
+    );
+    const { getAllSelectedStreams } = useDashboardPanelData(
+      dashboardPanelDataPageKey,
+    );
     const { t } = useI18n();
     const searchTerm = ref("");
     const { filterFn: filterStreamFn, filteredOptions: filteredSchemaOptions } =
       useSelectAutoComplete(toRef(props, "schemaOptions"), "label");
 
     const filteredListOptions = computed(() => {
+      // get stream name from streamAlias
+      const streamName =
+        getAllSelectedStreams().find(
+          (it: any) => it.streamAlias == props?.condition?.column?.streamAlias,
+        )?.stream ??
+        props.dashboardPanelData.data.queries[
+          props.dashboardPanelData.layout.currentQueryIndex
+        ].fields.stream;
+
       const options = props.dashboardPanelData.meta.filterValue
-        .find((it: any) => it.column == props.condition.column)
-        ?.value.filter((option: any) =>
-          option.toLowerCase().includes(searchTerm.value.toLowerCase()),
+        .find(
+          (it: any) =>
+            it.column == props?.condition?.column?.field &&
+            it?.streamName == streamName,
+        )
+        ?.value?.filter((option: any) =>
+          option?.toLowerCase().includes(searchTerm.value.toLowerCase()),
         );
 
       // Sort options alphabetically
@@ -299,7 +325,7 @@ export default defineComponent({
     };
 
     const removeColumnName = () => {
-      props.condition.column = "";
+      props.condition.column = {};
     };
 
     watch(
@@ -311,6 +337,13 @@ export default defineComponent({
       },
     );
 
+    watch(
+      () => props.condition.column,
+      () => {
+        props.loadFilterItem(props.condition.column);
+      },
+    );
+
     return {
       operators,
       computedLabel,
@@ -323,6 +356,7 @@ export default defineComponent({
       removeColumnName,
       filteredSchemaOptions,
       sortedFilteredListOptions: filteredListOptions,
+      getAllSelectedStreams,
     };
   },
 });

From c98062e3847343562001eecdc8843d29f6f96b52 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Fri, 11 Apr 2025 17:29:07 +0530
Subject: [PATCH 11/61] add: filters old object migration

---
 .../addPanel/DashboardGeoMapsQueryBuilder.vue |   2 +-
 .../addPanel/DashboardMapsQueryBuilder.vue    |   2 +-
 .../addPanel/DashboardQueryBuilder.vue        |   2 +-
 .../addPanel/DashboardSankeyChartBuilder.vue  |   2 +-
 .../dashboards/addPanel/FieldList.vue         |   8 +-
 web/src/composables/useDashboardPanel.ts      | 316 ++++++++++--------
 .../convertDashboardSchemaVersion.ts          |  39 +++
 .../Dashboards/addPanel/AddCondition.vue      |  86 ++---
 8 files changed, 270 insertions(+), 187 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
index 31e46c85ba8..0c16e5dd4be 100644
--- a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
@@ -595,7 +595,7 @@ export default defineComponent({
             addWeight(dragElement);
             break;
           case "f":
-            addFilteredItem(dragElement?.name);
+            addFilteredItem(dragElement);
             break;
         }
       } else {
diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index 05bcf72d1ba..1e4eb61dfb7 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -469,7 +469,7 @@ export default defineComponent({
             addMapValue(dragElement);
             break;
           case "f":
-            addFilteredItem(dragElement?.name);
+            addFilteredItem(dragElement);
             break;
         }
       } else {
diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index b9957abb1b0..989f9f977d4 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -1276,7 +1276,7 @@ export default defineComponent({
               addBreakDownAxisItem(dragElement);
               break;
             case "f":
-              addFilteredItem(dragElement?.name);
+              addFilteredItem(dragElement);
               break;
           }
           reorderItems(
diff --git a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
index d655167ad38..067329a133b 100644
--- a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
@@ -602,7 +602,7 @@ export default defineComponent({
             addValue(dragElement);
             break;
           case "f":
-            addFilteredItem(dragElement?.name);
+            addFilteredItem(dragElement);
             break;
         }
       } else {
diff --git a/web/src/components/dashboards/addPanel/FieldList.vue b/web/src/components/dashboards/addPanel/FieldList.vue
index 47a4b86b72c..9b157dba0d8 100644
--- a/web/src/components/dashboards/addPanel/FieldList.vue
+++ b/web/src/components/dashboards/addPanel/FieldList.vue
@@ -320,7 +320,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                       )
                     "
                     padding="sm"
-                    @click="addFilteredItem(props.row.name)"
+                    @click="addFilteredItem(props.row)"
                     data-test="dashboard-add-filter-data"
                   >
                     <div>+F</div>
@@ -388,7 +388,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                       )
                     "
                     padding="sm"
-                    @click="addFilteredItem(props.row.name)"
+                    @click="addFilteredItem(props.row)"
                     data-test="dashboard-add-filter-data"
                   >
                     <div>+F</div>
@@ -434,7 +434,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                   </q-btn>
                   <q-btn
                     padding="sm"
-                    @click="addFilteredItem(props.row.name)"
+                    @click="addFilteredItem(props.row)"
                     data-test="dashboard-add-filter-data"
                   >
                     <div>+F</div>
@@ -503,7 +503,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                       )
                     "
                     padding="sm"
-                    @click="addFilteredItem(props.row.name)"
+                    @click="addFilteredItem(props.row)"
                     data-test="dashboard-add-filter-data"
                   >
                     <div>+F</div>
diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index 08629841fb5..be5d531aa89 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -1462,7 +1462,10 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     ].fields.value = null;
   };
 
-  const addFilteredItem = async (name: string) => {
+  const addFilteredItem = async (filterItem: {
+    streamAlias: string;
+    name: string;
+  }) => {
     const currentQuery =
       dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
@@ -1481,7 +1484,10 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     currentQuery.fields.filter.conditions.push({
       type: "list",
       values: [],
-      column: name,
+      column: {
+        field: filterItem.name,
+        streamAlias: filterItem.streamAlias,
+      },
       operator: null,
       value: null,
       logicalOperator: "AND",
@@ -1503,14 +1509,17 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         end_time: new Date(
           dashboardPanelData.meta.dateTime["end_time"].toISOString(),
         ).getTime(),
-        fields: [name],
+        fields: [filterItem.name],
         size: 100,
         type: currentQuery.fields.stream_type,
         no_count: true,
       });
 
       dashboardPanelData.meta.filterValue.push({
-        column: name,
+        column: {
+          field: filterItem.name,
+          streamAlias: filterItem.streamAlias,
+        },
         value: res?.data?.hits?.[0]?.values
           .map((it: any) => it.zo_sql_key)
           .filter((it: any) => it),
@@ -1529,11 +1538,15 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     }
   };
 
-  const loadFilterItem = ({ streamAlias, field: name }: any) => {
+  const loadFilterItem = (filterItem: {
+    streamAlias: string;
+    field: string;
+  }) => {
     // get stream name from streamAlias
     const streamName =
-      getAllSelectedStreams().find((it: any) => it.streamAlias == streamAlias)
-        ?.stream ??
+      getAllSelectedStreams().find(
+        (it: any) => it.streamAlias == filterItem.streamAlias,
+      )?.stream ??
       dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
       ].fields.stream;
@@ -1547,7 +1560,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       end_time: new Date(
         dashboardPanelData?.meta?.dateTime?.["end_time"]?.toISOString(),
       ).getTime(),
-      fields: [name],
+      fields: [filterItem.field],
       size: 100,
       type: dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
@@ -1556,13 +1569,15 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     })
       .then((res: any) => {
         const find = dashboardPanelData.meta.filterValue.findIndex(
-          (it: any) => it.column == name,
+          (it: any) =>
+            it.column.field === filterItem.field &&
+            it.column.streamAlias === filterItem.streamAlias,
         );
         if (find >= 0) {
           dashboardPanelData.meta.filterValue.splice(find, 1);
         }
         dashboardPanelData.meta.filterValue.push({
-          column: name,
+          column: filterItem,
           streamName: streamName,
           value: res?.data?.hits?.[0]?.values
             .map((it: any) => it.zo_sql_key)
@@ -2175,10 +2190,25 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
    * @returns the formatted value
    */
 
-  const formatValue = (value: any, column: string): string | null => {
-    const columnType = dashboardPanelData.meta.stream.selectedStreamFields.find(
-      (it: any) => it.name == column,
+  const formatValue = (
+    value: any,
+    column: { field: string; streamAlias: string },
+  ): string | null => {
+    // streamAlias can be undefined or null, also, groupedfield will have one entry with streamAlias as null
+    // so we need to handle both cases
+    const streamFields = column.streamAlias
+      ? dashboardPanelData?.meta?.streamFields?.groupedFields.find(
+          (it: any) => it.stream_alias === column.streamAlias,
+        )
+      : dashboardPanelData?.meta?.streamFields?.groupedFields.find(
+          (it: any) =>
+            it.stream_alias === null || it.stream_alias === undefined,
+        );
+
+    const columnType = streamFields?.schema?.find(
+      (it: any) => it.name == column.field,
     )?.type;
+
     if (value == null) {
       // if value is null or undefined, return it as is
       return value;
@@ -2227,136 +2257,147 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
   };
 
   /**
-   * Build a WHERE clause from the given filter data.
-   * @param {array} filterData - an array of filter objects, each with properties
-   *   for column, operator, value, and logicalOperator.
-   * @returns {string} - the WHERE clause as a string.
+   * Build a single condition from the given condition object.
+   * @param {object} condition - a filter object with properties for column,
+   *   operator, value, and logicalOperator.
+   * @returns {string} - the condition as a string.
    */
-  const buildWhereClause = (filterData: any) => {
-    /**
-     * Build a single condition from the given condition object.
-     * @param {object} condition - a filter object with properties for column,
-     *   operator, value, and logicalOperator.
-     * @returns {string} - the condition as a string.
-     */
-    const buildCondition = (condition: any) => {
-      const columnType =
-        dashboardPanelData.meta.stream.selectedStreamFields.find(
-          (it: any) => it.name == condition.column,
+  const buildCondition = (condition: any) => {
+    if (condition.filterType === "group") {
+      const groupConditions = condition.conditions
+        .map(buildCondition)
+        .filter(Boolean);
+      const logicalOperators = condition.conditions
+        .map((c: any) => c.logicalOperator)
+        .filter(Boolean);
+
+      let groupQuery = "";
+      groupConditions.forEach((cond: any, index: any) => {
+        if (index > 0) {
+          groupQuery += ` ${logicalOperators[index]} `;
+        }
+        groupQuery += cond;
+      });
+
+      return groupConditions.length ? `(${groupQuery})` : "";
+    } else if (condition.type === "list" && condition.values?.length > 0) {
+      return `${condition.column.field} IN (${condition.values
+        .map((value: any) => formatValue(value, condition.column))
+        .join(", ")})`;
+    } else if (condition.type === "condition" && condition.operator != null) {
+      let selectFilter = "";
+      if (["Is Null", "Is Not Null"].includes(condition.operator)) {
+        selectFilter += `${condition.column.field} `;
+        switch (condition.operator) {
+          case "Is Null":
+            selectFilter += `IS NULL`;
+            break;
+          case "Is Not Null":
+            selectFilter += `IS NOT NULL`;
+            break;
+        }
+      } else if (condition.operator === "IN") {
+        selectFilter += `${condition.column.field} IN (${formatINValue(
+          condition.value,
+        )})`;
+      } else if (condition.operator === "NOT IN") {
+        selectFilter += `${condition.column.field} NOT IN (${formatINValue(
+          condition.value,
+        )})`;
+      } else if (condition.operator === "match_all") {
+        selectFilter += `match_all(${formatValue(condition.value, condition.column)})`;
+      } else if (condition.operator === "str_match") {
+        selectFilter += `str_match(${condition.column.field}, ${formatValue(
+          condition.value,
+          condition.column,
+        )})`;
+      } else if (condition.operator === "str_match_ignore_case") {
+        selectFilter += `str_match_ignore_case(${
+          condition.column.field
+        }, ${formatValue(condition.value, condition.column)})`;
+      } else if (condition.operator === "re_match") {
+        selectFilter += `re_match(${condition.column.field}, ${formatValue(
+          condition.value,
+          condition.column,
+        )})`;
+      } else if (condition.operator === "re_not_match") {
+        selectFilter += `re_not_match(${condition.column.field}, ${formatValue(
+          condition.value,
+          condition.column,
+        )})`;
+      } else if (condition.value != null && condition.value !== "") {
+        // streamAlias can be undefined or null, also, groupedfield will have one entry with streamAlias as null
+        // so we need to handle both cases
+        const streamFields = condition.column.streamAlias
+          ? dashboardPanelData?.meta?.streamFields?.groupedFields.find(
+              (it: any) => it.stream_alias === condition.column.streamAlias,
+            )
+          : dashboardPanelData?.meta?.streamFields?.groupedFields.find(
+              (it: any) =>
+                it.stream_alias === null || it.stream_alias === undefined,
+            );
+
+        const columnType = streamFields?.schema?.find(
+          (it: any) => it.name == condition.column.field,
         )?.type;
-      if (condition.filterType === "group") {
-        const groupConditions = condition.conditions
-          .map(buildCondition)
-          .filter(Boolean);
-        const logicalOperators = condition.conditions
-          .map((c: any) => c.logicalOperator)
-          .filter(Boolean);
-
-        let groupQuery = "";
-        groupConditions.forEach((cond: any, index: any) => {
-          if (index > 0) {
-            groupQuery += ` ${logicalOperators[index]} `;
-          }
-          groupQuery += cond;
-        });
 
-        return groupConditions.length ? `(${groupQuery})` : "";
-      } else if (condition.type === "list" && condition.values?.length > 0) {
-        return `${condition.column} IN (${condition.values
-          .map((value: any) => formatValue(value, condition.column))
-          .join(", ")})`;
-      } else if (condition.type === "condition" && condition.operator != null) {
-        let selectFilter = "";
-        if (["Is Null", "Is Not Null"].includes(condition.operator)) {
-          selectFilter += `${condition.column} `;
-          switch (condition.operator) {
-            case "Is Null":
-              selectFilter += `IS NULL`;
-              break;
-            case "Is Not Null":
-              selectFilter += `IS NOT NULL`;
-              break;
-          }
-        } else if (condition.operator === "IN") {
-          selectFilter += `${condition.column} IN (${formatINValue(
-            condition.value,
-          )})`;
-        } else if (condition.operator === "NOT IN") {
-          selectFilter += `${condition.column} NOT IN (${formatINValue(
-            condition.value,
-          )})`;
-        } else if (condition.operator === "match_all") {
-          selectFilter += `match_all(${formatValue(condition.value, condition.column)})`;
-        } else if (condition.operator === "str_match") {
-          selectFilter += `str_match(${condition.column}, ${formatValue(
-            condition.value,
-            condition.column,
-          )})`;
-        } else if (condition.operator === "str_match_ignore_case") {
-          selectFilter += `str_match_ignore_case(${
-            condition.column
-          }, ${formatValue(condition.value, condition.column)})`;
-        } else if (condition.operator === "re_match") {
-          selectFilter += `re_match(${condition.column}, ${formatValue(
-            condition.value,
-            condition.column,
-          )})`;
-        } else if (condition.operator === "re_not_match") {
-          selectFilter += `re_not_match(${condition.column}, ${formatValue(
-            condition.value,
-            condition.column,
-          )})`;
-        } else if (condition.value != null && condition.value !== "") {
-          selectFilter += `${condition.column} `;
-          switch (condition.operator) {
-            case "=":
-            case "<>":
-            case "<":
-            case ">":
-            case "<=":
-            case ">=":
-              selectFilter += `${condition.operator} ${formatValue(
-                condition.value,
-                condition.column,
-              )}`;
-              break;
-            case "Contains":
-              selectFilter +=
-                columnType === "Utf8"
-                  ? `LIKE '%${condition.value}%'`
-                  : `LIKE %${condition.value}%`;
-              break;
-            case "Not Contains":
-              selectFilter +=
-                columnType === "Utf8"
-                  ? `NOT LIKE '%${condition.value}%'`
-                  : `NOT LIKE %${condition.value}%`;
-              break;
-            case "Starts With":
-              selectFilter +=
-                columnType === "Utf8"
-                  ? `LIKE '${condition.value}%'`
-                  : `LIKE ${condition.value}%`;
-              break;
-            case "Ends With":
-              selectFilter +=
-                columnType === "Utf8"
-                  ? `LIKE '%${condition.value}'`
-                  : `LIKE %${condition.value}`;
-              break;
-            default:
-              selectFilter += `${condition.operator} ${formatValue(
-                condition.value,
-                condition.column,
-              )}`;
-              break;
-          }
+        selectFilter += `${condition.column.field} `;
+        switch (condition.operator) {
+          case "=":
+          case "<>":
+          case "<":
+          case ">":
+          case "<=":
+          case ">=":
+            selectFilter += `${condition.operator} ${formatValue(
+              condition.value,
+              condition.column,
+            )}`;
+            break;
+          case "Contains":
+            selectFilter +=
+              columnType === "Utf8"
+                ? `LIKE '%${condition.value}%'`
+                : `LIKE %${condition.value}%`;
+            break;
+          case "Not Contains":
+            selectFilter +=
+              columnType === "Utf8"
+                ? `NOT LIKE '%${condition.value}%'`
+                : `NOT LIKE %${condition.value}%`;
+            break;
+          case "Starts With":
+            selectFilter +=
+              columnType === "Utf8"
+                ? `LIKE '${condition.value}%'`
+                : `LIKE ${condition.value}%`;
+            break;
+          case "Ends With":
+            selectFilter +=
+              columnType === "Utf8"
+                ? `LIKE '%${condition.value}'`
+                : `LIKE %${condition.value}`;
+            break;
+          default:
+            selectFilter += `${condition.operator} ${formatValue(
+              condition.value,
+              condition.column,
+            )}`;
+            break;
         }
-        return selectFilter;
       }
-      return "";
-    };
+      return selectFilter;
+    }
+    return "";
+  };
 
+  /**
+   * Build a WHERE clause from the given filter data.
+   * @param {array} filterData - an array of filter objects, each with properties
+   *   for column, operator, value, and logicalOperator.
+   * @returns {string} - the WHERE clause as a string.
+   */
+  const buildWhereClause = (filterData: any) => {
     const whereConditions = filterData.map(buildCondition).filter(Boolean);
 
     const logicalOperators = filterData.map((it: any) => it.logicalOperator);
@@ -3358,6 +3399,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     selectedStreamFieldsBasedOnUserDefinedSchema,
     updateGroupedFields,
     getAllSelectedStreams,
+    buildCondition,
   };
 };
 export default useDashboardPanelData;
diff --git a/web/src/utils/dashboard/convertDashboardSchemaVersion.ts b/web/src/utils/dashboard/convertDashboardSchemaVersion.ts
index 91b5995b017..567a44ba27d 100644
--- a/web/src/utils/dashboard/convertDashboardSchemaVersion.ts
+++ b/web/src/utils/dashboard/convertDashboardSchemaVersion.ts
@@ -116,6 +116,38 @@ function migrateFields(
   }
 }
 
+/**
+ * Migrates filter conditions by recursively processing nested structures
+ * Converts string column fields to objects with streamAlias and field properties
+ * @param filter The filter object to migrate
+ * @returns The migrated filter object
+ */
+function migrateFilterConditions(filter: any): any {
+  if (!filter) return filter;
+
+  if (filter.conditions && Array.isArray(filter.conditions)) {
+    // Process each condition recursively
+    filter.conditions = filter.conditions.map((condition: any) => {
+      // If it's a group, recursively process it
+      if (condition.filterType === "group") {
+        return migrateFilterConditions(condition);
+      }
+
+      // For regular conditions, convert string column to object with streamAlias and field
+      if (typeof condition.column === "string") {
+        condition.column = {
+          streamAlias: undefined,
+          field: condition.column,
+        };
+      }
+
+      return condition;
+    });
+  }
+
+  return filter;
+}
+
 export function convertDashboardSchemaVersion(data: any) {
   if (!data) {
     return;
@@ -278,6 +310,13 @@ export function convertDashboardSchemaVersion(data: any) {
                 migrateV5FieldsToV6,
               );
             });
+
+            // Migrate the filters
+            // all column which is currently string will be converted to object with streamAlias and field
+            // make sure that conditions can be array based on filterType
+            queryItem.fields.filter = migrateFilterConditions(
+              queryItem.fields.filter,
+            );
           });
         });
       });
diff --git a/web/src/views/Dashboards/addPanel/AddCondition.vue b/web/src/views/Dashboards/addPanel/AddCondition.vue
index 4284e473c0f..65a4ba39930 100644
--- a/web/src/views/Dashboards/addPanel/AddCondition.vue
+++ b/web/src/views/Dashboards/addPanel/AddCondition.vue
@@ -209,7 +209,7 @@ export default defineComponent({
       "dashboardPanelDataPageKey",
       "dashboard",
     );
-    const { getAllSelectedStreams } = useDashboardPanelData(
+    const { getAllSelectedStreams, buildCondition } = useDashboardPanelData(
       dashboardPanelDataPageKey,
     );
     const { t } = useI18n();
@@ -273,47 +273,49 @@ export default defineComponent({
     const filterOptions = ["AND", "OR"];
 
     const computedLabel = (condition: any) => {
-      if (condition.operator === "match_all") {
-        return condition.operator + "(" + condition.value + ")";
-      } else if (condition.operator === "str_match") {
-        return (
-          condition.operator +
-          "(" +
-          condition.column +
-          ", " +
-          condition.value +
-          ")"
-        );
-      } else if (condition.operator === "str_match_ignore_case") {
-        return (
-          condition.operator +
-          "(" +
-          condition.column +
-          ", " +
-          condition.value +
-          ")"
-        );
-      } else if (condition.operator === "re_match") {
-        return (
-          condition.operator +
-          "(" +
-          condition.column +
-          ", " +
-          condition.value +
-          ")"
-        );
-      } else if (condition.operator === "re_not_match") {
-        return (
-          condition.operator +
-          "(" +
-          condition.column +
-          ", " +
-          condition.value +
-          ")"
-        );
-      } else {
-        return props.condition.column;
-      }
+      // if (condition.operator === "match_all") {
+      //   return condition.operator + "(" + condition.value + ")";
+      // } else if (condition.operator === "str_match") {
+      //   return (
+      //     condition.operator +
+      //     "(" +
+      //     condition.column +
+      //     ", " +
+      //     condition.value +
+      //     ")"
+      //   );
+      // } else if (condition.operator === "str_match_ignore_case") {
+      //   return (
+      //     condition.operator +
+      //     "(" +
+      //     condition.column +
+      //     ", " +
+      //     condition.value +
+      //     ")"
+      //   );
+      // } else if (condition.operator === "re_match") {
+      //   return (
+      //     condition.operator +
+      //     "(" +
+      //     condition.column +
+      //     ", " +
+      //     condition.value +
+      //     ")"
+      //   );
+      // } else if (condition.operator === "re_not_match") {
+      //   return (
+      //     condition.operator +
+      //     "(" +
+      //     condition.column +
+      //     ", " +
+      //     condition.value +
+      //     ")"
+      //   );
+      // } else {
+      //   return props.condition.column;
+      // }
+      const builtCondition = buildCondition(condition);
+      return builtCondition === "" ? condition.column.field : builtCondition;
     };
 
     const emitLogicalOperatorChange = (newOperator: string) => {

From 48c0e7eb61460b37d0474dcc05ea109570b15498 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Fri, 11 Apr 2025 18:00:04 +0530
Subject: [PATCH 12/61] fix: filters values rendering issue

---
 web/src/composables/useDashboardPanel.ts      |  9 ++++-----
 .../Dashboards/addPanel/AddCondition.vue      | 19 ++++++-------------
 2 files changed, 10 insertions(+), 18 deletions(-)

diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index be5d531aa89..b5bf11cfdb5 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -1516,7 +1516,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       });
 
       dashboardPanelData.meta.filterValue.push({
-        column: {
+        filterItem: {
           field: filterItem.name,
           streamAlias: filterItem.streamAlias,
         },
@@ -1570,15 +1570,14 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       .then((res: any) => {
         const find = dashboardPanelData.meta.filterValue.findIndex(
           (it: any) =>
-            it.column.field === filterItem.field &&
-            it.column.streamAlias === filterItem.streamAlias,
+            it.filterItem.field === filterItem.field &&
+            it.filterItem.streamAlias === filterItem.streamAlias,
         );
         if (find >= 0) {
           dashboardPanelData.meta.filterValue.splice(find, 1);
         }
         dashboardPanelData.meta.filterValue.push({
-          column: filterItem,
-          streamName: streamName,
+          filterItem: filterItem,
           value: res?.data?.hits?.[0]?.values
             .map((it: any) => it.zo_sql_key)
             .filter((it: any) => it)
diff --git a/web/src/views/Dashboards/addPanel/AddCondition.vue b/web/src/views/Dashboards/addPanel/AddCondition.vue
index 65a4ba39930..a16296808ac 100644
--- a/web/src/views/Dashboards/addPanel/AddCondition.vue
+++ b/web/src/views/Dashboards/addPanel/AddCondition.vue
@@ -24,8 +24,10 @@
         class="q-pl-sm"
         :data-test="`dashboard-add-condition-label-${conditionIndex}-${computedLabel(condition)}`"
       >
-        <!-- @show="(e: any) => loadFilterItem(condition.column)" -->
-        <q-menu class="q-pa-md">
+        <q-menu
+          class="q-pa-md"
+          @show="(e: any) => loadFilterItem(condition.column)"
+        >
           <div style="display: flex">
             <!-- <q-select
               v-model="condition.column"
@@ -218,20 +220,11 @@ export default defineComponent({
       useSelectAutoComplete(toRef(props, "schemaOptions"), "label");
 
     const filteredListOptions = computed(() => {
-      // get stream name from streamAlias
-      const streamName =
-        getAllSelectedStreams().find(
-          (it: any) => it.streamAlias == props?.condition?.column?.streamAlias,
-        )?.stream ??
-        props.dashboardPanelData.data.queries[
-          props.dashboardPanelData.layout.currentQueryIndex
-        ].fields.stream;
-
       const options = props.dashboardPanelData.meta.filterValue
         .find(
           (it: any) =>
-            it.column == props?.condition?.column?.field &&
-            it?.streamName == streamName,
+            it.filterItem.field == props?.condition?.column?.field &&
+            it.filterItem.streamAlias == props?.condition?.column?.streamAlias,
         )
         ?.value?.filter((option: any) =>
           option?.toLowerCase().includes(searchTerm.value.toLowerCase()),

From 8e0cc1b29ad9c091b51fdef23c6144c87426d1b3 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 14 Apr 2025 11:19:51 +0530
Subject: [PATCH 13/61] fix: append stream alias for where conditions query
 build

---
 web/src/composables/useDashboardPanel.ts | 26 ++++++++++++++----------
 1 file changed, 15 insertions(+), 11 deletions(-)

diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index b5bf11cfdb5..b567416a33c 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -2262,6 +2262,12 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
    * @returns {string} - the condition as a string.
    */
   const buildCondition = (condition: any) => {
+    const streamAlias =
+      condition.column.streamAlias ??
+      dashboardPanelData.data.queries[
+        dashboardPanelData.layout.currentQueryIndex
+      ].fields.stream;
+
     if (condition.filterType === "group") {
       const groupConditions = condition.conditions
         .map(buildCondition)
@@ -2280,13 +2286,13 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
 
       return groupConditions.length ? `(${groupQuery})` : "";
     } else if (condition.type === "list" && condition.values?.length > 0) {
-      return `${condition.column.field} IN (${condition.values
+      return `${streamAlias}.${condition.column.field} IN (${condition.values
         .map((value: any) => formatValue(value, condition.column))
         .join(", ")})`;
     } else if (condition.type === "condition" && condition.operator != null) {
       let selectFilter = "";
       if (["Is Null", "Is Not Null"].includes(condition.operator)) {
-        selectFilter += `${condition.column.field} `;
+        selectFilter += `${streamAlias}.${condition.column.field} `;
         switch (condition.operator) {
           case "Is Null":
             selectFilter += `IS NULL`;
@@ -2296,31 +2302,29 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
             break;
         }
       } else if (condition.operator === "IN") {
-        selectFilter += `${condition.column.field} IN (${formatINValue(
+        selectFilter += `${streamAlias}.${condition.column.field} IN (${formatINValue(
           condition.value,
         )})`;
       } else if (condition.operator === "NOT IN") {
-        selectFilter += `${condition.column.field} NOT IN (${formatINValue(
+        selectFilter += `${streamAlias}.${condition.column.field} NOT IN (${formatINValue(
           condition.value,
         )})`;
       } else if (condition.operator === "match_all") {
         selectFilter += `match_all(${formatValue(condition.value, condition.column)})`;
       } else if (condition.operator === "str_match") {
-        selectFilter += `str_match(${condition.column.field}, ${formatValue(
+        selectFilter += `str_match(${streamAlias}.${condition.column.field}, ${formatValue(
           condition.value,
           condition.column,
         )})`;
       } else if (condition.operator === "str_match_ignore_case") {
-        selectFilter += `str_match_ignore_case(${
-          condition.column.field
-        }, ${formatValue(condition.value, condition.column)})`;
+        selectFilter += `str_match_ignore_case(${streamAlias}.${condition.column.field}, ${formatValue(condition.value, condition.column)})`;
       } else if (condition.operator === "re_match") {
-        selectFilter += `re_match(${condition.column.field}, ${formatValue(
+        selectFilter += `re_match(${streamAlias}.${condition.column.field}, ${formatValue(
           condition.value,
           condition.column,
         )})`;
       } else if (condition.operator === "re_not_match") {
-        selectFilter += `re_not_match(${condition.column.field}, ${formatValue(
+        selectFilter += `re_not_match(${streamAlias}.${condition.column.field}, ${formatValue(
           condition.value,
           condition.column,
         )})`;
@@ -2340,7 +2344,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
           (it: any) => it.name == condition.column.field,
         )?.type;
 
-        selectFilter += `${condition.column.field} `;
+        selectFilter += `${streamAlias}.${condition.column.field} `;
         switch (condition.operator) {
           case "=":
           case "<>":

From cfdb94a6d19fe9ab4f730f9b28ddfce5400c2264 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Wed, 16 Apr 2025 16:28:51 +0530
Subject: [PATCH 14/61] add: implement validation for join fields and
 conditions in panel data

---
 .../dashboard/convertDataIntoUnitValue.ts     | 58 +++++++++++++++++++
 1 file changed, 58 insertions(+)

diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index bfe611489a5..4c9c500adb1 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -1310,6 +1310,58 @@ const validatePanelContentByType = (panel: any, errors: string[]) => {
   }
 };
 
+const validateJoinField = (join: any, errors: string[], joinIndex: number) => {
+  // validate stream
+  if (!join?.stream) {
+    errors.push(`Join #${joinIndex + 1}: Stream is required`);
+  }
+
+  // validate join type
+  if (!join?.joinType) {
+    errors.push(`Join #${joinIndex + 1}: Join type is required`);
+  }
+
+  // validate conditions
+  // at least one condition is required
+  // and each condition should have leftField, rightField, operation
+  if (!join?.conditions || join?.conditions?.length === 0) {
+    errors.push(`Join #${joinIndex + 1}: Conditions are required`);
+  }
+
+  // validate each condition
+  join?.conditions?.forEach((condition: any, conditionIndex: number) => {
+    // validate leftField
+    if (!condition?.leftField?.field) {
+      errors.push(
+        `Join #${joinIndex + 1}: Condition #${conditionIndex + 1}: Left field is required`,
+      );
+    }
+
+    // validate rightField
+    if (!condition?.rightField?.field) {
+      errors.push(
+        `Join #${joinIndex + 1}: Condition #${conditionIndex + 1}: Right field is required`,
+      );
+    }
+
+    // validate operation
+    if (!condition?.operation) {
+      errors.push(
+        `Join #${joinIndex + 1}: Condition #${conditionIndex + 1}: Operation is required`,
+      );
+    }
+  });
+};
+
+const validateJoinFields = (joins: any, errors: string[]) => {
+  // validate join fields
+  if (joins) {
+    joins.forEach((join: any, index: number) =>
+      validateJoinField(join, errors, index),
+    );
+  }
+};
+
 /**
  * Validates panel fields without validating stream field existence
  *
@@ -1502,6 +1554,12 @@ export const validatePanel = (
       isFieldsValidationRequired,
     );
 
+    // validate join fields
+    validateJoinFields(
+      panelData?.data?.queries?.[currentQueryIndex]?.joins,
+      errors,
+    );
+
     // Validate fields against streams if field validation is required
     if (isFieldsValidationRequired) {
       const isCustomQueryMode =

From 9ba030ea21f24e62a2d6b79f8a80910870fc781b Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 17 Apr 2025 16:56:23 +0530
Subject: [PATCH 15/61] add: enhance field and stream selection with filtering
 capabilities

---
 .../dashboards/addPanel/StreamFieldSelect.vue | 56 ++++++++++++++++++-
 .../Dashboards/addPanel/AddJoinPopUp.vue      | 28 +++++++++-
 2 files changed, 81 insertions(+), 3 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
index d67399d5ea2..7647149c53b 100644
--- a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
+++ b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
@@ -4,12 +4,18 @@
       <q-select
         filled
         v-model="internalModel"
-        :options="options"
+        :options="filteredOptions"
         option-label="name"
         option-value="name"
         :display-value="internalModel?.field ?? 'Select a Field'"
         map-options
         dense
+        fill-input
+        use-input
+        input-debounce="0"
+        behavior="menu"
+        hide-selected
+        @filter="filterFields"
       >
         <template v-slot:option="scope">
           <q-expansion-item
@@ -76,8 +82,8 @@ export default defineComponent({
     );
 
     const internalModel = ref(props.modelValue);
-
     const options = ref<Option[]>([]);
+    const filteredOptions = ref<Option[]>([]);
 
     const { getStream } = useStreams();
     const { dashboardPanelData } = useDashboardPanelData(
@@ -107,6 +113,7 @@ export default defineComponent({
     async function fetchFieldsForStreams() {
       if (!props.streams || props.streams.length === 0) {
         options.value = [];
+        filteredOptions.value = [];
         return;
       }
 
@@ -126,6 +133,49 @@ export default defineComponent({
           };
         }),
       );
+
+      // Initialize filtered options with all options
+      filteredOptions.value = [...options?.value];
+    }
+
+    function filterFields(val: string, update: any) {
+      if (val === "") {
+        update(() => {
+          filteredOptions.value = [...options?.value];
+        });
+        return;
+      }
+
+      update(() => {
+        const needle = val?.toLowerCase();
+        // Filter options where either stream name (label) or field name contains the search term
+        filteredOptions.value = options?.value
+          ?.map((stream) => {
+            // First check if stream name matches
+            const streamMatches = stream?.label?.toLowerCase().includes(needle);
+
+            // Then filter child fields that match
+            const matchingFields = stream?.children?.filter(
+              (field: {
+                name: string;
+                stream: { streamAlias: string; stream: string };
+                type: string;
+              }) => field?.name?.toLowerCase()?.includes(needle),
+            );
+
+            // If stream name matches or has matching fields, include in results
+            if (streamMatches || matchingFields.length > 0) {
+              return {
+                ...stream,
+                // If stream matches directly, include all fields
+                // Otherwise only include matching fields
+                children: streamMatches ? stream?.children : matchingFields,
+              };
+            }
+            return null;
+          })
+          .filter(Boolean) as Option[];
+      });
     }
 
     function selectField(field: any) {
@@ -146,7 +196,9 @@ export default defineComponent({
     return {
       internalModel,
       options,
+      filteredOptions,
       selectField,
+      filterFields,
     };
   },
 });
diff --git a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
index 7e0d22bce7b..82fb8a82bde 100644
--- a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
+++ b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
@@ -45,12 +45,18 @@
           filled
           dense
           v-model="modelValue.stream"
-          :options="streamOptions"
+          :options="filteredStreamOptions"
           emit-value
           map-options
           label="On Stream"
           class="q-py-md tw-w-1/3"
           data-test="dashboard-config-panel-join-to"
+          use-input
+          input-debounce="0"
+          behavior="menu"
+          hide-selected
+          fill-input
+          @filter="filterStreamOptions"
         />
       </div>
 
@@ -203,6 +209,7 @@ export default defineComponent({
     );
 
     const streamOptions = ref([]);
+    const filteredStreamOptions = ref([]);
     const joinOptions = ["inner", "left", "right"];
     const operationOptions = ["=", "!=", ">", "<", ">=", "<="];
 
@@ -259,6 +266,7 @@ export default defineComponent({
 
     onMounted(() => {
       loadStreamsListBasedOnType();
+      filteredStreamOptions.value = [...streamOptions?.value];
     });
 
     const removeCondition = (argIndex: number) => {
@@ -299,6 +307,22 @@ export default defineComponent({
       ];
     };
 
+    const filterStreamOptions = (val, update) => {
+      if (val === '') {
+        update(() => {
+          filteredStreamOptions.value = [...streamOptions?.value];
+        });
+        return;
+      }
+      
+      update(() => {
+        const needle = val.toLowerCase();
+        filteredStreamOptions.value = streamOptions?.value?.filter(
+          stream => stream?.label?.toLowerCase()?.includes(needle)
+        );
+      });
+    };
+
     return {
       t,
       streamOptions,
@@ -307,6 +331,8 @@ export default defineComponent({
       addCondition,
       operationOptions,
       getStreamsBasedJoinIndex,
+      filteredStreamOptions,
+      filterStreamOptions
     };
   },
 });

From f4a66237ae7f9e94748b6146d27ad92392251a98 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Fri, 18 Apr 2025 16:24:36 +0530
Subject: [PATCH 16/61] refactor: update axis item removal methods to use index
 instead of name

---
 .../addPanel/DashboardQueryBuilder.vue        | 199 +++++++++---------
 web/src/composables/useDashboardPanel.ts      |  34 +--
 2 files changed, 105 insertions(+), 128 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index 989f9f977d4..a015c15cfb7 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -239,7 +239,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     size="xs"
                     dense
                     :data-test="`dashboard-x-item-${itemX?.column}-remove`"
-                    @click="removeXAxisItem(itemX?.column)"
+                    @click="removeXAxisItemByIndex(index)"
                     icon="close"
                   />
                 </div>
@@ -500,7 +500,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     size="xs"
                     dense
                     :data-test="`dashboard-b-item-${itemB?.column}-remove`"
-                    @click="removeBreakdownItem(itemB?.column)"
+                    @click="removeBreakdownItemByIndex(index)"
                     icon="close"
                   />
                 </div>
@@ -807,7 +807,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 size="xs"
                 dense
                 :data-test="`dashboard-y-item-${itemY?.column}-remove`"
-                @click="removeYAxisItem(itemY?.column)"
+                @click="removeYAxisItemByIndex(index)"
                 icon="close"
               />
             </div>
@@ -1055,7 +1055,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                   size="xs"
                   dense
                   :data-test="`dashboard-z-item-${itemZ?.column}-remove`"
-                  @click="removeZAxisItem(itemZ?.column)"
+                  @click="removeZAxisItemByIndex(index)"
                   icon="close"
                 />
               </div>
@@ -1158,10 +1158,10 @@ export default defineComponent({
       addYAxisItem,
       addZAxisItem,
       addBreakDownAxisItem,
-      removeXAxisItem,
-      removeYAxisItem,
-      removeZAxisItem,
-      removeBreakdownItem,
+      removeXAxisItemByIndex,
+      removeYAxisItemByIndex,
+      removeZAxisItemByIndex,
+      removeBreakdownItemByIndex,
       addFilteredItem,
       promqlMode,
       updateArrayAlias,
@@ -1238,6 +1238,9 @@ export default defineComponent({
     );
 
     const onDrop = (e: any, targetAxis: string, droppedAtIndex: number) => {
+      const dragSourceIndex =
+        dashboardPanelData.meta.dragAndDrop.dragSourceIndex;
+
       // reorder items if source and target are same
       if (dashboardPanelData.meta.dragAndDrop.dragSource === targetAxis) {
         // we need to reorder the item
@@ -1288,107 +1291,97 @@ export default defineComponent({
           // move the item from field list to axis
           const dragElement = dashboardPanelData.meta.dragAndDrop.dragElement;
 
-          console.log(dragElement, "dragElement");
-
-          // Here, we need all fields for all joins streams
-          const dragName =
-            selectedStreamFieldsBasedOnUserDefinedSchema.value.find(
-              (item: any) => item?.name === dragElement?.column,
-            );
-          const customDragName =
-            dashboardPanelData.meta.stream.customQueryFields.find(
-              (item: any) => item?.name === dragElement?.column,
-            );
-
-          if (dragName || customDragName) {
-            const axisArray = getAxisArray(targetAxis);
-            const duplicateName = axisArray.some(
-              (item: any) => item.column === (dragName || customDragName).name,
-            );
-
-            if (duplicateName) {
-              const errorMessage = `Field '${
-                (dragName || customDragName).name
-              }' already exists in '${targetAxis}' axis.`;
+          // find first arg which is of type field
+          const firstFieldTypeArg = dragElement.args.find(
+            (arg: any) => arg.type === "field",
+          )?.value;
 
-              showErrorNotification(errorMessage);
-              cleanupDraggingFields();
-              return;
-            }
+          if (!firstFieldTypeArg) {
+            showErrorNotification("Without field, not able to drag");
+            cleanupDraggingFields();
+            return;
+          }
 
-            if (targetAxis !== "f") {
-              if (
-                (targetAxis === "x" && isAddXAxisNotAllowed.value) ||
-                (targetAxis === "y" && isAddYAxisNotAllowed.value) ||
-                (targetAxis === "z" && isAddZAxisNotAllowed.value) ||
-                (targetAxis === "breakdown" && isAddBreakdownNotAllowed.value)
-              ) {
-                let maxAllowedAxisFields;
-
-                switch (dashboardPanelData.data.type) {
-                  case "pie":
-                  case "donut":
-                  case "heatmap":
-                    maxAllowedAxisFields = targetAxis === "x" ? 1 : 1;
-                    break;
-                  case "metric":
-                    maxAllowedAxisFields = targetAxis === "x" ? 0 : 1;
-                    break;
-                  case "table":
-                    maxAllowedAxisFields = 0;
-                    break;
-                  case "area-stacked":
-                  case "stacked":
-                  case "h-stacked":
-                    maxAllowedAxisFields = targetAxis === "x" ? 1 : 1;
-                    break;
-                  default:
-                    maxAllowedAxisFields = targetAxis === "x" ? 1 : 1;
-                    break;
-                }
-
-                const errorMessage = `Max ${maxAllowedAxisFields} field(s) in ${targetAxis.toUpperCase()}-Axis is allowed.`;
-
-                showErrorNotification(errorMessage);
-                cleanupDraggingFields();
-                return;
+          const fieldObj = {
+            name: firstFieldTypeArg.field,
+            streamAlias: firstFieldTypeArg.streamAlias,
+          };
+
+          const axisArray = getAxisArray(targetAxis);
+
+          if (targetAxis !== "f") {
+            if (
+              (targetAxis === "x" && isAddXAxisNotAllowed.value) ||
+              (targetAxis === "y" && isAddYAxisNotAllowed.value) ||
+              (targetAxis === "z" && isAddZAxisNotAllowed.value) ||
+              (targetAxis === "breakdown" && isAddBreakdownNotAllowed.value)
+            ) {
+              let maxAllowedAxisFields;
+
+              switch (dashboardPanelData.data.type) {
+                case "pie":
+                case "donut":
+                case "heatmap":
+                  maxAllowedAxisFields = targetAxis === "x" ? 1 : 1;
+                  break;
+                case "metric":
+                  maxAllowedAxisFields = targetAxis === "x" ? 0 : 1;
+                  break;
+                case "table":
+                  maxAllowedAxisFields = 0;
+                  break;
+                case "area-stacked":
+                case "stacked":
+                case "h-stacked":
+                  maxAllowedAxisFields = targetAxis === "x" ? 1 : 1;
+                  break;
+                default:
+                  maxAllowedAxisFields = targetAxis === "x" ? 1 : 1;
+                  break;
               }
 
-              // Remove from the original axis
-              const dragSource = dashboardPanelData.meta.dragAndDrop.dragSource;
-              if (dragSource === "x") {
-                removeXAxisItem((dragName || customDragName).name);
-              } else if (dragSource === "y") {
-                removeYAxisItem((dragName || customDragName).name);
-              } else if (dragSource === "z") {
-                removeZAxisItem((dragName || customDragName).name);
-              } else if (dragSource === "breakdown") {
-                removeBreakdownItem((dragName || customDragName).name);
-              }
-            }
+              const errorMessage = `Max ${maxAllowedAxisFields} field(s) in ${targetAxis.toUpperCase()}-Axis is allowed.`;
 
-            if (targetAxis === "f") {
+              showErrorNotification(errorMessage);
+              cleanupDraggingFields();
               return;
             }
 
-            // Add to the new axis
-            if (targetAxis === "x") {
-              addXAxisItem(dragName || customDragName);
-            } else if (targetAxis === "y") {
-              addYAxisItem(dragName || customDragName);
-            } else if (targetAxis === "z") {
-              addZAxisItem(dragName || customDragName);
-            } else if (targetAxis === "breakdown") {
-              addBreakDownAxisItem(dragName || customDragName);
+            // Remove from the original axis
+            const dragSource = dashboardPanelData.meta.dragAndDrop.dragSource;
+            if (dragSource === "x") {
+              removeXAxisItemByIndex(dragSourceIndex);
+            } else if (dragSource === "y") {
+              removeYAxisItemByIndex(dragSourceIndex);
+            } else if (dragSource === "z") {
+              removeZAxisItemByIndex(dragSourceIndex);
+            } else if (dragSource === "breakdown") {
+              removeBreakdownItemByIndex(dragSourceIndex);
             }
-            reorderItems(
-              targetAxis,
-              dashboardPanelData.data.queries[
-                dashboardPanelData.layout.currentQueryIndex
-              ].fields[targetAxis]?.length - 1 || 0,
-              droppedAtIndex,
-            );
           }
+
+          if (targetAxis === "f") {
+            return;
+          }
+
+          // Add to the new axis
+          if (targetAxis === "x") {
+            addXAxisItem(fieldObj);
+          } else if (targetAxis === "y") {
+            addYAxisItem(fieldObj);
+          } else if (targetAxis === "z") {
+            addZAxisItem(fieldObj);
+          } else if (targetAxis === "breakdown") {
+            addBreakDownAxisItem(fieldObj);
+          }
+          reorderItems(
+            targetAxis,
+            dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields[targetAxis]?.length - 1 || 0,
+            droppedAtIndex,
+          );
+
           updateArrayAlias();
         }
       }
@@ -1641,10 +1634,10 @@ export default defineComponent({
       panelName,
       panelDesc,
       dashboardPanelData,
-      removeXAxisItem,
-      removeYAxisItem,
-      removeZAxisItem,
-      removeBreakdownItem,
+      removeXAxisItemByIndex,
+      removeYAxisItemByIndex,
+      removeZAxisItemByIndex,
+      removeBreakdownItemByIndex,
       triggerOperators,
       pagination: ref({
         rowsPerPage: 0,
diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index b567416a33c..d7664c26dce 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -1355,23 +1355,15 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     );
   };
 
-  const removeXAxisItem = (name: string) => {
-    // HERE NEED CHANGES
-    const index = dashboardPanelData.data.queries[
-      dashboardPanelData.layout.currentQueryIndex
-    ].fields.x.findIndex((it: any) => it.column == name);
-    if (index >= 0) {
+  const removeXAxisItemByIndex = (index: number) => {
+      if (index >= 0) {
       dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
       ].fields.x.splice(index, 1);
     }
   };
 
-  const removeBreakdownItem = (name: string) => {
-    // HERE NEED CHANGES
-    const index = dashboardPanelData.data.queries[
-      dashboardPanelData.layout.currentQueryIndex
-    ].fields.breakdown.findIndex((it: any) => it.column == name);
+  const removeBreakdownItemByIndex = (index: number) => {
     if (index >= 0) {
       dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
@@ -1379,11 +1371,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     }
   };
 
-  const removeYAxisItem = (name: string) => {
-    // HERE NEED CHANGES
-    const index = dashboardPanelData.data.queries[
-      dashboardPanelData.layout.currentQueryIndex
-    ].fields.y.findIndex((it: any) => it.column == name);
+  const removeYAxisItemByIndex = (index: number) => {
     if (index >= 0) {
       dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
@@ -1391,11 +1379,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     }
   };
 
-  const removeZAxisItem = (name: string) => {
-    // HERE NEED CHANGES
-    const index = dashboardPanelData.data.queries[
-      dashboardPanelData.layout.currentQueryIndex
-    ].fields.z.findIndex((it: any) => it.column == name);
+  const removeZAxisItemByIndex = (index: number) => {
     if (index >= 0) {
       dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
@@ -3366,10 +3350,10 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
     addSource,
     addTarget,
     addValue,
-    removeXAxisItem,
-    removeYAxisItem,
-    removeZAxisItem,
-    removeBreakdownItem,
+    removeXAxisItemByIndex,
+    removeYAxisItemByIndex,
+    removeZAxisItemByIndex,
+    removeBreakdownItemByIndex,
     removeFilterItem,
     removeLatitude,
     removeLongitude,

From 4372ee9a0b6a5e4fe325002c4f5547dd5a080a77 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Fri, 18 Apr 2025 17:26:20 +0530
Subject: [PATCH 17/61] refactor: update join label to display stream name
 instead of index

---
 web/src/views/Dashboards/addPanel/DashboardJoinsOption.vue | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/web/src/views/Dashboards/addPanel/DashboardJoinsOption.vue b/web/src/views/Dashboards/addPanel/DashboardJoinsOption.vue
index ca2e3e8c2a9..ecc61895d9b 100644
--- a/web/src/views/Dashboards/addPanel/DashboardJoinsOption.vue
+++ b/web/src/views/Dashboards/addPanel/DashboardJoinsOption.vue
@@ -37,10 +37,11 @@
                 no-caps
                 dense
                 color="primary"
+                icon-right="arrow_drop_down"
                 square
                 :no-wrap="true"
                 size="sm"
-                :label="index"
+                :label="joinObj?.stream"
                 :data-test="`dashboard-join-item-${index}`"
                 class="q-pl-sm"
               >

From 385f8f49a708a11370484fa94dd6023544ba6e6e Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Wed, 23 Apr 2025 11:49:16 +0530
Subject: [PATCH 18/61] fix: filter issue for stream fields

---
 .../dashboards/addPanel/StreamFieldSelect.vue  | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
index 7647149c53b..4e10ce35612 100644
--- a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
+++ b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
@@ -138,7 +138,10 @@ export default defineComponent({
       filteredOptions.value = [...options?.value];
     }
 
-    function filterFields(val: string, update: any) {
+    function filterFields(val: string | object, update: any) {
+      // Handle both string and object values for val
+      let searchText = "";
+
       if (val === "") {
         update(() => {
           filteredOptions.value = [...options?.value];
@@ -146,8 +149,19 @@ export default defineComponent({
         return;
       }
 
+      // Check if val is string or object
+      if (typeof val === "string" && val !== "") {
+        searchText = val.toLowerCase();
+      } else {
+        // If we can't determine the search text, just show all options
+        update(() => {
+          filteredOptions.value = [...options?.value];
+        });
+        return;
+      }
+
       update(() => {
-        const needle = val?.toLowerCase();
+        const needle = searchText;
         // Filter options where either stream name (label) or field name contains the search term
         filteredOptions.value = options?.value
           ?.map((stream) => {

From 9eeb514574bc35953339da47046f532fb8bfd8df Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Wed, 23 Apr 2025 15:27:08 +0530
Subject: [PATCH 19/61] fix: preserve field values when updating function
 arguments in SelectFunction component

---
 .../addPanel/dynamicFunction/SelectFunction.vue | 17 ++++++++++++++---
 1 file changed, 14 insertions(+), 3 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index b511df08018..a4b28e8b303 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -358,7 +358,9 @@ export default {
     watch(
       () => fields.value.functionName,
       (newVal) => {
-        // Reset the args array
+        // Save the old args
+        const oldArgs = [...fields.value.args];
+        
         // get the validation for the selected function
         const funcValidation: any = getValidationForFunction(
           fields.value.functionName,
@@ -366,14 +368,23 @@ export default {
 
         // rebuild fields.value.args based on funcValidation.args
         if (funcValidation) {
-          // need to add args based on funcValidation.args
-          fields.value.args = (funcValidation?.args ?? []).flatMap((arg: any) =>
+          // Create new args array based on validation
+          const newArgs = (funcValidation?.args ?? []).flatMap((arg: any) =>
             // need to consider `min` config for each arg
             Array.from({ length: arg.min ?? 1 }).map(() => ({
               type: arg.type[0],
               value: arg.type[0] === "field" ? {} : arg?.defaultValue,
             })),
           );
+          
+          // Preserve field values where both old and new types are "field"
+          for (let i = 0; i < newArgs.length && i < oldArgs.length; i++) {
+            if (newArgs[i].type === "field" && oldArgs[i].type === "field") {
+              newArgs[i].value = oldArgs[i].value;
+            }
+          }
+          
+          fields.value.args = newArgs;
         }
       },
     );

From a0e4d285be1830e95e9b39cf2e904cdb978079f5 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Wed, 23 Apr 2025 16:40:17 +0530
Subject: [PATCH 20/61] refactor: use label for aggr function args

---
 .../dynamicFunction/SelectFunction.vue        |   34 +-
 .../dynamicFunction/functionValidation.json   | 1838 ++++++++++-------
 .../dashboard/convertDataIntoUnitValue.ts     |    8 +-
 3 files changed, 1139 insertions(+), 741 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index a4b28e8b303..42eb34cc871 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -52,6 +52,10 @@
                 argIndex,
               )
             "
+            option-label="label"
+            option-value="value"
+            behavior="menu"
+            emit-value
             dense
             filled
             label="Select Type"
@@ -176,17 +180,9 @@ export default {
       "dashboardPanelDataPageKey",
       "dashboard",
     );
-    const { dashboardPanelData, selectedStreamFieldsBasedOnUserDefinedSchema, getAllSelectedStreams } =
-      useDashboardPanelData(dashboardPanelDataPageKey);
-
-    // const schemaOptions = computed(() =>
-    //   selectedStreamFieldsBasedOnUserDefinedSchema?.value?.map(
-    //     (field: any) => ({
-    //       label: field.name,
-    //       value: field.name,
-    //     }),
-    //   ),
-    // );
+    const { getAllSelectedStreams } = useDashboardPanelData(
+      dashboardPanelDataPageKey,
+    );
 
     const fields = ref(addMissingArgs(props.modelValue));
 
@@ -266,13 +262,13 @@ export default {
       if (canAddArgument(fields.value.functionName)) {
         if (funcValidation.allowAddArgAt === "n") {
           fields.value.args.push({
-            type: funcValidation?.args?.[adjustedIndex]?.type?.[0],
+            type: funcValidation?.args?.[adjustedIndex]?.type?.[0]?.value,
             value: "",
           });
         } else if (funcValidation.allowAddArgAt === "n-1") {
           // Add an argument before the separator
           fields.value.args.splice(fields.value.args.length - 1, 0, {
-            type: funcValidation?.args?.[adjustedIndex]?.type?.[0], // Add default type (e.g., field, string, etc.)
+            type: funcValidation?.args?.[adjustedIndex]?.type?.[0]?.value, // Add default type (e.g., field, string, etc.)
             value: "",
           });
         }
@@ -360,7 +356,7 @@ export default {
       (newVal) => {
         // Save the old args
         const oldArgs = [...fields.value.args];
-        
+
         // get the validation for the selected function
         const funcValidation: any = getValidationForFunction(
           fields.value.functionName,
@@ -372,18 +368,18 @@ export default {
           const newArgs = (funcValidation?.args ?? []).flatMap((arg: any) =>
             // need to consider `min` config for each arg
             Array.from({ length: arg.min ?? 1 }).map(() => ({
-              type: arg.type[0],
-              value: arg.type[0] === "field" ? {} : arg?.defaultValue,
+              type: arg.type[0]?.value,
+              value: arg.type[0]?.value === "field" ? {} : arg?.defaultValue,
             })),
           );
-          
+
           // Preserve field values where both old and new types are "field"
           for (let i = 0; i < newArgs.length && i < oldArgs.length; i++) {
             if (newArgs[i].type === "field" && oldArgs[i].type === "field") {
               newArgs[i].value = oldArgs[i].value;
             }
           }
-          
+
           fields.value.args = newArgs;
         }
       },
@@ -409,8 +405,6 @@ export default {
       }
     };
 
-  
-
     return {
       fields,
       functionValidation,
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
index e38c45d9305..af710e19333 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
@@ -1,718 +1,1120 @@
-[
-    {
-        "functionName": null,
-        "functionLabel": "None",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "histogram",
-        "functionLabel": "Histogram",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "histogramInterval",
-                    "function"
-                ],
-                "defaultValue": null,
-                "required": false
-            }
-        ]
-    },
-    {
-        "functionName": "count",
-        "functionLabel": "Count",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "count-distinct",
-        "functionLabel": "Count (Distinct)",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "sum",
-        "functionLabel": "sum",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "avg",
-        "functionLabel": "avg",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "min",
-        "functionLabel": "min",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "max",
-        "functionLabel": "max",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "p50",
-        "functionLabel": "p50",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "p90",
-        "functionLabel": "p90",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "p95",
-        "functionLabel": "p95",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "p99",
-        "functionLabel": "p99",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "abs",
-        "functionLabel": "Abs",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "acos",
-        "functionLabel": "ArcCos",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "asin",
-        "functionLabel": "ArcSin",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "atan",
-        "functionLabel": "ArcTan",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "atan2",
-        "functionLabel": "ArcTan2",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "ceil",
-        "functionLabel": "Ceil",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "cos",
-        "functionLabel": "cos",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "exp",
-        "functionLabel": "exp",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "floor",
-        "functionLabel": "Floor",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "log",
-        "functionLabel": "log",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "log10",
-        "functionLabel": "log10",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "log2",
-        "functionLabel": "log2",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "pow",
-        "functionLabel": "pow",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "field",
-                    "number",
-                    "function"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "round",
-        "functionLabel": "round",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "field",
-                    "number"
-                ],
-                "required": false
-            }
-        ]
-    },
-    {
-        "functionName": "sin",
-        "functionLabel": "sin",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "sqrt",
-        "functionLabel": "sqrt",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "tan",
-        "functionLabel": "tan",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "string_length",
-        "functionLabel": "string_length",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "char_length",
-        "functionLabel": "char_length",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "concat",
-        "functionLabel": "concat",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string",
-                    "function"
-                ],
-                "required": true,
-                "min": 2
-            }
-        ],
-        "allowAddArgAt": "n"
-    },
-    {
-        "functionName": "lower",
-        "functionLabel": "lower",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "upper",
-        "functionLabel": "upper",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "substring",
-        "functionLabel": "substring",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "field",
-                    "number"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "field",
-                    "number"
-                ],
-                "required": false
-            }
-        ]
-    },
-    {
-        "functionName": "trim",
-        "functionLabel": "trim",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "ltrim",
-        "functionLabel": "ltrim",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "rtrim",
-        "functionLabel": "rtrim",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "date_add",
-        "functionLabel": "date_add",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "field",
-                    "number"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "date_sub",
-        "functionLabel": "date_sub",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "field",
-                    "number"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "datediff",
-        "functionLabel": "datediff",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "from_unixtime",
-        "functionLabel": "from_unixtime",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "number"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": false
-            }
-        ]
-    },
-    {
-        "functionName": "to_unixtime",
-        "functionLabel": "to_unixtime",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "string"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "array_length",
-        "functionLabel": "array_length",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "array"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "array_sort",
-        "functionLabel": "array_sort",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "array"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "array_append",
-        "functionLabel": "array_append",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "array"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "field",
-                    "string",
-                    "number"
-                ],
-                "required": true
-            }
-        ]
-    },
-    {
-        "functionName": "array_contains",
-        "functionLabel": "array_contains",
-        "args": [
-            {
-                "type": [
-                    "field",
-                    "array"
-                ],
-                "required": true
-            },
-            {
-                "type": [
-                    "field",
-                    "string",
-                    "number"
-                ],
-                "required": true
-            }
-        ]
-    }
-]
\ No newline at end of file
+    [
+        {
+            "functionName": null,
+            "functionLabel": "None",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "histogram",
+            "functionLabel": "Histogram",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        {
+                            "label": "Histogram Interval",
+                            "value": "histogramInterval"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "defaultValue": null,
+                    "required": false
+                }
+            ]
+        },
+        {
+            "functionName": "count",
+            "functionLabel": "Count",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "count-distinct",
+            "functionLabel": "Count (Distinct)",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "sum",
+            "functionLabel": "sum",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "avg",
+            "functionLabel": "avg",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "min",
+            "functionLabel": "min",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "max",
+            "functionLabel": "max",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "p50",
+            "functionLabel": "p50",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "p90",
+            "functionLabel": "p90",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "p95",
+            "functionLabel": "p95",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "p99",
+            "functionLabel": "p99",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "abs",
+            "functionLabel": "Abs",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "acos",
+            "functionLabel": "ArcCos",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "asin",
+            "functionLabel": "ArcSin",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "atan",
+            "functionLabel": "ArcTan",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "atan2",
+            "functionLabel": "ArcTan2",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "ceil",
+            "functionLabel": "Ceil",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "cos",
+            "functionLabel": "cos",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "exp",
+            "functionLabel": "exp",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "floor",
+            "functionLabel": "Floor",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "log",
+            "functionLabel": "log",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "log10",
+            "functionLabel": "log10",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "log2",
+            "functionLabel": "log2",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "pow",
+            "functionLabel": "pow",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "round",
+            "functionLabel": "round",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "sin",
+            "functionLabel": "sin",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "sqrt",
+            "functionLabel": "sqrt",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "tan",
+            "functionLabel": "tan",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "string_length",
+            "functionLabel": "string_length",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "char_length",
+            "functionLabel": "char_length",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "concat",
+            "functionLabel": "concat",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        },
+                        {
+                            "label": "Function",
+                            "value": "function"
+                        }
+                    ],
+                    "required": true,
+                    "min": 2
+                }
+            ],
+            "allowAddArgAt": "n"
+        },
+        {
+            "functionName": "lower",
+            "functionLabel": "lower",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "upper",
+            "functionLabel": "upper",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "substring",
+            "functionLabel": "substring",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": false
+                }
+            ]
+        },
+        {
+            "functionName": "trim",
+            "functionLabel": "trim",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "ltrim",
+            "functionLabel": "ltrim",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "rtrim",
+            "functionLabel": "rtrim",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "date_add",
+            "functionLabel": "date_add",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "date_sub",
+            "functionLabel": "date_sub",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "datediff",
+            "functionLabel": "datediff",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "from_unixtime",
+            "functionLabel": "from_unixtime",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        "field",
+                        "string"
+                    ],
+                    "required": false
+                }
+            ]
+        },
+        {
+            "functionName": "to_unixtime",
+            "functionLabel": "to_unixtime",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "array_length",
+            "functionLabel": "array_length",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Array",
+                            "value": "array"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "array_sort",
+            "functionLabel": "array_sort",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Array",
+                            "value": "array"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "array_append",
+            "functionLabel": "array_append",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Array",
+                            "value": "array"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        },
+        {
+            "functionName": "array_contains",
+            "functionLabel": "array_contains",
+            "args": [
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "Array",
+                            "value": "array"
+                        }
+                    ],
+                    "required": true
+                },
+                {
+                    "type": [
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        },
+                        {
+                            "label": "Number",
+                            "value": "number"
+                        }
+                    ],
+                    "required": true
+                }
+            ]
+        }
+    ]
\ No newline at end of file
diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index 4c9c500adb1..0282ada092c 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -721,7 +721,9 @@ const validateChartFieldsConfiguration = (
           argDefIndex = variableArgPosition;
         }
 
-        const allowedTypes = argsDefinition[argDefIndex].type;
+        const allowedTypes = argsDefinition[argDefIndex].type.map(
+          (t: any) => t.value,
+        );
 
         // Check if current argument type is among the allowed types
         if (arg && !allowedTypes.includes(arg.type)) {
@@ -1181,12 +1183,12 @@ export function addMissingArgs(fields: any): any {
   functionDef.args.forEach((argDef: any) => {
     const isArgProvided = updatedArgs.some((arg: any) => {
       // Check if the argument's type matches any of the required types
-      return argDef.type.includes(arg.type);
+      return argDef.type.map((t: any) => t.value).includes(arg.type);
     });
 
     if (!isArgProvided) {
       // If the argument is missing, add it
-      const argType = argDef.type[0]; // Always take the first type
+      const argType = argDef.type[0].value; // Always take the first type
       const defaultValue =
         argDef.defaultValue !== undefined
           ? argDef.defaultValue

From 2e2e9482905b5a2fa647ab87c5d6f7e777ce13df Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Wed, 23 Apr 2025 16:47:40 +0530
Subject: [PATCH 21/61] fix: map options for args dropdown selection

---
 .../dashboards/addPanel/dynamicFunction/SelectFunction.vue       | 1 +
 1 file changed, 1 insertion(+)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index 42eb34cc871..1605d100d70 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -55,6 +55,7 @@
             option-label="label"
             option-value="value"
             behavior="menu"
+            map-options
             emit-value
             dense
             filled

From 67d528f1071750795e166f4e49fc2355d208cf91 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 24 Apr 2025 11:12:17 +0530
Subject: [PATCH 22/61] fix: stream field selection issue

---
 .../dashboards/addPanel/StreamFieldSelect.vue | 25 ++++++++++---------
 1 file changed, 13 insertions(+), 12 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
index 4e10ce35612..e51315f7d2a 100644
--- a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
+++ b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
@@ -2,15 +2,11 @@
   <div>
     <div>
       <q-select
+        ref="streamFieldSelect"
         filled
         v-model="internalModel"
         :options="filteredOptions"
-        option-label="name"
-        option-value="name"
-        :display-value="internalModel?.field ?? 'Select a Field'"
-        map-options
         dense
-        fill-input
         use-input
         input-debounce="0"
         behavior="menu"
@@ -90,6 +86,8 @@ export default defineComponent({
       dashboardPanelDataPageKey,
     );
 
+    const streamFieldSelect = ref<any>(null);
+
     async function loadStreamFields(streamName: string) {
       try {
         if (streamName != "") {
@@ -114,6 +112,9 @@ export default defineComponent({
       if (!props.streams || props.streams.length === 0) {
         options.value = [];
         filteredOptions.value = [];
+        streamFieldSelect?.value?.updateInputValue?.(
+          internalModel.value?.field,
+        );
         return;
       }
 
@@ -136,13 +137,15 @@ export default defineComponent({
 
       // Initialize filtered options with all options
       filteredOptions.value = [...options?.value];
+
+      streamFieldSelect?.value?.updateInputValue?.(internalModel.value?.field);
     }
 
     function filterFields(val: string | object, update: any) {
       // Handle both string and object values for val
       let searchText = "";
 
-      if (val === "") {
+      if (val === "" || val === internalModel.value?.field) {
         update(() => {
           filteredOptions.value = [...options?.value];
         });
@@ -169,12 +172,8 @@ export default defineComponent({
             const streamMatches = stream?.label?.toLowerCase().includes(needle);
 
             // Then filter child fields that match
-            const matchingFields = stream?.children?.filter(
-              (field: {
-                name: string;
-                stream: { streamAlias: string; stream: string };
-                type: string;
-              }) => field?.name?.toLowerCase()?.includes(needle),
+            const matchingFields = stream?.children?.filter((field: any) =>
+              field?.name?.toLowerCase()?.includes(needle),
             );
 
             // If stream name matches or has matching fields, include in results
@@ -197,6 +196,7 @@ export default defineComponent({
         streamAlias: field?.stream?.streamAlias,
         field: field.name,
       };
+      streamFieldSelect?.value?.updateInputValue?.(field.name);
     }
 
     // Watch for v-model changes
@@ -213,6 +213,7 @@ export default defineComponent({
       filteredOptions,
       selectField,
       filterFields,
+      streamFieldSelect,
     };
   },
 });

From ea1be68675e1e3ec6bc5daaf749e2679e5e1e0f2 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 24 Apr 2025 11:54:15 +0530
Subject: [PATCH 23/61] refactor: streamline input value updates in
 StreamFieldSelect component

---
 .../dashboards/addPanel/StreamFieldSelect.vue       | 13 ++++++++-----
 1 file changed, 8 insertions(+), 5 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
index e51315f7d2a..8e4129e6e9a 100644
--- a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
+++ b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
@@ -108,13 +108,15 @@ export default defineComponent({
       }
     }
 
+    function updateInputValue(val: string) {
+      streamFieldSelect?.value?.updateInputValue?.(val);
+    }
+
     async function fetchFieldsForStreams() {
       if (!props.streams || props.streams.length === 0) {
         options.value = [];
         filteredOptions.value = [];
-        streamFieldSelect?.value?.updateInputValue?.(
-          internalModel.value?.field,
-        );
+        updateInputValue(internalModel.value?.field);
         return;
       }
 
@@ -138,7 +140,7 @@ export default defineComponent({
       // Initialize filtered options with all options
       filteredOptions.value = [...options?.value];
 
-      streamFieldSelect?.value?.updateInputValue?.(internalModel.value?.field);
+      updateInputValue(internalModel.value?.field);
     }
 
     function filterFields(val: string | object, update: any) {
@@ -196,7 +198,7 @@ export default defineComponent({
         streamAlias: field?.stream?.streamAlias,
         field: field.name,
       };
-      streamFieldSelect?.value?.updateInputValue?.(field.name);
+      updateInputValue(field.name);
     }
 
     // Watch for v-model changes
@@ -214,6 +216,7 @@ export default defineComponent({
       selectField,
       filterFields,
       streamFieldSelect,
+      updateInputValue,
     };
   },
 });

From 33f584440b89948e71f010c877186f7f3bfe7fa7 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 24 Apr 2025 12:32:25 +0530
Subject: [PATCH 24/61] refactor: improve SQL join handling by skipping invalid
 joins and conditions

---
 .../dashboard/convertDataIntoUnitValue.ts      | 18 ++++++++++++++----
 .../views/Dashboards/addPanel/AddJoinPopUp.vue | 12 ++++++------
 2 files changed, 20 insertions(+), 10 deletions(-)

diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index 0282ada092c..17e691404e6 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -1126,8 +1126,8 @@ export function buildSQLJoinsFromInput(
     const { stream, streamAlias, joinType, conditions } = join;
 
     if (!stream || !joinType || !conditions || conditions.length === 0) {
-      // Invalid join, return empty string
-      return "";
+      // Invalid join, skip it and continue to the next one
+      continue;
     }
 
     let joinConditionStrings: string[] = [];
@@ -1136,8 +1136,8 @@ export function buildSQLJoinsFromInput(
       const { leftField, rightField, operation, logicalOperator } = condition;
 
       if (!leftField?.field || !rightField?.field || !operation) {
-        // Invalid condition, return empty string
-        return "";
+        // Invalid condition, skip it and continue to the next one
+        continue;
       }
 
       const leftFieldStr = leftField.streamAlias
@@ -1153,6 +1153,11 @@ export function buildSQLJoinsFromInput(
       );
     }
 
+    // Skip joins with no valid conditions
+    if (joinConditionStrings.length === 0) {
+      continue;
+    }
+
     // Combine conditions with logical operators (e.g., AND, OR)
     const joinConditionsSQL = joinConditionStrings.join(" AND ");
 
@@ -1162,6 +1167,11 @@ export function buildSQLJoinsFromInput(
     );
   }
 
+  // Only return empty string if there are no valid joins after processing
+  if (joinClauses.length === 0) {
+    return "";
+  }
+
   return joinClauses.join(" ");
 }
 
diff --git a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
index 82fb8a82bde..b3fd53d7012 100644
--- a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
+++ b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
@@ -66,7 +66,7 @@
         <span class="tw-w-full tw-text-center tw-mt-5 tw-text-lg">On</span>
         <div
           v-for="(arg, argIndex) in modelValue.conditions"
-          :key="argIndex"
+          :key="argIndex + JSON.stringify(arg)"
           class="tw-w-full tw-flex tw-flex-col"
         >
           <div>
@@ -307,18 +307,18 @@ export default defineComponent({
       ];
     };
 
-    const filterStreamOptions = (val, update) => {
-      if (val === '') {
+    const filterStreamOptions = (val: any, update: any) => {
+      if (val === "") {
         update(() => {
           filteredStreamOptions.value = [...streamOptions?.value];
         });
         return;
       }
-      
+
       update(() => {
         const needle = val.toLowerCase();
         filteredStreamOptions.value = streamOptions?.value?.filter(
-          stream => stream?.label?.toLowerCase()?.includes(needle)
+          (stream: any) => stream?.label?.toLowerCase()?.includes(needle),
         );
       });
     };
@@ -332,7 +332,7 @@ export default defineComponent({
       operationOptions,
       getStreamsBasedJoinIndex,
       filteredStreamOptions,
-      filterStreamOptions
+      filterStreamOptions,
     };
   },
 });

From db6d05e773cc4a949e0ad502f515981c83cdabcd Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 24 Apr 2025 12:46:08 +0530
Subject: [PATCH 25/61] fix: add validation for chart type and fields in chart
 configuration

---
 web/src/utils/dashboard/convertDataIntoUnitValue.ts | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index 17e691404e6..28be8324e6e 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -499,6 +499,10 @@ const validateChartFieldsConfiguration = (
   xAxisLabel: string = "X-Axis",
   yAxisLabel: string = "Y-Axis",
 ) => {
+  if (!chartType || !fields) {
+    return;
+  }
+
   switch (chartType) {
     case "donut":
     case "pie": {

From d5f6196a5d372cbe634b5657904f5c02995de36e Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 24 Apr 2025 15:27:25 +0530
Subject: [PATCH 26/61] fix: ensure dashboard data is loaded before generating
 SQL queries in addPanel component

---
 web/src/views/Dashboards/addPanel/AddPanel.vue | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/web/src/views/Dashboards/addPanel/AddPanel.vue b/web/src/views/Dashboards/addPanel/AddPanel.vue
index 70a49da96a1..1a180fdd318 100644
--- a/web/src/views/Dashboards/addPanel/AddPanel.vue
+++ b/web/src/views/Dashboards/addPanel/AddPanel.vue
@@ -816,10 +816,19 @@ export default defineComponent({
       //event listener before unload and data is updated
       window.addEventListener("beforeunload", beforeUnloadHandler);
       // console.time("add panel loadDashboard");
-      loadDashboard();
+      await loadDashboard();
 
       registerAiContextHandler();
       // console.timeEnd("add panel loadDashboard");
+      
+      // Call makeAutoSQLQuery after dashboard data is loaded
+      // Only generate SQL if we're in auto query mode
+      if (!editMode.value && 
+          !dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].customQuery) {
+        await makeAutoSQLQuery();
+      }
     });
 
     let list = computed(function () {

From 16abef82105c3596173802e651a4d6b6df3fcbd1 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 24 Apr 2025 15:29:13 +0530
Subject: [PATCH 27/61] fix: update input value on blur event in
 StreamFieldSelect component

---
 web/src/components/dashboards/addPanel/StreamFieldSelect.vue | 1 +
 1 file changed, 1 insertion(+)

diff --git a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
index 8e4129e6e9a..5cf0b7aeb9d 100644
--- a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
+++ b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
@@ -12,6 +12,7 @@
         behavior="menu"
         hide-selected
         @filter="filterFields"
+        @blur="updateInputValue(internalModel.value?.field)"
       >
         <template v-slot:option="scope">
           <q-expansion-item

From 8c6336163ac459783cb8ba3619aff8c260bb2d56 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 28 Apr 2025 14:50:02 +0530
Subject: [PATCH 28/61] feat: add data-test attributes for improved testing in
 dynamic function components

---
 .../components/dashboards/addPanel/StreamFieldSelect.vue | 1 +
 .../addPanel/dynamicFunction/DynamicFunctionPopUp.vue    | 9 +++++----
 .../addPanel/dynamicFunction/RawQueryBuilder.vue         | 2 ++
 .../addPanel/dynamicFunction/SelectFunction.vue          | 9 ++++++++-
 4 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
index 5cf0b7aeb9d..f652f4d6620 100644
--- a/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
+++ b/web/src/components/dashboards/addPanel/StreamFieldSelect.vue
@@ -13,6 +13,7 @@
         hide-selected
         @filter="filterFields"
         @blur="updateInputValue(internalModel.value?.field)"
+        data-test="stream-field-select"
       >
         <template v-slot:option="scope">
           <q-expansion-item
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index ca9a5f67b01..140b4b6bb56 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -8,19 +8,20 @@
       active-color="primary"
       indicator-color="primary"
       narrow-indicator
+      data-test="dynamic-function-popup-tabs"
     >
-      <q-tab name="build" label="Build" />
-      <q-tab name="raw" label="Raw" />
+      <q-tab name="build" label="Build" data-test="dynamic-function-popup-tab-build" />
+      <q-tab name="raw" label="Raw" data-test="dynamic-function-popup-tab-raw" />
     </q-tabs>
 
     <q-separator />
 
     <q-tab-panels v-model="fields.type" animated>
       <q-tab-panel name="build">
-        <SelectFunction v-model="fields" />
+        <SelectFunction v-model="fields" data-test="dynamic-function-popup-select-function" />
       </q-tab-panel>
       <q-tab-panel name="raw">
-        <RawQueryBuilder v-model="fields" />
+        <RawQueryBuilder v-model="fields" data-test="dynamic-function-popup-raw-query-builder" />
       </q-tab-panel>
     </q-tab-panels>
   </div>
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue b/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
index 5aaaf30cf3c..0ca7de0fb61 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
@@ -7,6 +7,7 @@
       filled
       autogrow
       class="showLabelOnTop"
+      data-test="dynamic-function-popup-raw-query-input"
     />
     <q-input
       v-model="fields.alias"
@@ -19,6 +20,7 @@
       filled
       dense
       label-slot
+      data-test="dynamic-function-popup-raw-query-alias-input"
     />
   </div>
 </template>
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index 1605d100d70..e8ed7deaf7c 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -61,7 +61,7 @@
             filled
             label="Select Type"
             data-test="dashboard-y-item-dropdown"
-            class="tw-w-40 tw-min-w-40"
+            :data-test="`dashboard-function-dropdown-arg-type-selector-${argIndex}`"
           />
 
           <!-- Render different input types based on validation -->
@@ -88,6 +88,7 @@
             <StreamFieldSelect
               :streams="getAllSelectedStreams()"
               v-model="fields.args[argIndex].value"
+              :data-test="`dashboard-function-dropdown-arg-field-selector-${argIndex}`"
             />
           </div>
 
@@ -99,6 +100,7 @@
             :required="isRequired(fields.functionName, argIndex)"
             class="tw-w-52"
             dense
+            :data-test="`dashboard-function-dropdown-arg-string-input-${argIndex}`"
           />
 
           <q-input
@@ -109,12 +111,14 @@
             :required="isRequired(fields.functionName, argIndex)"
             class="tw-w-52"
             dense
+            :data-test="`dashboard-function-dropdown-arg-number-input-${argIndex}`"
           />
 
           <SelectFunction
             v-if="fields.args[argIndex]?.type === 'function'"
             class="tw-ml-4"
             v-model="fields.args[argIndex].value"
+            :data-test="`dashboard-function-dropdown-arg-function-input-${argIndex}`"
           />
 
           <!-- histogram interval for sql queries -->
@@ -127,6 +131,7 @@
               }
             "
             class="tw-w-52"
+            :data-test="`dashboard-function-dropdown-arg-histogram-interval-input-${argIndex}`"
           />
 
           <!-- Remove argument button -->
@@ -138,6 +143,7 @@
             round
             @click="removeArgument(argIndex)"
             class="tw-h-10 tw-w-10"
+            :data-test="`dashboard-function-dropdown-arg-remove-button-${argIndex}`"
           />
         </div>
       </div>
@@ -153,6 +159,7 @@
       class="tw-mt-3"
       no-caps
       dense
+      :data-test="`dashboard-function-dropdown-add-argument-button`"
     />
   </div>
 </template>

From e53ce2af068c2f77c0c26a0a15e4840bed8a307d Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 28 Apr 2025 15:28:19 +0530
Subject: [PATCH 29/61] chore: remove outdated data-test attribute from
 SelectFunction component

---
 .../dashboards/addPanel/dynamicFunction/SelectFunction.vue       | 1 -
 1 file changed, 1 deletion(-)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index e8ed7deaf7c..f6bb80fb0b6 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -60,7 +60,6 @@
             dense
             filled
             label="Select Type"
-            data-test="dashboard-y-item-dropdown"
             :data-test="`dashboard-function-dropdown-arg-type-selector-${argIndex}`"
           />
 

From a9de8f4d89949be43d87767780df1dba8e77960f Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 28 Apr 2025 16:16:57 +0530
Subject: [PATCH 30/61] fix: timeseries conversion issue

---
 web/src/utils/dashboard/convertSQLData.ts | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/web/src/utils/dashboard/convertSQLData.ts b/web/src/utils/dashboard/convertSQLData.ts
index 14f3f33cfbb..6b6a1c4ccfe 100644
--- a/web/src/utils/dashboard/convertSQLData.ts
+++ b/web/src/utils/dashboard/convertSQLData.ts
@@ -1944,7 +1944,8 @@ export const convertSQLData = async (
         const field = panelSchema.queries[0].fields?.x.find(
           (it: any) =>
             it.functionName == "histogram" &&
-            it.column == store.state.zoConfig.timestamp_column,
+            it?.args?.[0]?.value?.field ==
+              store.state.zoConfig.timestamp_column,
         );
         // if histogram
         if (field) {
@@ -2250,12 +2251,12 @@ export const convertSQLData = async (
     const field = panelSchema.queries[0].fields?.x.find(
       (it: any) =>
         it.functionName == "histogram" &&
-        it.column == store.state.zoConfig.timestamp_column,
+        it?.args?.[0]?.value?.field == store.state.zoConfig.timestamp_column,
     );
 
     const timestampField = panelSchema.queries[0].fields?.x.find(
       (it: any) =>
-        !it.functionName && it.column == store.state.zoConfig.timestamp_column,
+        !it.functionName && it.args[0] == store.state.zoConfig.timestamp_column,
     );
 
     //if x axis has time series

From ce7f60bb44cc97be76ea73820b6c14ea56ee8e71 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 28 Apr 2025 17:21:58 +0530
Subject: [PATCH 31/61] fix: comparison msg deep copy

---
 web/src/views/Dashboards/addPanel/AddPanel.vue | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/web/src/views/Dashboards/addPanel/AddPanel.vue b/web/src/views/Dashboards/addPanel/AddPanel.vue
index 1a180fdd318..7cf66979ddf 100644
--- a/web/src/views/Dashboards/addPanel/AddPanel.vue
+++ b/web/src/views/Dashboards/addPanel/AddPanel.vue
@@ -820,13 +820,15 @@ export default defineComponent({
 
       registerAiContextHandler();
       // console.timeEnd("add panel loadDashboard");
-      
+
       // Call makeAutoSQLQuery after dashboard data is loaded
       // Only generate SQL if we're in auto query mode
-      if (!editMode.value && 
-          !dashboardPanelData.data.queries[
-            dashboardPanelData.layout.currentQueryIndex
-          ].customQuery) {
+      if (
+        !editMode.value &&
+        !dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].customQuery
+      ) {
         await makeAutoSQLQuery();
       }
     });
@@ -942,8 +944,10 @@ export default defineComponent({
       if (isInitialDashboardPanelData() && !editMode.value) return false;
       //compare chartdata and dashboardpaneldata and variables data as well
       return (
-        !isEqual(chartData.value, dashboardPanelData.data) ||
-        !isEqual(variablesData, updatedVariablesData)
+        !isEqual(
+          JSON.parse(JSON.stringify(chartData.value ?? {})),
+          JSON.parse(JSON.stringify(dashboardPanelData.data ?? {})),
+        ) || !isEqual(variablesData, updatedVariablesData)
       );
     });
 

From 8d56b7b98ccd2f689eb09f5e5904820d416859cd Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 29 Apr 2025 11:00:28 +0530
Subject: [PATCH 32/61] fix: do not append stream if join is not present

---
 .../addPanel/DashboardGeoMapsQueryBuilder.vue |  6 +-
 .../addPanel/DashboardMapsQueryBuilder.vue    |  6 +-
 .../addPanel/DashboardQueryBuilder.vue        |  6 +-
 .../addPanel/DashboardSankeyChartBuilder.vue  |  6 +-
 web/src/composables/useDashboardPanel.ts      | 74 +++++++++++++++----
 .../dashboard/convertDataIntoUnitValue.ts     | 12 ++-
 6 files changed, 90 insertions(+), 20 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
index 0c16e5dd4be..79ce6cfddf7 100644
--- a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
@@ -722,7 +722,11 @@ export default defineComponent({
         field,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
     };
 
diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index 1e4eb61dfb7..2f465ba6e01 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -587,7 +587,11 @@ export default defineComponent({
         field,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
     };
 
diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index a015c15cfb7..d79c751f0bf 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -1545,7 +1545,11 @@ export default defineComponent({
         field,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
     };
 
diff --git a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
index 067329a133b..576f475b023 100644
--- a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
@@ -720,7 +720,11 @@ export default defineComponent({
         field,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
     };
 
diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index d7664c26dce..70eaac76034 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -1356,7 +1356,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
   };
 
   const removeXAxisItemByIndex = (index: number) => {
-      if (index >= 0) {
+    if (index >= 0) {
       dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
       ].fields.x.splice(index, 1);
@@ -2476,7 +2476,11 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
           field,
           dashboardPanelData.data.queries[
             dashboardPanelData.layout.currentQueryIndex
-          ].fields?.stream,
+          ]?.joins?.length
+            ? dashboardPanelData.data.queries[
+                dashboardPanelData.layout.currentQueryIndex
+              ].fields?.stream
+            : "",
         );
 
         // Skip fields that return empty expressions
@@ -2504,7 +2508,11 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       ].joins,
       dashboardPanelData.data.queries[
         dashboardPanelData.layout.currentQueryIndex
-      ].fields?.stream,
+      ]?.joins?.length
+        ? dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields?.stream
+        : "",
     )}`;
 
     // 3. Filter
@@ -2662,7 +2670,11 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         name,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
 
       query += sqlField ? `${sqlField} as "${name.alias}",  ` : "";
@@ -2671,7 +2683,11 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         value_for_maps,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
       query += sqlValue ? `${sqlValue} as "${value_for_maps.alias}"` : "";
 
@@ -2759,13 +2775,21 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         latitude,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
       const sqlLongitude = buildSQLQueryFromInput(
         longitude,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
       query =
         sqlLatitude && sqlLongitude
@@ -2781,7 +2805,11 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         latitude,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
       query = sqlLatitude
         ? `SELECT ${sqlLatitude} as "${latitude.alias}"`
@@ -2792,7 +2820,11 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         longitude,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
       query = sqlLongitude
         ? `SELECT ${sqlLongitude} as "${longitude.alias}"`
@@ -2806,7 +2838,11 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
           weight,
           dashboardPanelData.data.queries[
             dashboardPanelData.layout.currentQueryIndex
-          ].fields?.stream,
+          ]?.joins?.length
+            ? dashboardPanelData.data.queries[
+                dashboardPanelData.layout.currentQueryIndex
+              ].fields?.stream
+            : "",
         );
         query += sqlWeight ? `, ${sqlWeight} as "${weight.alias}"` : `, `;
       }
@@ -2911,7 +2947,11 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         source,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
 
       if (sqlSource) {
@@ -2925,7 +2965,11 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         target,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
       if (sqlTarget) {
         selectFields.push(`${sqlTarget} as ${target.alias}`);
@@ -2964,7 +3008,11 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         value,
         dashboardPanelData.data.queries[
           dashboardPanelData.layout.currentQueryIndex
-        ].fields?.stream,
+        ]?.joins?.length
+          ? dashboardPanelData.data.queries[
+              dashboardPanelData.layout.currentQueryIndex
+            ].fields?.stream
+          : "",
       );
       if (sqlValue) {
         selectFields.push(`${sqlValue} as "${value.alias}"`);
diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index 28be8324e6e..b395b1096df 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -1051,7 +1051,9 @@ export function buildSQLQueryFromInput(
       sqlArgs.push(
         argValue.streamAlias
           ? argValue.streamAlias + "." + argValue.field
-          : defaultStream + "." + argValue.field,
+          : defaultStream
+            ? defaultStream + "." + argValue.field
+            : argValue.field,
       );
     } else if (argType === "string" || argType === "histogramInterval") {
       // Wrap strings in quotes if they are not already wrapped
@@ -1146,11 +1148,15 @@ export function buildSQLJoinsFromInput(
 
       const leftFieldStr = leftField.streamAlias
         ? `${leftField.streamAlias}.${leftField.field}`
-        : `${defaultStream}.${leftField.field}`;
+        : defaultStream
+          ? `${defaultStream}.${leftField.field}`
+          : leftField.field;
 
       const rightFieldStr = rightField.streamAlias
         ? `${rightField.streamAlias}.${rightField.field}`
-        : `${defaultStream}.${rightField.field}`;
+        : defaultStream
+          ? `${defaultStream}.${rightField.field}`
+          : rightField.field;
 
       joinConditionStrings.push(
         `${leftFieldStr} ${operation} ${rightFieldStr}`,

From 6ddbfc6abd8c330b0d3eb9a77652415f436939f9 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 29 Apr 2025 11:10:25 +0530
Subject: [PATCH 33/61] style: adjust width of the type selector dropdown in
 SelectFunction component

---
 .../dashboards/addPanel/dynamicFunction/SelectFunction.vue       | 1 +
 1 file changed, 1 insertion(+)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index f6bb80fb0b6..b49e7e37318 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -60,6 +60,7 @@
             dense
             filled
             label="Select Type"
+            class="tw-w-40 tw-min-w-40"
             :data-test="`dashboard-function-dropdown-arg-type-selector-${argIndex}`"
           />
 

From 98296f6eb1a83d170991c6f303cf4452a38a220e Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 29 Apr 2025 11:10:50 +0530
Subject: [PATCH 34/61] fix: update timestamp field comparison to handle
 optional chaining

---
 web/src/utils/dashboard/convertSQLData.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/web/src/utils/dashboard/convertSQLData.ts b/web/src/utils/dashboard/convertSQLData.ts
index 6b6a1c4ccfe..cccd3b2298f 100644
--- a/web/src/utils/dashboard/convertSQLData.ts
+++ b/web/src/utils/dashboard/convertSQLData.ts
@@ -2256,7 +2256,8 @@ export const convertSQLData = async (
 
     const timestampField = panelSchema.queries[0].fields?.x.find(
       (it: any) =>
-        !it.functionName && it.args[0] == store.state.zoConfig.timestamp_column,
+        !it.functionName &&
+        it?.args?.[0]?.value?.field == store.state.zoConfig.timestamp_column,
     );
 
     //if x axis has time series

From 5d9e0e63995c2708c75469e1afbe6b8e8ed26b55 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 29 Apr 2025 17:07:45 +0530
Subject: [PATCH 35/61] fix: custom query fields selection issue

---
 .../addPanel/DashboardQueryBuilder.vue        | 30 +++++++++----------
 .../dashboards/addPanel/FieldList.vue         | 21 ++++++++++++-
 web/src/composables/useDashboardPanel.ts      |  8 ++---
 3 files changed, 39 insertions(+), 20 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index d79c751f0bf..4dee2b2ecfc 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -109,11 +109,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     size="sm"
                     :label="xLabel[index]"
                     class="q-pl-sm"
-                    :data-test="`dashboard-x-item-${itemX?.column}`"
+                    :data-test="`dashboard-x-item-${itemX?.alias}`"
                   >
                     <q-menu
                       class="q-pa-md"
-                      :data-test="`dashboard-x-item-${itemX?.column}-menu`"
+                      :data-test="`dashboard-x-item-${itemX?.alias}-menu`"
                     >
                       <div>
                         <div class="">
@@ -238,7 +238,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     style="height: 100%"
                     size="xs"
                     dense
-                    :data-test="`dashboard-x-item-${itemX?.column}-remove`"
+                    :data-test="`dashboard-x-item-${itemX?.alias}-remove`"
                     @click="removeXAxisItemByIndex(index)"
                     icon="close"
                   />
@@ -368,11 +368,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     size="sm"
                     :label="bLabel[index]"
                     class="q-pl-sm"
-                    :data-test="`dashboard-b-item-${itemB?.column}`"
+                    :data-test="`dashboard-b-item-${itemB?.alias}`"
                   >
                     <q-menu
                       class="q-pa-md"
-                      :data-test="`dashboard-b-item-${itemB?.column}-menu`"
+                      :data-test="`dashboard-b-item-${itemB?.alias}-menu`"
                     >
                       <div>
                         <div class="">
@@ -499,7 +499,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     style="height: 100%"
                     size="xs"
                     dense
-                    :data-test="`dashboard-b-item-${itemB?.column}-remove`"
+                    :data-test="`dashboard-b-item-${itemB?.alias}-remove`"
                     @click="removeBreakdownItemByIndex(index)"
                     icon="close"
                   />
@@ -606,12 +606,12 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 :no-wrap="true"
                 size="sm"
                 :label="yLabel[index]"
-                :data-test="`dashboard-y-item-${itemY?.column}`"
+                :data-test="`dashboard-y-item-${itemY?.alias}`"
                 class="q-pl-sm"
               >
                 <q-menu
                   class="q-pa-md tw-overflow-scroll"
-                  :data-test="`dashboard-y-item-${itemY?.column}-menu`"
+                  :data-test="`dashboard-y-item-${itemY?.alias}-menu`"
                 >
                   <div>
                     <div class="row q-mb-sm" style="align-items: center">
@@ -806,7 +806,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 style="height: 100%"
                 size="xs"
                 dense
-                :data-test="`dashboard-y-item-${itemY?.column}-remove`"
+                :data-test="`dashboard-y-item-${itemY?.alias}-remove`"
                 @click="removeYAxisItemByIndex(index)"
                 icon="close"
               />
@@ -908,12 +908,12 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                   color="primary"
                   size="sm"
                   :label="zLabel[index]"
-                  :data-test="`dashboard-z-item-${itemZ?.column}`"
+                  :data-test="`dashboard-z-item-${itemZ?.alias}`"
                   class="q-pl-sm"
                 >
                   <q-menu
                     class="q-pa-md"
-                    :data-test="`dashboard-z-item-${itemZ?.column}-menu`"
+                    :data-test="`dashboard-z-item-${itemZ?.alias}-menu`"
                   >
                     <div>
                       <div class="row q-mb-sm" style="align-items: center">
@@ -1054,7 +1054,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                   style="height: 100%"
                   size="xs"
                   dense
-                  :data-test="`dashboard-z-item-${itemZ?.column}-remove`"
+                  :data-test="`dashboard-z-item-${itemZ?.alias}-remove`"
                   @click="removeZAxisItemByIndex(index)"
                   icon="close"
                 />
@@ -1292,8 +1292,8 @@ export default defineComponent({
           const dragElement = dashboardPanelData.meta.dragAndDrop.dragElement;
 
           // find first arg which is of type field
-          const firstFieldTypeArg = dragElement.args.find(
-            (arg: any) => arg.type === "field",
+          const firstFieldTypeArg = dragElement?.args?.find(
+            (arg: any) => arg?.type === "field",
           )?.value;
 
           if (!firstFieldTypeArg) {
@@ -1539,7 +1539,7 @@ export default defineComponent({
           dashboardPanelData.layout.currentQueryIndex
         ].customQuery
       ) {
-        return field?.column;
+        return field?.alias;
       }
       return buildSQLQueryFromInput(
         field,
diff --git a/web/src/components/dashboards/addPanel/FieldList.vue b/web/src/components/dashboards/addPanel/FieldList.vue
index 9b157dba0d8..00bc5b89e6d 100644
--- a/web/src/components/dashboards/addPanel/FieldList.vue
+++ b/web/src/components/dashboards/addPanel/FieldList.vue
@@ -549,7 +549,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               color="white"
               text-color="primary"
               :options="userDefinedSchemaBtnGroupOption"
-              >
+            >
               <!-- @update:model-value="toggleSchema" -->
               <template v-slot:user_defined_slot>
                 <q-icon name="person"></q-icon>
@@ -932,6 +932,25 @@ export default defineComponent({
 
     const flattenGroupedFields = computed(() => {
       const flattenedFields: any[] = [];
+
+      dashboardPanelData.meta.stream.customQueryFields.forEach((field: any) => {
+        flattenedFields.push({
+          name: field.name,
+          type: field.type,
+          isGroup: false,
+        });
+      });
+
+      dashboardPanelData.meta.stream.vrlFunctionFieldList.forEach(
+        (field: any) => {
+          flattenedFields.push({
+            name: field.name,
+            type: field.type,
+            isGroup: false,
+          });
+        },
+      );
+
       dashboardPanelData.meta.streamFields.groupedFields.forEach(
         (group: any) => {
           // Add a group header row
diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index 70eaac76034..481d4d02e9f 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -1318,7 +1318,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
             dashboardPanelData.layout.currentQueryIndex
           ].customQuery && !it.isDerived
             ? "x_axis_" + (index + 1)
-            : it?.column),
+            : it?.alias),
     );
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
@@ -1329,7 +1329,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
             dashboardPanelData.layout.currentQueryIndex
           ].customQuery && !it.isDerived
             ? "y_axis_" + (index + 1)
-            : it?.column),
+            : it?.alias),
     );
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
@@ -1340,7 +1340,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
             dashboardPanelData.layout.currentQueryIndex
           ].customQuery && !it.isDerived
             ? "z_axis_" + (index + 1)
-            : it?.column),
+            : it?.alias),
     );
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
@@ -1351,7 +1351,7 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
             dashboardPanelData.layout.currentQueryIndex
           ].customQuery && !it.isDerived
             ? "breakdown_" + (index + 1)
-            : it?.column),
+            : it?.alias),
     );
   };
 

From 5e6b1c042429b874676c2e4cde1a3888bd05bdc1 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Fri, 2 May 2025 14:44:53 +0530
Subject: [PATCH 36/61] add: backend changes

---
 src/config/src/meta/dashboards/mod.rs    |  23 +
 src/config/src/meta/dashboards/v1/mod.rs |   1 +
 src/config/src/meta/dashboards/v2/mod.rs |   1 +
 src/config/src/meta/dashboards/v3/mod.rs |   1 +
 src/config/src/meta/dashboards/v4/mod.rs |   1 +
 src/config/src/meta/dashboards/v5/mod.rs |   1 +
 src/config/src/meta/dashboards/v6/mod.rs | 632 +++++++++++++++++++++++
 src/handler/http/models/dashboards.rs    |  13 +-
 src/infra/src/table/dashboards.rs        |  12 +-
 src/service/dashboards/mod.rs            |   6 +-
 10 files changed, 687 insertions(+), 4 deletions(-)
 create mode 100644 src/config/src/meta/dashboards/v6/mod.rs

diff --git a/src/config/src/meta/dashboards/mod.rs b/src/config/src/meta/dashboards/mod.rs
index 9a3beddc81b..ff587b5cf30 100644
--- a/src/config/src/meta/dashboards/mod.rs
+++ b/src/config/src/meta/dashboards/mod.rs
@@ -37,6 +37,7 @@ pub struct Dashboard {
     pub v3: Option<v3::Dashboard>,
     pub v4: Option<v4::Dashboard>,
     pub v5: Option<v5::Dashboard>,
+    pub v6: Option<v6::Dashboard>,
     pub version: i32,
     pub hash: String,
     #[serde(default)]
@@ -51,6 +52,7 @@ impl Dashboard {
             3 => self.v3.as_ref().map(|inner| inner.dashboard_id.as_str()),
             4 => self.v4.as_ref().map(|inner| inner.dashboard_id.as_str()),
             5 => self.v5.as_ref().map(|inner| inner.dashboard_id.as_str()),
+            6 => self.v6.as_ref().map(|inner| inner.dashboard_id.as_str()),
             _ => None,
         }
     }
@@ -82,6 +84,11 @@ impl Dashboard {
                 v5: Some(inner),
                 ..
             } => inner.dashboard_id = dashboard_id,
+            Self {
+                version: 6,
+                v6: Some(inner),
+                ..
+            } => inner.dashboard_id = dashboard_id,
             _ => {}
         };
     }
@@ -97,6 +104,7 @@ impl Dashboard {
             3 => self.v3.as_ref().map(|inner| inner.owner.as_str()),
             4 => self.v4.as_ref().map(|inner| inner.owner.as_str()),
             5 => self.v5.as_ref().map(|inner| inner.owner.as_str()),
+            6 => self.v6.as_ref().map(|inner| inner.owner.as_str()),
             _ => None,
         }
     }
@@ -128,6 +136,11 @@ impl Dashboard {
                 v5: Some(inner),
                 ..
             } => inner.owner = owner,
+            Self {
+                version: 6,
+                v6: Some(inner),
+                ..
+            } => inner.owner = owner,
             _ => {}
         };
     }
@@ -139,6 +152,7 @@ impl Dashboard {
             3 => self.v3.as_ref().map(|inner| inner.title.as_str()),
             4 => self.v4.as_ref().map(|inner| inner.title.as_str()),
             5 => self.v5.as_ref().map(|inner| inner.title.as_str()),
+            6 => self.v6.as_ref().map(|inner| inner.title.as_str()),
             _ => None,
         }
     }
@@ -170,6 +184,11 @@ impl Dashboard {
                 v5: Some(inner),
                 ..
             } => inner.title = title,
+            Self {
+                version: 6,
+                v6: Some(inner),
+                ..
+            } => inner.title = title,
             _ => {}
         };
     }
@@ -181,6 +200,7 @@ impl Dashboard {
             3 => self.v3.as_ref().map(|inner| inner.description.as_str()),
             4 => self.v4.as_ref().map(|inner| inner.description.as_str()),
             5 => self.v5.as_ref().map(|inner| inner.description.as_str()),
+            6 => self.v6.as_ref().map(|inner| inner.description.as_str()),
             _ => None,
         }
     }
@@ -192,6 +212,7 @@ impl Dashboard {
             3 => self.v3.as_ref().map(|inner| inner.role.as_str()),
             4 => self.v4.as_ref().map(|inner| inner.role.as_str()),
             5 => self.v5.as_ref().map(|inner| inner.role.as_str()),
+            6 => self.v6.as_ref().map(|inner| inner.role.as_str()),
             _ => None,
         }
     }
@@ -209,6 +230,7 @@ impl Dashboard {
             3 => self.v3.as_ref().map(|inner| inner.created),
             4 => self.v4.as_ref().map(|inner| inner.created),
             5 => self.v5.as_ref().map(|inner| inner.created),
+            6 => self.v6.as_ref().map(|inner| inner.created),
             _ => None,
         }
     }
@@ -220,6 +242,7 @@ pub mod v2;
 pub mod v3;
 pub mod v4;
 pub mod v5;
+pub mod v6;
 
 pub fn datetime_now() -> DateTime<FixedOffset> {
     Utc::now().with_timezone(&FixedOffset::east_opt(0).expect(
diff --git a/src/config/src/meta/dashboards/v1/mod.rs b/src/config/src/meta/dashboards/v1/mod.rs
index bba83b44c0a..e17c101d798 100644
--- a/src/config/src/meta/dashboards/v1/mod.rs
+++ b/src/config/src/meta/dashboards/v1/mod.rs
@@ -60,6 +60,7 @@ impl From<Dashboard> for super::Dashboard {
             v3: None,
             v4: None,
             v5: None,
+            v6: None,
             version,
             hash,
             updated_at,
diff --git a/src/config/src/meta/dashboards/v2/mod.rs b/src/config/src/meta/dashboards/v2/mod.rs
index a0707b92338..502567075d9 100644
--- a/src/config/src/meta/dashboards/v2/mod.rs
+++ b/src/config/src/meta/dashboards/v2/mod.rs
@@ -61,6 +61,7 @@ impl From<Dashboard> for super::Dashboard {
             v3: None,
             v4: None,
             v5: None,
+            v6: None,
             version,
             hash,
             updated_at,
diff --git a/src/config/src/meta/dashboards/v3/mod.rs b/src/config/src/meta/dashboards/v3/mod.rs
index c65b86405f9..df58620d2d5 100644
--- a/src/config/src/meta/dashboards/v3/mod.rs
+++ b/src/config/src/meta/dashboards/v3/mod.rs
@@ -63,6 +63,7 @@ impl From<Dashboard> for super::Dashboard {
             v3: Some(value),
             v4: None,
             v5: None,
+            v6: None,
             version,
             hash,
             updated_at,
diff --git a/src/config/src/meta/dashboards/v4/mod.rs b/src/config/src/meta/dashboards/v4/mod.rs
index 71c0c9da825..c0a5559438a 100644
--- a/src/config/src/meta/dashboards/v4/mod.rs
+++ b/src/config/src/meta/dashboards/v4/mod.rs
@@ -63,6 +63,7 @@ impl From<Dashboard> for super::Dashboard {
             v3: None,
             v4: Some(value),
             v5: None,
+            v6: None,
             version,
             hash,
             updated_at,
diff --git a/src/config/src/meta/dashboards/v5/mod.rs b/src/config/src/meta/dashboards/v5/mod.rs
index 88387dcc472..985c529eab0 100644
--- a/src/config/src/meta/dashboards/v5/mod.rs
+++ b/src/config/src/meta/dashboards/v5/mod.rs
@@ -63,6 +63,7 @@ impl From<Dashboard> for super::Dashboard {
             v3: None,
             v4: None,
             v5: Some(value),
+            v6: None,
             version,
             hash,
             updated_at,
diff --git a/src/config/src/meta/dashboards/v6/mod.rs b/src/config/src/meta/dashboards/v6/mod.rs
new file mode 100644
index 00000000000..ba6a2f5d81d
--- /dev/null
+++ b/src/config/src/meta/dashboards/v6/mod.rs
@@ -0,0 +1,632 @@
+// Copyright 2025 OpenObserve Inc.
+//
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU Affero General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// This program is distributed in the hope that it will be useful
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU Affero General Public License for more details.
+//
+// You should have received a copy of the GNU Affero General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+use std::hash::{Hash, Hasher};
+
+use chrono::{DateTime, FixedOffset};
+use serde::{Deserialize, Serialize};
+use utoipa::ToSchema;
+
+use super::{OrdF64, datetime_now};
+use crate::meta::stream::StreamType;
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Dashboard {
+    version: i32,
+    #[serde(default)]
+    pub dashboard_id: String,
+    pub title: String,
+    pub description: String,
+    #[serde(default)]
+    pub role: String,
+    #[serde(default)]
+    pub owner: String,
+    #[serde(default = "datetime_now")]
+    #[schema(value_type = String, format = DateTime)]
+    pub created: DateTime<FixedOffset>,
+    #[serde(default)]
+    pub tabs: Vec<Tab>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub variables: Option<Variables>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub default_datetime_duration: Option<DateTimeOptions>,
+    #[serde(default, skip_serializing)]
+    pub updated_at: i64,
+}
+
+impl From<Dashboard> for super::Dashboard {
+    fn from(value: Dashboard) -> Self {
+        let version: i32 = 6;
+
+        let mut hasher = std::hash::DefaultHasher::new();
+        hasher.write_i32(version);
+        value.hash(&mut hasher);
+        let hash = hasher.finish().to_string();
+        let updated_at = value.updated_at;
+
+        Self {
+            v1: None,
+            v2: None,
+            v3: None,
+            v4: None,
+            v5: None,
+            v6: Some(value),
+            version,
+            hash,
+            updated_at,
+        }
+    }
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Layout {
+    pub x: i64,
+    pub y: i64,
+    pub w: i64,
+    pub h: i64,
+    pub i: i64,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Tab {
+    pub tab_id: String,
+    pub name: String,
+    #[serde(default)]
+    pub panels: Vec<Panel>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Panel {
+    pub id: String,
+    #[serde(rename = "type")]
+    pub typ: String,
+    pub title: String,
+    pub description: String,
+    pub config: PanelConfig,
+    #[serde(default)]
+    pub query_type: String,
+    pub queries: Vec<Query>,
+    pub layout: Layout,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub html_content: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub markdown_content: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub custom_chart_content: Option<String>,
+}
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Query {
+    pub query: Option<String>,
+    pub vrl_function_query: Option<String>,
+    pub custom_query: bool,
+    pub fields: PanelFields,
+    pub config: QueryConfig,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub joins: Option<Vec<Join>>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct PanelFields {
+    pub stream: String,
+    pub stream_type: StreamType,
+    pub x: Vec<AxisItem>,
+    pub y: Vec<AxisItem>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub z: Option<Vec<AxisItem>>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub breakdown: Option<Vec<AxisItem>>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub latitude: Option<AxisItem>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub longitude: Option<AxisItem>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub weight: Option<AxisItem>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub name: Option<AxisItem>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub value_for_maps: Option<AxisItem>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub source: Option<AxisItem>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub target: Option<AxisItem>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub value: Option<AxisItem>,
+    pub filter: PanelFilter,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "lowercase")]
+pub enum AxisType {
+    Build,
+    Raw,
+    Custom,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct AxisItem {
+    pub label: String,
+    pub alias: String,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub column: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    #[serde(rename = "type")]
+    pub typ: Option<AxisType>,
+    pub color: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub function_name: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub sort_by: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub args: Option<Vec<AxisArg>>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub is_derived: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub having_conditions: Option<Vec<HavingConditions>>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct HavingConditions {
+    value: Option<OrdF64>,
+    operator: Option<String>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct AxisArg {
+    #[serde(rename = "type")]
+    pub typ: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub value: Option<AxisArgValueWrapper>,
+}
+
+#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, ToSchema, Hash)]
+#[serde(untagged)]
+pub enum AxisArgValueWrapper {
+    Object(AxisArgValue),
+    String(String),
+    Number(OrdF64),
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct AxisArgValue {
+    pub field: Option<String>,
+    pub stream_alias: Option<String>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Join {
+    pub stream: String,
+    pub stream_alias: String,
+    pub join_type: String,
+    pub conditions: Vec<JoinCondition>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct JoinCondition {
+    pub left_field: SelectedField,
+    pub right_field: SelectedField,
+    pub operation: String,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct SelectedField {
+    pub stream_alias: Option<String>,
+    pub field: String,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(untagged, rename_all = "camelCase")]
+pub enum PanelFilter {
+    #[serde(rename = "condition")]
+    Condition(FilterCondition),
+    #[serde(rename = "group")]
+    Group(GroupType),
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct GroupType {
+    pub filter_type: String,
+    pub logical_operator: String,
+    pub conditions: Vec<PanelFilter>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Background {
+    #[serde(rename = "type")]
+    pub typ: String,
+    pub value: Option<BackgroundValue>, // "", single
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct BackgroundValue {
+    pub color: String,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct FilterCondition {
+    #[serde(rename = "type")]
+    pub typ: String,
+    pub values: Vec<String>,
+    pub column: String,
+    pub operator: Option<String>,
+    pub value: Option<String>,
+    pub logical_operator: String,
+    pub filter_type: String,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct PanelConfig {
+    show_legends: bool,
+    legends_position: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    unit: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    unit_custom: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    decimals: Option<OrdF64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    line_thickness: Option<OrdF64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    step_value: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    top_results: Option<OrdF64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    y_axis_min: Option<OrdF64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    y_axis_max: Option<OrdF64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    top_results_others: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    axis_width: Option<OrdF64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    axis_border_show: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    label_option: Option<LabelOption>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    show_symbol: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    line_interpolation: Option<LineInterpolation>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    legend_width: Option<LegendWidth>,
+    base_map: Option<BaseMap>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    map_type: Option<MapType>,
+    map_view: Option<MapView>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    map_symbol_style: Option<MapSymbolStyle>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    drilldown: Option<Vec<DrillDown>>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    mark_line: Option<Vec<MarkLine>>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    override_config: Option<Vec<OverrideConfig>>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    connect_nulls: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    no_value_replacement: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    wrap_table_cells: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    table_transpose: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    table_dynamic_columns: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    mappings: Option<Vec<Mapping>>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    color: Option<ColorCfg>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    background: Option<Background>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    trellis: Option<Trellis>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct ColorCfg {
+    #[serde(skip_serializing_if = "Option::is_none")]
+    mode: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    fixed_color: Option<Vec<String>>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    series_by: Option<String>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Mapping {
+    #[serde(skip_serializing_if = "Option::is_none")]
+    #[serde(rename = "type")]
+    typee: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    value: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    from: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    to: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pattern: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    #[serde(rename = "match")]
+    matchh: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    color: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    text: Option<String>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct DrillDown {
+    #[serde(skip_serializing_if = "Option::is_none")]
+    name: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    #[serde(rename = "type")]
+    type_field: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    target_blank: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    find_by: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    data: Option<DrillDownData>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct MarkLine {
+    #[serde(skip_serializing_if = "Option::is_none")]
+    name: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    #[serde(rename = "type")]
+    typee: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    value: Option<String>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct OverrideConfig {
+    #[serde(skip_serializing_if = "Option::is_none")]
+    field: Option<Field>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    config: Option<Vec<Config>>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Field {
+    match_by: String,
+    value: String,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Config {
+    #[serde(rename = "type")]
+    typee: String,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    value: Option<Value>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Value {
+    unit: String,
+    custom_unit: String,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct DrillDownData {
+    #[serde(skip_serializing_if = "Option::is_none")]
+    url: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    folder: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    dashboard: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    tab: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pass_all_variables: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    variables: Option<Vec<DrillDownVariables>>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    logs_mode: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    logs_query: Option<String>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct DrillDownVariables {
+    name: Option<String>,
+    value: Option<String>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct QueryConfig {
+    promql_legend: String,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    layer_type: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    weight_fixed: Option<OrdF64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    limit: Option<OrdF64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    min: Option<OrdF64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    max: Option<OrdF64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    time_shift: Option<Vec<TimeShift>>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct TimeShift {
+    #[serde(skip_serializing_if = "Option::is_none")]
+    off_set: Option<String>,
+}
+
+#[derive(Default, Debug, Clone, PartialEq, Hash, Serialize, Deserialize)]
+#[serde(rename_all = "camelCase")]
+pub struct Variables {
+    pub list: Vec<VariableList>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub show_dynamic_filters: Option<bool>,
+}
+
+#[derive(Default, Debug, Clone, PartialEq, Hash, Serialize, Deserialize)]
+#[serde(rename_all = "camelCase")]
+pub struct DateTimeOptions {
+    #[serde(rename = "type")]
+    pub typee: String,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub relative_time_period: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub start_time: Option<i64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub end_time: Option<i64>,
+}
+
+#[derive(Default, Debug, Clone, PartialEq, Hash, Serialize, Deserialize)]
+#[serde(rename_all = "camelCase")]
+pub struct VariableList {
+    #[serde(rename = "type")]
+    pub type_field: String,
+    pub name: String,
+    pub label: String,
+    #[serde(rename = "query_data")]
+    pub query_data: Option<QueryData>,
+    pub value: Option<String>,
+    pub options: Option<Vec<CustomFieldsOption>>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub multi_select: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub hide_on_dashboard: Option<bool>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub select_all_value_for_multi_select: Option<String>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub custom_multi_select_value: Option<Vec<String>>,
+}
+
+#[derive(Default, Debug, Clone, PartialEq, Hash, Serialize, Deserialize)]
+pub struct QueryData {
+    pub stream_type: StreamType,
+    pub stream: String,
+    pub field: String,
+    pub max_record_size: Option<i64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub filter: Option<Vec<Filters>>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub struct Filters {
+    pub name: Option<String>,
+    pub operator: Option<String>,
+    pub value: String,
+}
+
+#[derive(Default, Debug, Clone, PartialEq, Hash, Serialize, Deserialize)]
+#[serde(rename_all = "camelCase")]
+pub struct CustomFieldsOption {
+    pub label: String,
+    pub value: String,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub selected: Option<bool>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct BaseMap {
+    #[serde(rename = "type")]
+    pub type_field: Option<String>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct MapType {
+    #[serde(rename = "type")]
+    pub type_field: Option<String>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct MapView {
+    pub zoom: OrdF64,
+    pub lat: OrdF64,
+    pub lng: OrdF64,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct Trellis {
+    pub layout: Option<String>,
+    pub num_of_columns: i64,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct MapSymbolStyle {
+    pub size: String,
+    pub size_by_value: Option<SizeByValue>,
+    pub size_fixed: OrdF64,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct SizeByValue {
+    pub min: OrdF64,
+    pub max: OrdF64,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct LegendWidth {
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub value: Option<OrdF64>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub unit: Option<String>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+pub struct LabelOption {
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub position: Option<LabelPosition>,
+    #[serde(skip_serializing_if = "Option::is_none")]
+    pub rotate: Option<OrdF64>,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "kebab-case")]
+pub enum LineInterpolation {
+    Smooth,
+    Linear,
+    StepStart,
+    StepEnd,
+    StepMiddle,
+}
+
+#[derive(Debug, Clone, PartialEq, Hash, Serialize, Deserialize, ToSchema)]
+#[serde(rename_all = "camelCase")]
+pub enum LabelPosition {
+    Top,
+    Inside,
+    InsideTop,
+    InsideBottom,
+}
diff --git a/src/handler/http/models/dashboards.rs b/src/handler/http/models/dashboards.rs
index ad4be2d3121..0d67da7e4aa 100644
--- a/src/handler/http/models/dashboards.rs
+++ b/src/handler/http/models/dashboards.rs
@@ -15,7 +15,7 @@
 
 use chrono::{DateTime, FixedOffset, Utc};
 use config::meta::{
-    dashboards::{Dashboard as MetaDashboard, v1, v2, v3, v4, v5},
+    dashboards::{Dashboard as MetaDashboard, v1, v2, v3, v4, v5, v6},
     folder::Folder as MetaFolder,
 };
 use serde::{Deserialize, Serialize};
@@ -87,6 +87,8 @@ pub struct ListDashboardsResponseBodyItem {
     pub v4: Option<v4::Dashboard>,
     #[deprecated(note = "use GetDashboard endpoint to get dashboard details")]
     pub v5: Option<v5::Dashboard>,
+    #[deprecated(note = "use GetDashboard endpoint to get dashboard details")]
+    pub v6: Option<v6::Dashboard>,
 
     pub version: i32,
     pub hash: String,
@@ -132,6 +134,7 @@ pub struct DashboardDetails {
     pub v3: Option<v3::Dashboard>,
     pub v4: Option<v4::Dashboard>,
     pub v5: Option<v5::Dashboard>,
+    pub v6: Option<v6::Dashboard>,
     pub version: i32,
     pub hash: String,
     pub updated_at: i64,
@@ -258,6 +261,7 @@ impl From<(MetaFolder, MetaDashboard)> for ListDashboardsResponseBodyItem {
             v3: dashboard.v3,
             v4: dashboard.v4,
             v5: dashboard.v5,
+            v6: dashboard.v6,
         }
     }
 }
@@ -271,6 +275,7 @@ impl From<MetaDashboard> for DashboardDetails {
             v3: value.v3,
             v4: value.v4,
             v5: value.v5,
+            v6: value.v6,
             hash: value.hash,
             updated_at: value.updated_at,
         }
@@ -304,10 +309,14 @@ fn parse_dashboard_request(value: JsonValue) -> Result<MetaDashboard, serde_json
             let inner: v4::Dashboard = serde_json::from_value(value)?;
             inner.into()
         }
-        _ => {
+        5 => {
             let inner: v5::Dashboard = serde_json::from_value(value)?;
             inner.into()
         }
+        _ => {
+            let inner: v6::Dashboard = serde_json::from_value(value)?;
+            inner.into()
+        }
     };
     Ok(dash)
 }
diff --git a/src/infra/src/table/dashboards.rs b/src/infra/src/table/dashboards.rs
index 183974b9140..0530996add6 100644
--- a/src/infra/src/table/dashboards.rs
+++ b/src/infra/src/table/dashboards.rs
@@ -17,7 +17,7 @@ use config::meta::{
     dashboards::{
         Dashboard, ListDashboardsParams, v1::Dashboard as DashboardV1,
         v2::Dashboard as DashboardV2, v3::Dashboard as DashboardV3, v4::Dashboard as DashboardV4,
-        v5::Dashboard as DashboardV5,
+        v5::Dashboard as DashboardV5, v6::Dashboard as DashboardV6,
     },
     folder::{Folder, FolderType},
 };
@@ -85,6 +85,11 @@ impl TryFrom<dashboards::Model> for Dashboard {
                 let dash = inner.into();
                 Ok(dash)
             }
+            6 => {
+                let inner: DashboardV6 = serde_json::from_value(value.data)?;
+                let dash = inner.into();
+                Ok(dash)
+            }
             _ => Err(GetDashboardError::UnsupportedVersion(value.version).into()),
         }
     }
@@ -468,6 +473,11 @@ fn inner_data_as_json(dashboard: Dashboard) -> Result<JsonValue, errors::Error>
             v5: Some(inner),
             ..
         } => serde_json::to_value(inner).map_err(errors::Error::SerdeJsonError),
+        Dashboard {
+            version: 6,
+            v6: Some(inner),
+            ..
+        } => serde_json::to_value(inner).map_err(errors::Error::SerdeJsonError),
         Dashboard { version: v, .. } => Err(errors::PutDashboardError::MissingInnerData(v).into()),
     }?;
 
diff --git a/src/service/dashboards/mod.rs b/src/service/dashboards/mod.rs
index 86d0bfa02b3..ceeb070c1c8 100644
--- a/src/service/dashboards/mod.rs
+++ b/src/service/dashboards/mod.rs
@@ -288,8 +288,12 @@ pub fn get_query_variables(
             let dash = dashboard.v5.as_ref().unwrap();
             _get_variables!(map, dash);
         }
+        6 => {
+            let dash = dashboard.v6.as_ref().unwrap();
+            _get_variables!(map, dash);
+        }
         _ => {
-            unreachable!("we only have 5 dashboard versions")
+            unreachable!("we only have 6 dashboard versions")
         }
     }
     map

From 118d5704d914f8630ed1ede9b43fbb72d128a71b Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 5 May 2025 17:36:19 +0530
Subject: [PATCH 37/61] feat: remove aggr fn from x axis selection

---
 .../addPanel/DashboardGeoMapsQueryBuilder.vue |   3 +
 .../addPanel/DashboardMapsQueryBuilder.vue    |   2 +
 .../addPanel/DashboardQueryBuilder.vue        |   4 +
 .../addPanel/DashboardSankeyChartBuilder.vue  |   3 +
 .../dynamicFunction/DynamicFunctionPopUp.vue  |   7 +-
 .../dynamicFunction/SelectFunction.vue        |  16 ++-
 .../dynamicFunction/functionValidation.json   | 102 ++++++++++--------
 7 files changed, 89 insertions(+), 48 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
index 79ce6cfddf7..60df60860d3 100644
--- a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
@@ -88,6 +88,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                         dashboardPanelData.layout.currentQueryIndex
                       ].fields.latitude
                     "
+                    :allowAggregation="false"
                   />
                   <q-input
                     dense
@@ -215,6 +216,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                         dashboardPanelData.layout.currentQueryIndex
                       ].fields.longitude
                     "
+                    :allowAggregation="false"
                   />
                   <q-input
                     dense
@@ -352,6 +354,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             dashboardPanelData.layout.currentQueryIndex
                           ].fields.weight
                         "
+                        :allowAggregation="true"
                       />
                       <!-- <q-select
                         v-model="
diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index 2f465ba6e01..f70ebc82afe 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -88,6 +88,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                         dashboardPanelData.layout.currentQueryIndex
                       ].fields.name
                     "
+                    :allowAggregation="false"
                   />
                   <q-input
                     dense
@@ -225,6 +226,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             dashboardPanelData.layout.currentQueryIndex
                           ].fields.value_for_maps
                         "
+                        :allowAggregation="true"
                       />
                       <!-- <q-select
                         v-model="
diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index 4dee2b2ecfc..57702733172 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -134,6 +134,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                   dashboardPanelData.layout.currentQueryIndex
                                 ].fields.x[index]
                               "
+                              :allowAggregation="false"
                             />
                             <!-- <q-select
                               v-model="
@@ -393,6 +394,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                   dashboardPanelData.layout.currentQueryIndex
                                 ].fields.breakdown[index]
                               "
+                              :allowAggregation="false"
                             />
                             <!-- <q-select
                               v-model="
@@ -667,6 +669,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                               dashboardPanelData.layout.currentQueryIndex
                             ].fields.y[index]
                           "
+                          :allowAggregation="true"
                         />
                       </div>
                       <div
@@ -935,6 +938,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                 dashboardPanelData.layout.currentQueryIndex
                               ].fields.z[index]
                             "
+                            :allowAggregation="true"
                           />
                           <!-- <q-select
                             v-model="
diff --git a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
index 576f475b023..9bab7320308 100644
--- a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
@@ -88,6 +88,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                         dashboardPanelData.layout.currentQueryIndex
                       ].fields.source
                     "
+                    :allowAggregation="false"
                   />
                   <q-input
                     dense
@@ -215,6 +216,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                         dashboardPanelData.layout.currentQueryIndex
                       ].fields.target
                     "
+                    :allowAggregation="false"
                   />
                   <q-input
                     dense
@@ -351,6 +353,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             dashboardPanelData.layout.currentQueryIndex
                           ].fields.value
                         "
+                        :allowAggregation="true"
                       />
                       <!-- <q-select
                         v-model="
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index 140b4b6bb56..5c817610fbc 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -18,7 +18,7 @@
 
     <q-tab-panels v-model="fields.type" animated>
       <q-tab-panel name="build">
-        <SelectFunction v-model="fields" data-test="dynamic-function-popup-select-function" />
+        <SelectFunction v-model="fields" data-test="dynamic-function-popup-select-function" :allowAggregation="allowAggregation" />
       </q-tab-panel>
       <q-tab-panel name="raw">
         <RawQueryBuilder v-model="fields" data-test="dynamic-function-popup-raw-query-builder" />
@@ -41,6 +41,11 @@ export default {
       type: Object,
       required: true,
     },
+    allowAggregation: {
+      type: Boolean,
+      required: false,
+      default: false,
+    },
   },
   emits: ["update:modelValue"],
   setup(props, { emit }) {
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index b49e7e37318..b4c14c9285a 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -118,6 +118,7 @@
             v-if="fields.args[argIndex]?.type === 'function'"
             class="tw-ml-4"
             v-model="fields.args[argIndex].value"
+            :allowAggregation="allowAggregation"
             :data-test="`dashboard-function-dropdown-arg-function-input-${argIndex}`"
           />
 
@@ -181,6 +182,11 @@ export default {
       type: Object,
       required: true,
     },
+    allowAggregation: {
+      type: Boolean,
+      required: false,
+      default: false,
+    },
   },
   emits: ["update:modelValue"],
   setup(props: any, { emit }) {
@@ -211,7 +217,15 @@ export default {
 
     const filterFunctionsOptions = (val: string, update: any) => {
       update(() => {
-        filteredFunctions.value = functionValidation
+        let filteredFunctionsValidation = functionValidation;
+        // if allowAggregation is true, then filter the functions based on isAggregation
+        if (props.allowAggregation === false) {
+          filteredFunctionsValidation = filteredFunctionsValidation.filter(
+            (v) => !v.isAggregation,
+          );
+        }
+
+        filteredFunctions.value = filteredFunctionsValidation
           .map((v) => ({
             label: v.functionLabel,
             value: v.functionName,
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
index af710e19333..30008bf9094 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
@@ -68,7 +68,8 @@
                     ],
                     "required": true
                 }
-            ]
+            ],
+            "isAggregation": true
         },
         {
             "functionName": "count-distinct",
@@ -87,11 +88,12 @@
                     ],
                     "required": true
                 }
-            ]
+            ],
+            "isAggregation": true
         },
         {
             "functionName": "sum",
-            "functionLabel": "sum",
+            "functionLabel": "Sum",
             "args": [
                 {
                     "type": [
@@ -106,11 +108,12 @@
                     ],
                     "required": true
                 }
-            ]
+            ],
+            "isAggregation": true
         },
         {
             "functionName": "avg",
-            "functionLabel": "avg",
+            "functionLabel": "Avg",
             "args": [
                 {
                     "type": [
@@ -125,11 +128,12 @@
                     ],
                     "required": true
                 }
-            ]
+            ],
+            "isAggregation": true
         },
         {
             "functionName": "min",
-            "functionLabel": "min",
+            "functionLabel": "Min",
             "args": [
                 {
                     "type": [
@@ -144,11 +148,12 @@
                     ],
                     "required": true
                 }
-            ]
+            ],
+            "isAggregation": true
         },
         {
             "functionName": "max",
-            "functionLabel": "max",
+            "functionLabel": "Max",
             "args": [
                 {
                     "type": [
@@ -163,11 +168,12 @@
                     ],
                     "required": true
                 }
-            ]
+            ],
+            "isAggregation": true
         },
         {
             "functionName": "p50",
-            "functionLabel": "p50",
+            "functionLabel": "P50",
             "args": [
                 {
                     "type": [
@@ -182,11 +188,12 @@
                     ],
                     "required": true
                 }
-            ]
+            ],
+            "isAggregation": true
         },
         {
             "functionName": "p90",
-            "functionLabel": "p90",
+            "functionLabel": "P90",
             "args": [
                 {
                     "type": [
@@ -201,11 +208,12 @@
                     ],
                     "required": true
                 }
-            ]
+            ],
+            "isAggregation": true
         },
         {
             "functionName": "p95",
-            "functionLabel": "p95",
+            "functionLabel": "P95",
             "args": [
                 {
                     "type": [
@@ -220,11 +228,12 @@
                     ],
                     "required": true
                 }
-            ]
+            ],
+            "isAggregation": true
         },
         {
             "functionName": "p99",
-            "functionLabel": "p99",
+            "functionLabel": "P99",
             "args": [
                 {
                     "type": [
@@ -239,7 +248,8 @@
                     ],
                     "required": true
                 }
-            ]
+            ],
+            "isAggregation": true
         },
         {
             "functionName": "abs",
@@ -398,7 +408,7 @@
         },
         {
             "functionName": "cos",
-            "functionLabel": "cos",
+            "functionLabel": "Cos",
             "args": [
                 {
                     "type": [
@@ -421,7 +431,7 @@
         },
         {
             "functionName": "exp",
-            "functionLabel": "exp",
+            "functionLabel": "Exp",
             "args": [
                 {
                     "type": [
@@ -467,7 +477,7 @@
         },
         {
             "functionName": "log",
-            "functionLabel": "log",
+            "functionLabel": "Log",
             "args": [
                 {
                     "type": [
@@ -490,7 +500,7 @@
         },
         {
             "functionName": "log10",
-            "functionLabel": "log10",
+            "functionLabel": "Log10",
             "args": [
                 {
                     "type": [
@@ -513,7 +523,7 @@
         },
         {
             "functionName": "log2",
-            "functionLabel": "log2",
+            "functionLabel": "Log2",
             "args": [
                 {
                     "type": [
@@ -536,7 +546,7 @@
         },
         {
             "functionName": "pow",
-            "functionLabel": "pow",
+            "functionLabel": "Pow",
             "args": [
                 {
                     "type": [
@@ -576,7 +586,7 @@
         },
         {
             "functionName": "round",
-            "functionLabel": "round",
+            "functionLabel": "Round",
             "args": [
                 {
                     "type": [
@@ -608,7 +618,7 @@
         },
         {
             "functionName": "sin",
-            "functionLabel": "sin",
+            "functionLabel": "Sin",
             "args": [
                 {
                     "type": [
@@ -627,7 +637,7 @@
         },
         {
             "functionName": "sqrt",
-            "functionLabel": "sqrt",
+            "functionLabel": "Sqrt",
             "args": [
                 {
                     "type": [
@@ -646,7 +656,7 @@
         },
         {
             "functionName": "tan",
-            "functionLabel": "tan",
+            "functionLabel": "Tan",
             "args": [
                 {
                     "type": [
@@ -665,7 +675,7 @@
         },
         {
             "functionName": "string_length",
-            "functionLabel": "string_length",
+            "functionLabel": "String Length",
             "args": [
                 {
                     "type": [
@@ -684,7 +694,7 @@
         },
         {
             "functionName": "char_length",
-            "functionLabel": "char_length",
+            "functionLabel": "Char Length",
             "args": [
                 {
                     "type": [
@@ -703,7 +713,7 @@
         },
         {
             "functionName": "concat",
-            "functionLabel": "concat",
+            "functionLabel": "Concat",
             "args": [
                 {
                     "type": [
@@ -728,7 +738,7 @@
         },
         {
             "functionName": "lower",
-            "functionLabel": "lower",
+            "functionLabel": "Lower",
             "args": [
                 {
                     "type": [
@@ -747,7 +757,7 @@
         },
         {
             "functionName": "upper",
-            "functionLabel": "upper",
+            "functionLabel": "Upper",
             "args": [
                 {
                     "type": [
@@ -766,7 +776,7 @@
         },
         {
             "functionName": "substring",
-            "functionLabel": "substring",
+            "functionLabel": "Substring",
             "args": [
                 {
                     "type": [
@@ -811,7 +821,7 @@
         },
         {
             "functionName": "trim",
-            "functionLabel": "trim",
+            "functionLabel": "Trim",
             "args": [
                 {
                     "type": [
@@ -830,7 +840,7 @@
         },
         {
             "functionName": "ltrim",
-            "functionLabel": "ltrim",
+            "functionLabel": "LTrim",
             "args": [
                 {
                     "type": [
@@ -849,7 +859,7 @@
         },
         {
             "functionName": "rtrim",
-            "functionLabel": "rtrim",
+            "functionLabel": "RTrim",
             "args": [
                 {
                     "type": [
@@ -868,7 +878,7 @@
         },
         {
             "functionName": "date_add",
-            "functionLabel": "date_add",
+            "functionLabel": "Date Add",
             "args": [
                 {
                     "type": [
@@ -900,7 +910,7 @@
         },
         {
             "functionName": "date_sub",
-            "functionLabel": "date_sub",
+            "functionLabel": "Date Sub",
             "args": [
                 {
                     "type": [
@@ -932,7 +942,7 @@
         },
         {
             "functionName": "datediff",
-            "functionLabel": "datediff",
+            "functionLabel": "Date Diff",
             "args": [
                 {
                     "type": [
@@ -964,7 +974,7 @@
         },
         {
             "functionName": "from_unixtime",
-            "functionLabel": "from_unixtime",
+            "functionLabel": "From Unix Time",
             "args": [
                 {
                     "type": [
@@ -990,7 +1000,7 @@
         },
         {
             "functionName": "to_unixtime",
-            "functionLabel": "to_unixtime",
+            "functionLabel": "To Unix Time",
             "args": [
                 {
                     "type": [
@@ -1009,7 +1019,7 @@
         },
         {
             "functionName": "array_length",
-            "functionLabel": "array_length",
+            "functionLabel": "Array Length",
             "args": [
                 {
                     "type": [
@@ -1028,7 +1038,7 @@
         },
         {
             "functionName": "array_sort",
-            "functionLabel": "array_sort",
+            "functionLabel": "Array Sort",
             "args": [
                 {
                     "type": [
@@ -1047,7 +1057,7 @@
         },
         {
             "functionName": "array_append",
-            "functionLabel": "array_append",
+            "functionLabel": "Array Append",
             "args": [
                 {
                     "type": [
@@ -1083,7 +1093,7 @@
         },
         {
             "functionName": "array_contains",
-            "functionLabel": "array_contains",
+            "functionLabel": "Array Contains",
             "args": [
                 {
                     "type": [

From 465ec0f0a4d90cd9f230f5c8cb8dddb603db73f8 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Wed, 14 May 2025 18:08:45 +0530
Subject: [PATCH 38/61] add: initial ui changes

---
 .../dashboards/addPanel/BuildFieldPopUp.vue   |  88 +++++++++++++++
 .../addPanel/DashboardQueryBuilder.vue        |  53 ++++-----
 .../dashboards/addPanel/SortByBtnGrp.vue      |  12 +-
 .../dynamicFunction/DynamicFunctionPopUp.vue  | 106 +++++++++++++++---
 web/src/components/icons/AscSort.vue          |   8 +-
 5 files changed, 210 insertions(+), 57 deletions(-)
 create mode 100644 web/src/components/dashboards/addPanel/BuildFieldPopUp.vue

diff --git a/web/src/components/dashboards/addPanel/BuildFieldPopUp.vue b/web/src/components/dashboards/addPanel/BuildFieldPopUp.vue
new file mode 100644
index 00000000000..18791b224c7
--- /dev/null
+++ b/web/src/components/dashboards/addPanel/BuildFieldPopUp.vue
@@ -0,0 +1,88 @@
+<!-- Copyright 2023 OpenObserve Inc.
+
+This program is free software: you can redistribute it and/or modify
+it under the terms of the GNU Affero General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU Affero General Public License for more details.
+
+You should have received a copy of the GNU Affero General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>.
+-->
+
+<template>
+  <div style="padding: 3px 16px 16px 16px display: flex; gap: 16px;">
+    <div>
+      <q-input
+        dense
+        filled
+        data-test="dashboard-x-item-input"
+        :label="t('common.label')"
+        v-model="modelValue.label"
+        :rules="[(val: any) => val.length > 0 || 'Required']"
+      />
+      <div v-if="!customQuery && modelValue.isDerived">
+        <SortByBtnGrp :fieldObj="modelValue" />
+      </div>
+    </div>
+    <div>
+      <div v-if="!customQuery && !modelValue.isDerived" class="q-mr-xs q-mb-sm">
+        <DynamicFunctionPopUp
+          :modelValue="modelValue"
+          @update:modelValue="(newValue) => emit('update:modelValue', newValue)"
+          :allowAggregation="false"
+        />
+      </div>
+    </div>
+  </div>
+</template>
+
+<script lang="ts">
+import { defineComponent, inject, defineProps, defineEmits } from "vue";
+import useDashboardPanelData from "../../../composables/useDashboardPanel";
+import SortByBtnGrp from "@/components/dashboards/addPanel/SortByBtnGrp.vue";
+import DynamicFunctionPopUp from "@/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue";
+import { useI18n } from "vue-i18n";
+
+export default defineComponent({
+  name: "BuildFieldPopUp",
+  components: {
+    SortByBtnGrp,
+    DynamicFunctionPopUp,
+  },
+  props: {
+    modelValue: {
+      type: Object,
+      required: true,
+    },
+    customQuery: {
+      type: Boolean,
+      default: false,
+    },
+  },
+  setup(props, { emit }) {
+    const { t } = useI18n();
+
+    return {
+      t,
+      emit,
+    };
+  },
+});
+</script>
+
+<style lang="scss" scoped>
+.field-function-menu-popup {
+  width: 771px;
+  height: 323px;
+  border-radius: 4px;
+  border: 1px solid #d5d5d5;
+  background: #fff;
+  box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.05);
+  padding: 16px;
+}
+</style>
diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index 57702733172..224f47ac767 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -112,11 +112,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     :data-test="`dashboard-x-item-${itemX?.alias}`"
                   >
                     <q-menu
-                      class="q-pa-md"
                       :data-test="`dashboard-x-item-${itemX?.alias}-menu`"
+                      class="field-function-menu-popup"
                     >
-                      <div>
-                        <div class="">
+                      <div style="padding: 3px 16px 16px 16px">
+                        <div>
                           <div
                             v-if="
                               !dashboardPanelData.data.queries[
@@ -135,6 +135,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                 ].fields.x[index]
                               "
                               :allowAggregation="false"
+                              :customQuery="
+                                dashboardPanelData.data.queries[
+                                  dashboardPanelData.layout.currentQueryIndex
+                                ].customQuery
+                              "
                             />
                             <!-- <q-select
                               v-model="
@@ -201,37 +206,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             "
                           />
                         </div> -->
-                        <q-input
-                          dense
-                          filled
-                          data-test="dashboard-x-item-input"
-                          :label="t('common.label')"
-                          v-model="
-                            dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields.x[index].label
-                          "
-                          :rules="[(val: any) => val.length > 0 || 'Required']"
-                        />
-                        <div
-                          v-if="
-                            !dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].customQuery &&
-                            dashboardPanelData.data.queryType == 'sql' &&
-                            !dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields.x[index].isDerived
-                          "
-                        >
-                          <SortByBtnGrp
-                            :fieldObj="
-                              dashboardPanelData.data.queries[
-                                dashboardPanelData.layout.currentQueryIndex
-                              ].fields?.x[index]
-                            "
-                          />
-                        </div>
+                        
                       </div>
                     </q-menu>
                   </q-btn>
@@ -1973,4 +1948,14 @@ export default defineComponent({
 .q-field--dense .q-field__marginal {
   height: 34px;
 }
+
+.field-function-menu-popup {
+  width: 771px;
+  height: 323px;
+  border-radius: 4px;
+  border: 1px solid #d5d5d5;
+  background: #fff;
+  box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.05);
+  padding: 16px;
+}
 </style>
diff --git a/web/src/components/dashboards/addPanel/SortByBtnGrp.vue b/web/src/components/dashboards/addPanel/SortByBtnGrp.vue
index cfa8fbe9ae8..0f77ff634bc 100644
--- a/web/src/components/dashboards/addPanel/SortByBtnGrp.vue
+++ b/web/src/components/dashboards/addPanel/SortByBtnGrp.vue
@@ -1,21 +1,21 @@
 <template>
   Sort By:
-  <q-btn-group class="q-mr-sm">
+  <q-btn-group>
     <q-btn
-      :class="!fieldObj.sortBy ? 'selected' : ''"
+      :class="[!fieldObj.sortBy ? 'selected' : '', 'tw-px-2.5']"
       @click="updateSortOption(null)"
       icon="block"
       size="sm"
       data-test="dashboard-sort-by-item-clear"
     />
     <q-btn
-      :class="fieldObj.sortBy === 'ASC' ? 'selected' : ''"
+      :class="[fieldObj.sortBy === 'ASC' ? 'selected' : '', 'tw-px-2.5']"
       @click="updateSortOption('ASC')"
       data-test="dashboard-sort-by-item-asc"
       ><AscSort
     /></q-btn>
     <q-btn
-      :class="fieldObj.sortBy === 'DESC' ? 'selected' : ''"
+      :class="[fieldObj.sortBy === 'DESC' ? 'selected' : '', 'tw-px-2.5']"
       @click="updateSortOption('DESC')"
       data-test="dashboard-sort-by-item-desc"
       ><DescSort
@@ -42,10 +42,10 @@ export default defineComponent({
   setup(props) {
     const dashboardPanelDataPageKey = inject(
       "dashboardPanelDataPageKey",
-      "dashboard"
+      "dashboard",
     );
     const { dashboardPanelData } = useDashboardPanelData(
-      dashboardPanelDataPageKey
+      dashboardPanelDataPageKey,
     );
 
     const updateSortOption = (value: any) => {
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index 5c817610fbc..381bfe17593 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -1,27 +1,62 @@
 <template>
-  <div style="width: 500px">
+  <div>
+    <!-- active-color="primary" -->
+    <!-- narrow-indicator -->
+    <!-- class="text-grey" -->
+    <!-- indicator-color="primary" -->
     <q-tabs
       v-model="fields.type"
       @update:modelValue="onFieldTypeChange"
       dense
-      class="text-grey"
-      active-color="primary"
-      indicator-color="primary"
-      narrow-indicator
       data-test="dynamic-function-popup-tabs"
+      :align="'left'"
     >
-      <q-tab name="build" label="Build" data-test="dynamic-function-popup-tab-build" />
-      <q-tab name="raw" label="Raw" data-test="dynamic-function-popup-tab-raw" />
+      <q-tab
+        name="build"
+        label="Build"
+        data-test="dynamic-function-popup-tab-build"
+        class="tab-item-bold"
+      />
+      <q-tab
+        name="raw"
+        label="Raw"
+        data-test="dynamic-function-popup-tab-raw"
+        class="tab-item-bold"
+      />
     </q-tabs>
 
     <q-separator />
 
     <q-tab-panels v-model="fields.type" animated>
-      <q-tab-panel name="build">
-        <SelectFunction v-model="fields" data-test="dynamic-function-popup-select-function" :allowAggregation="allowAggregation" />
+      <q-tab-panel name="build" style="padding: 0px; padding-top: 8px">
+        <div style="display: flex">
+          <div style="width: 134px; padding-right: 12px">
+            <div class="text-label-bold tw-pb-3">Property</div>
+            <div style="display: flex; flex-direction: column; gap: 14px">
+              <div>
+                <div class="text-label-normal">Label</div>
+                <input v-model="fields.label" class="edit-input" />
+              </div>
+              <div v-if="!customQuery && !fields.isDerived">
+                <SortByBtnGrp :fieldObj="fields" />
+              </div>
+            </div>
+          </div>
+          <div style="width: calc(100% - 134px)">
+            <div class="text-label-bold tw-pb-3">Configuration</div>
+            <SelectFunction
+              v-model="fields"
+              data-test="dynamic-function-popup-select-function"
+              :allowAggregation="allowAggregation"
+            />
+          </div>
+        </div>
       </q-tab-panel>
       <q-tab-panel name="raw">
-        <RawQueryBuilder v-model="fields" data-test="dynamic-function-popup-raw-query-builder" />
+        <RawQueryBuilder
+          v-model="fields"
+          data-test="dynamic-function-popup-raw-query-builder"
+        />
       </q-tab-panel>
     </q-tab-panels>
   </div>
@@ -29,13 +64,14 @@
 
 <script lang="ts">
 import { ref, watch } from "vue";
-//   import useDashboardPanelData from "@/composables/useDashboardPanel";
 import RawQueryBuilder from "./RawQueryBuilder.vue";
 import SelectFunction from "./SelectFunction.vue";
+import SortByBtnGrp from "@/components/dashboards/addPanel/SortByBtnGrp.vue";
+import { useI18n } from "vue-i18n";
 
 export default {
   name: "DynamicFunctionPopUp",
-  components: { RawQueryBuilder, SelectFunction },
+  components: { RawQueryBuilder, SelectFunction, SortByBtnGrp },
   props: {
     modelValue: {
       type: Object,
@@ -46,9 +82,15 @@ export default {
       required: false,
       default: false,
     },
+    customQuery: {
+      type: Boolean,
+      required: false,
+      default: false,
+    },
   },
   emits: ["update:modelValue"],
   setup(props, { emit }) {
+    const { t } = useI18n();
     //   const dashboardPanelDataPageKey = inject(
     //     "dashboardPanelDataPageKey",
     //     "dashboard",
@@ -85,8 +127,46 @@ export default {
     return {
       fields,
       onFieldTypeChange,
+      t,
     };
   },
 };
 </script>
-<style scoped></style>
+<style scoped>
+.tab-item {
+  flex: 0 1 auto !important;
+  padding: 10px 16px !important;
+}
+
+.text-label-bold {
+  color: #000;
+  font-family: "Nunito Sans";
+  font-size: 13px;
+  font-style: normal;
+  font-weight: 600;
+  line-height: normal;
+}
+
+.text-label-normal {
+  color: #000;
+  font-family: "Nunito Sans";
+  font-size: 13px;
+  font-style: normal;
+  font-weight: 400;
+  line-height: normal;
+}
+
+.edit-input {
+  flex: 1;
+  border: 1px solid #e9e9e9;
+  background: #fff;
+  padding: 2px;
+  outline: none;
+  min-width: 0;
+  width: 100%;
+
+  &:focus {
+    border-color: var(--q-secondary);
+  }
+}
+</style>
diff --git a/web/src/components/icons/AscSort.vue b/web/src/components/icons/AscSort.vue
index 9d4e8c2ae36..8e54b21837f 100644
--- a/web/src/components/icons/AscSort.vue
+++ b/web/src/components/icons/AscSort.vue
@@ -1,9 +1,9 @@
 <template>
   <svg
-    xmlns="http://www.w3.org/2000/svg"
-    width="20"
-    height="20"
-    viewBox="0 0 24 24"
+  xmlns="http://www.w3.org/2000/svg"
+  width="20"
+  height="20"
+  viewBox="0 0 24 24"
   >
     <path
       fill="currentColor"

From aabe59e58f003bf98e0531308d5533e852b1702b Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 20 May 2025 14:03:13 +0530
Subject: [PATCH 39/61] add: UI updates in join pop up

---
 .../dynamicFunction/DynamicFunctionPopUp.vue  |  21 +-
 .../dynamicFunction/SelectFunction.vue        |   6 +-
 web/src/components/icons/InnerJoinTypeSvg.vue |  37 +++
 web/src/components/icons/LeftJoinLineSvg.vue  |  20 ++
 web/src/components/icons/LeftJoinSvg.vue      |  20 ++
 web/src/components/icons/LeftJoinTypeSvg.vue  |  37 +++
 web/src/components/icons/RightJoinLineSvg.vue |  20 ++
 web/src/components/icons/RightJoinSvg.vue     |  33 ++
 web/src/components/icons/RightJoinTypeSvg.vue |  37 +++
 .../Dashboards/addPanel/AddJoinPopUp.vue      | 290 ++++++++++++------
 10 files changed, 419 insertions(+), 102 deletions(-)
 create mode 100644 web/src/components/icons/InnerJoinTypeSvg.vue
 create mode 100644 web/src/components/icons/LeftJoinLineSvg.vue
 create mode 100644 web/src/components/icons/LeftJoinSvg.vue
 create mode 100644 web/src/components/icons/LeftJoinTypeSvg.vue
 create mode 100644 web/src/components/icons/RightJoinLineSvg.vue
 create mode 100644 web/src/components/icons/RightJoinSvg.vue
 create mode 100644 web/src/components/icons/RightJoinTypeSvg.vue

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index 381bfe17593..1af01ea22dc 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -35,7 +35,13 @@
             <div style="display: flex; flex-direction: column; gap: 14px">
               <div>
                 <div class="text-label-normal">Label</div>
-                <input v-model="fields.label" class="edit-input" />
+                <input
+                  v-model="fields.label"
+                  :class="[
+                    store.state.theme === 'dark' ? 'bg-grey-10' : '',
+                    'edit-input',
+                  ]"
+                />
               </div>
               <div v-if="!customQuery && !fields.isDerived">
                 <SortByBtnGrp :fieldObj="fields" />
@@ -68,7 +74,7 @@ import RawQueryBuilder from "./RawQueryBuilder.vue";
 import SelectFunction from "./SelectFunction.vue";
 import SortByBtnGrp from "@/components/dashboards/addPanel/SortByBtnGrp.vue";
 import { useI18n } from "vue-i18n";
-
+import { useStore } from "vuex";
 export default {
   name: "DynamicFunctionPopUp",
   components: { RawQueryBuilder, SelectFunction, SortByBtnGrp },
@@ -101,6 +107,8 @@ export default {
 
     const fields = ref(props.modelValue);
 
+    const store = useStore();
+
     watch(
       () => fields.value,
       (value) => {
@@ -125,9 +133,10 @@ export default {
     };
 
     return {
+      store,
+      t,
       fields,
       onFieldTypeChange,
-      t,
     };
   },
 };
@@ -139,7 +148,6 @@ export default {
 }
 
 .text-label-bold {
-  color: #000;
   font-family: "Nunito Sans";
   font-size: 13px;
   font-style: normal;
@@ -148,7 +156,6 @@ export default {
 }
 
 .text-label-normal {
-  color: #000;
   font-family: "Nunito Sans";
   font-size: 13px;
   font-style: normal;
@@ -158,8 +165,8 @@ export default {
 
 .edit-input {
   flex: 1;
-  border: 1px solid #e9e9e9;
-  background: #fff;
+  border: 1px solid var(--q-primary);
+  border-radius: 4px;
   padding: 2px;
   outline: none;
   min-width: 0;
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index b4c14c9285a..4edd14f5497 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -8,7 +8,6 @@
       input-debounce="0"
       behavior="menu"
       use-input
-      filled
       borderless
       dense
       hide-selected
@@ -18,7 +17,7 @@
       option-value="value"
       emit-value
       map-options
-      class="tw-w-52"
+      class="tw-w-72 tw-border tw-border-solid tw-border-gray-200 tw-pl-2"
     >
       <!-- <template v-slot:append>
           <q-icon
@@ -60,7 +59,8 @@
             dense
             filled
             label="Select Type"
-            class="tw-w-40 tw-min-w-40"
+            class="tw-w-40 tw-min-w-40 tw-h-10 tw-text-white"
+            style="background: #6571BD;"
             :data-test="`dashboard-function-dropdown-arg-type-selector-${argIndex}`"
           />
 
diff --git a/web/src/components/icons/InnerJoinTypeSvg.vue b/web/src/components/icons/InnerJoinTypeSvg.vue
new file mode 100644
index 00000000000..0570e327892
--- /dev/null
+++ b/web/src/components/icons/InnerJoinTypeSvg.vue
@@ -0,0 +1,37 @@
+<template>
+  <svg
+    xmlns="http://www.w3.org/2000/svg"
+    width="25"
+    height="24"
+    viewBox="0 0 25 24"
+    fill="none"
+  >
+    <rect
+      v-if="shouldFill"
+      x="0.0766602"
+      width="24"
+      height="24"
+      rx="2"
+      fill="#6571BD"
+      fill-opacity="0.12"
+    />
+    <path
+      d="M2.07666 11.9997C2.07666 11.2077 2.22933 10.4443 2.53466 9.70968C2.83933 8.97501 3.27366 8.32534 3.83766 7.76068C4.70299 6.89534 5.73299 6.34768 6.92766 6.11768C8.12233 5.88768 9.26566 6.02534 10.3577 6.53068C10.487 6.57668 10.5837 6.66234 10.6477 6.78768C10.7117 6.91234 10.7207 7.03934 10.6747 7.16868C10.6287 7.29801 10.542 7.39168 10.4147 7.44968C10.2873 7.50768 10.1593 7.51334 10.0307 7.46668C9.11399 7.03734 8.15633 6.91334 7.15766 7.09468C6.15899 7.27601 5.29033 7.73601 4.55166 8.47468C4.08499 8.94134 3.72266 9.47901 3.46466 10.0877C3.20666 10.6963 3.07733 11.3337 3.07666 11.9997C3.07599 12.6657 3.20533 13.3033 3.46466 13.9127C3.72399 14.522 4.08633 15.0593 4.55166 15.5247C5.29033 16.2633 6.15899 16.7233 7.15766 16.9047C8.15633 17.086 9.11399 16.962 10.0307 16.5327C10.16 16.486 10.2873 16.4917 10.4127 16.5497C10.538 16.6077 10.6233 16.701 10.6687 16.8297C10.7153 16.9563 10.7073 17.083 10.6447 17.2097C10.5827 17.3363 10.487 17.423 10.3577 17.4697C9.26499 17.9743 8.12166 18.1117 6.92766 17.8817C5.73366 17.6517 4.70366 17.104 3.83766 16.2387C3.27433 15.674 2.83999 15.0247 2.53466 14.2907C2.22933 13.5553 2.07666 12.7917 2.07666 11.9997ZM22.0767 11.9997C22.0767 12.7923 21.924 13.5557 21.6187 14.2897C21.3133 15.0243 20.8787 15.674 20.3147 16.2387C19.4493 17.1033 18.4197 17.648 17.2257 17.8727C16.0317 18.0973 14.8903 17.9607 13.8017 17.4627C13.6723 17.4167 13.5757 17.332 13.5117 17.2087C13.447 17.086 13.438 16.96 13.4847 16.8307C13.5313 16.7013 13.617 16.6077 13.7417 16.5497C13.8663 16.4917 13.9933 16.486 14.1227 16.5327C15.0393 16.962 15.997 17.086 16.9957 16.9047C17.9943 16.7233 18.863 16.2633 19.6017 15.5247C20.0683 15.058 20.431 14.5207 20.6897 13.9127C20.9483 13.3047 21.0773 12.667 21.0767 11.9997C21.076 11.3323 20.947 10.695 20.6897 10.0877C20.4323 9.48034 20.0697 8.94268 19.6017 8.47468C18.863 7.73601 17.9943 7.27601 16.9957 7.09468C15.997 6.91334 15.0393 7.03734 14.1227 7.46668C13.9933 7.51334 13.8663 7.50768 13.7417 7.44968C13.617 7.39168 13.5313 7.29834 13.4847 7.16968C13.438 7.04101 13.447 6.91334 13.5117 6.78668C13.5757 6.66201 13.6723 6.57668 13.8017 6.53068C14.8943 6.02934 16.0367 5.89268 17.2287 6.12068C18.4207 6.34868 19.4497 6.89534 20.3157 7.76068C20.8797 8.32534 21.314 8.97501 21.6187 9.70968C21.924 10.443 22.0767 11.2063 22.0767 11.9997ZM12.0767 16.0657C11.9727 16.0657 11.8687 16.0413 11.7647 15.9927C11.6613 15.9447 11.568 15.879 11.4847 15.7957C11.038 15.2777 10.6917 14.692 10.4457 14.0387C10.1997 13.3853 10.0767 12.7057 10.0767 11.9997C10.0767 11.2937 10.2 10.614 10.4467 9.96068C10.6933 9.30734 11.0393 8.72168 11.4847 8.20368C11.568 8.12034 11.6613 8.05468 11.7647 8.00668C11.868 7.95868 11.972 7.93468 12.0767 7.93468C12.1813 7.93468 12.2853 7.95868 12.3887 8.00668C12.492 8.05468 12.5853 8.12034 12.6687 8.20368C13.1153 8.72168 13.4617 9.30734 13.7077 9.96068C13.9537 10.614 14.0767 11.2937 14.0767 11.9997C14.0767 12.7057 13.9533 13.3853 13.7067 14.0387C13.46 14.692 13.114 15.2777 12.6687 15.7957C12.5853 15.879 12.492 15.9447 12.3887 15.9927C12.2853 16.0407 12.1813 16.0657 12.0767 16.0657Z"
+      fill="#6571BD"
+    />
+  </svg>
+</template>
+
+<script lang="ts">
+import { defineComponent } from "vue";
+
+export default defineComponent({
+  name: "InnerJoinTypeSvg",
+  props: {
+    shouldFill: {
+      type: Boolean,
+      default: false,
+    },
+  },
+});
+</script>
diff --git a/web/src/components/icons/LeftJoinLineSvg.vue b/web/src/components/icons/LeftJoinLineSvg.vue
new file mode 100644
index 00000000000..3d8c3412d3d
--- /dev/null
+++ b/web/src/components/icons/LeftJoinLineSvg.vue
@@ -0,0 +1,20 @@
+<template>
+  <svg
+    xmlns="http://www.w3.org/2000/svg"
+    width="53"
+    height="4"
+    viewBox="0 0 53 4"
+    fill="none"
+  >
+    <path d="M7.67297 2H52.5971" stroke="#6571BD" stroke-dasharray="2 2" />
+    <ellipse cx="2.68132" cy="2" rx="1.99663" ry="2" fill="#6571BD" />
+  </svg>
+</template>
+
+<script lang="ts">
+import { defineComponent } from "vue";
+
+export default defineComponent({
+  name: "LeftJoinLineSvg  ",
+});
+</script>
diff --git a/web/src/components/icons/LeftJoinSvg.vue b/web/src/components/icons/LeftJoinSvg.vue
new file mode 100644
index 00000000000..9d377afbdda
--- /dev/null
+++ b/web/src/components/icons/LeftJoinSvg.vue
@@ -0,0 +1,20 @@
+<template>
+  <svg
+    xmlns="http://www.w3.org/2000/svg"
+    width="20"
+    height="12"
+    viewBox="0 0 20 12"
+    fill="none"
+  >
+    <circle cx="6" cy="6" r="5.5" stroke="#6571BD" />
+    <circle opacity="0.1" cx="14" cy="6" r="5.5" stroke="black" />
+  </svg>
+</template>
+
+<script lang="ts">
+import { defineComponent } from "vue";
+
+export default defineComponent({
+  name: "LeftJoinSvg",
+});
+</script>
diff --git a/web/src/components/icons/LeftJoinTypeSvg.vue b/web/src/components/icons/LeftJoinTypeSvg.vue
new file mode 100644
index 00000000000..6707f744e3c
--- /dev/null
+++ b/web/src/components/icons/LeftJoinTypeSvg.vue
@@ -0,0 +1,37 @@
+<template>
+  <svg
+    xmlns="http://www.w3.org/2000/svg"
+    width="25"
+    height="24"
+    viewBox="0 0 25 24"
+    fill="none"
+  >
+    <rect
+      v-if="shouldFill"
+      x="0.0766602"
+      width="24"
+      height="24"
+      rx="2"
+      fill="#6571BD"
+      fill-opacity="0.12"
+    />
+    <path
+      d="M8.57672 18C6.90872 18 5.49172 17.417 4.32572 16.251C3.15972 15.085 2.57672 13.668 2.57672 12C2.57672 10.332 3.15972 8.915 4.32572 7.749C5.49172 6.583 6.90872 6 8.57672 6C9.18072 6 9.75939 6.08667 10.3127 6.26C10.8661 6.43333 11.3744 6.68467 11.8377 7.014C11.1537 7.664 10.6251 8.42067 10.2517 9.284C9.87839 10.1487 9.69172 11.054 9.69172 12C9.69172 12.946 9.87839 13.8513 10.2517 14.716C10.6251 15.5807 11.1541 16.3373 11.8387 16.986C11.3747 17.316 10.8661 17.5673 10.3127 17.74C9.75939 17.9133 9.18072 18 8.57672 18ZM16.5767 18C15.9727 18 15.3944 17.9133 14.8417 17.74C14.2891 17.5667 13.7801 17.3157 13.3147 16.987C13.4447 16.869 13.5674 16.743 13.6827 16.609L14.0267 16.208C14.3894 16.4593 14.7857 16.654 15.2157 16.792C15.6457 16.93 16.0994 16.9993 16.5767 17C17.9601 17 19.1394 16.5123 20.1147 15.537C21.0901 14.5617 21.5774 13.3827 21.5767 12C21.5761 10.6173 21.0884 9.43833 20.1137 8.463C19.1391 7.48767 17.9601 7 16.5767 7C16.0987 7 15.6447 7.06933 15.2147 7.208C14.7847 7.34667 14.3887 7.54133 14.0267 7.792L13.6827 7.392C13.5674 7.258 13.4451 7.13167 13.3157 7.013C13.7791 6.68367 14.2874 6.43267 14.8407 6.26C15.3947 6.08667 15.9734 6 16.5767 6C18.2447 6 19.6617 6.583 20.8277 7.749C21.9937 8.915 22.5767 10.332 22.5767 12C22.5767 13.668 21.9937 15.085 20.8277 16.251C19.6617 17.417 18.2447 18 16.5767 18ZM12.5767 16.442C11.9474 15.882 11.4567 15.2153 11.1047 14.442C10.7527 13.6687 10.5767 12.8547 10.5767 12C10.5767 11.1453 10.7527 10.3313 11.1047 9.558C11.4567 8.78467 11.9474 8.118 12.5767 7.558C13.2061 8.118 13.6967 8.78467 14.0487 9.558C14.4007 10.3313 14.5767 11.1453 14.5767 12C14.5767 12.8547 14.4007 13.6687 14.0487 14.442C13.6967 15.2153 13.2061 15.882 12.5767 16.442Z"
+      fill="#6571BD"
+    />
+  </svg>
+</template>
+
+<script lang="ts">
+import { defineComponent } from "vue";
+
+export default defineComponent({
+  name: "LeftJoinTypeSvg",
+  props: {
+    shouldFill: {
+      type: Boolean,
+      default: false,
+    },
+  },
+});
+</script>
diff --git a/web/src/components/icons/RightJoinLineSvg.vue b/web/src/components/icons/RightJoinLineSvg.vue
new file mode 100644
index 00000000000..b2783025dcf
--- /dev/null
+++ b/web/src/components/icons/RightJoinLineSvg.vue
@@ -0,0 +1,20 @@
+<template>
+  <svg
+    xmlns="http://www.w3.org/2000/svg"
+    width="53"
+    height="4"
+    viewBox="0 0 53 4"
+    fill="none"
+  >
+    <path d="M0.404785 2L45.3289 2" stroke="#6571BD" stroke-dasharray="2 2" />
+    <ellipse cx="50.8195" cy="2" rx="1.99663" ry="2" fill="#6571BD" />
+  </svg>
+</template>
+
+<script lang="ts">
+import { defineComponent } from "vue";
+
+export default defineComponent({
+  name: "RightJoinLineSvg",
+});
+</script>
diff --git a/web/src/components/icons/RightJoinSvg.vue b/web/src/components/icons/RightJoinSvg.vue
new file mode 100644
index 00000000000..7be1df35e74
--- /dev/null
+++ b/web/src/components/icons/RightJoinSvg.vue
@@ -0,0 +1,33 @@
+<template>
+  <svg
+    xmlns="http://www.w3.org/2000/svg"
+    width="21"
+    height="12"
+    viewBox="0 0 21 12"
+    fill="none"
+  >
+    <circle
+      cx="14.295"
+      cy="6"
+      r="5.5"
+      transform="rotate(-180 14.295 6)"
+      stroke="#6571BD"
+    />
+    <circle
+      opacity="0.1"
+      cx="6.29504"
+      cy="6"
+      r="5.5"
+      transform="rotate(-180 6.29504 6)"
+      stroke="black"
+    />
+  </svg>
+</template>
+
+<script lang="ts">
+import { defineComponent } from "vue";
+
+export default defineComponent({
+  name: "RightJoinSvg",
+});
+</script>
diff --git a/web/src/components/icons/RightJoinTypeSvg.vue b/web/src/components/icons/RightJoinTypeSvg.vue
new file mode 100644
index 00000000000..04d7648021a
--- /dev/null
+++ b/web/src/components/icons/RightJoinTypeSvg.vue
@@ -0,0 +1,37 @@
+<template>
+  <svg
+    xmlns="http://www.w3.org/2000/svg"
+    width="25"
+    height="24"
+    viewBox="0 0 25 24"
+    fill="none"
+  >
+    <rect
+      v-if="shouldFill"
+      x="0.0766602"
+      width="24"
+      height="24"
+      rx="2"
+      fill="#6571BD"
+      fill-opacity="0.12"
+    />
+    <path
+      d="M16.5767 18C15.9727 18 15.3943 17.9133 14.8417 17.74C14.289 17.5667 13.78 17.3157 13.3147 16.987C14 16.337 14.529 15.58 14.9017 14.716C15.275 13.8513 15.4617 12.946 15.4617 12C15.4617 11.054 15.275 10.1487 14.9017 9.284C14.5283 8.41933 13.9997 7.66267 13.3157 7.014C13.7797 6.684 14.2883 6.43233 14.8417 6.259C15.395 6.08633 15.9733 6 16.5767 6C18.2447 6 19.6617 6.583 20.8277 7.749C21.9937 8.915 22.5767 10.332 22.5767 12C22.5767 13.668 21.9937 15.085 20.8277 16.251C19.6617 17.417 18.2447 18 16.5767 18ZM8.57666 18C6.90866 18 5.49166 17.417 4.32566 16.251C3.15966 15.085 2.57666 13.668 2.57666 12C2.57666 10.332 3.15966 8.915 4.32566 7.749C5.49166 6.583 6.90866 6 8.57666 6C9.18066 6 9.75933 6.08667 10.3127 6.26C10.866 6.43333 11.3743 6.68467 11.8377 7.014C11.7083 7.132 11.586 7.25767 11.4707 7.391L11.1267 7.792C10.7673 7.54133 10.372 7.34667 9.94066 7.208C9.50933 7.06933 9.05466 7 8.57666 7C7.19333 7 6.01433 7.48767 5.03966 8.463C4.06499 9.43833 3.57733 10.6173 3.57666 12C3.57599 13.3827 4.06366 14.562 5.03966 15.538C6.01566 16.514 7.19466 17.0013 8.57666 17C9.05466 17 9.50966 16.9307 9.94166 16.792C10.3723 16.6533 10.7673 16.4587 11.1267 16.208L11.4707 16.608C11.586 16.7427 11.7083 16.869 11.8377 16.987C11.3743 17.3163 10.866 17.5677 10.3127 17.741C9.75933 17.9137 9.18066 18 8.57666 18ZM12.5767 16.442C11.9473 15.882 11.4567 15.2153 11.1047 14.442C10.7527 13.6687 10.5767 12.8547 10.5767 12C10.5767 11.1453 10.7527 10.3313 11.1047 9.558C11.4567 8.78467 11.9473 8.118 12.5767 7.558C13.206 8.118 13.6967 8.78467 14.0487 9.558C14.4007 10.3313 14.5767 11.1453 14.5767 12C14.5767 12.8547 14.4007 13.6687 14.0487 14.442C13.6967 15.2153 13.206 15.882 12.5767 16.442Z"
+      fill="#6571BD"
+    />
+  </svg>
+</template>
+
+<script lang="ts">
+import { defineComponent } from "vue";
+
+export default defineComponent({
+  name: "RightJoinTypeSvg",
+  props: {
+    shouldFill: {
+      type: Boolean,
+      default: false,
+    },
+  },
+});
+</script>
diff --git a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
index b3fd53d7012..5ccd691e8e1 100644
--- a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
+++ b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
@@ -15,11 +15,20 @@
 
 <!-- eslint-disable vue/no-unused-components -->
 <template>
-  <div data-test="dashboard-join-pop-up" style="width: 500px">
-    <div>
-      <div
-        class="tw-flex tw-flex-row tw-w-full tw-gap-10 items-center q-table__title q-mr-md"
-      >
+  <div data-test="dashboard-join-pop-up" style="width: 624px">
+    <div
+      style="
+        display: flex;
+        justify-content: space-between;
+        align-items: center;
+        margin-bottom: 15px;
+      "
+    >
+      <div style="flex: 1; gap: 8px">
+        <div style="display: flex; align-items: center; gap: 8px">
+          <LeftJoinSvg />
+          <label>Join</label>
+        </div>
         <q-select
           dense
           filled
@@ -27,19 +36,88 @@
           :options="[]"
           :disable="true"
           label="Joining Stream"
-          class="q-py-md tw-w-1/3"
+          style="width: 100%"
           data-test="dashboard-config-panel-join-from"
         />
+      </div>
+      <div
+        style="display: flex; align-items: center; gap: 8px; padding-top: 21px"
+      >
+        <LeftJoinLineSvg />
+      </div>
 
-        <q-select
-          filled
-          dense
-          v-model="modelValue.joinType"
-          :options="joinOptions"
-          label="With Join Type"
-          class="q-py-md tw-w-1/3"
-          data-test="dashboard-config-panel-join-type"
-        />
+      <div>
+        <label for="joinType">Join type</label>
+        <div
+          style="
+            display: flex;
+            justify-content: center;
+            align-items: center;
+            gap: 8px;
+          "
+        >
+          <div
+            style="
+              display: flex;
+              flex-direction: column;
+              align-items: center;
+              cursor: pointer;
+            "
+            @click="modelValue.joinType = 'left'"
+          >
+            <LeftJoinTypeSvg :shouldFill="modelValue.joinType === 'left'" />
+            <div
+              :class="[modelValue.joinType === 'left' ? 'text-primary' : '']"
+            >
+              Left
+            </div>
+          </div>
+          <div
+            style="
+              display: flex;
+              flex-direction: column;
+              align-items: center;
+              cursor: pointer;
+            "
+            @click="modelValue.joinType = 'inner'"
+          >
+            <InnerJoinTypeSvg :shouldFill="modelValue.joinType === 'inner'" />
+            <div
+              :class="[modelValue.joinType === 'inner' ? 'text-primary' : '']"
+            >
+              Inner
+            </div>
+          </div>
+          <div
+            style="
+              display: flex;
+              flex-direction: column;
+              align-items: center;
+              cursor: pointer;
+            "
+            @click="modelValue.joinType = 'right'"
+          >
+            <RightJoinTypeSvg :shouldFill="modelValue.joinType === 'right'" />
+            <div
+              :class="[modelValue.joinType === 'right' ? 'text-primary' : '']"
+            >
+              Right
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <div
+        style="display: flex; align-items: center; gap: 8px; padding-top: 21px"
+      >
+        <RightJoinLineSvg />
+      </div>
+
+      <div style="flex: 1">
+        <div style="display: flex; align-items: center; gap: 8px">
+          <RightJoinSvg />
+          <label>On</label>
+        </div>
 
         <q-select
           filled
@@ -49,7 +127,7 @@
           emit-value
           map-options
           label="On Stream"
-          class="q-py-md tw-w-1/3"
+          style="width: 100%"
           data-test="dashboard-config-panel-join-to"
           use-input
           input-debounce="0"
@@ -59,83 +137,98 @@
           @filter="filterStreamOptions"
         />
       </div>
+    </div>
 
-      <q-separator />
-
-      <div>
-        <span class="tw-w-full tw-text-center tw-mt-5 tw-text-lg">On</span>
-        <div
-          v-for="(arg, argIndex) in modelValue.conditions"
-          :key="argIndex + JSON.stringify(arg)"
-          class="tw-w-full tw-flex tw-flex-col"
+    <div style="margin-bottom: 10px">
+      <div style="margin-bottom: 10px">
+        <h3
+          style="
+            font-size: 14px;
+            font-style: normal;
+            font-weight: 600;
+            line-height: normal;
+          "
         >
-          <div>
-            <div>
-              <label :for="'arg-' + argIndex"
-                >condition {{ argIndex + 1 }}</label
-              >
-            </div>
-            <div class="tw-flex tw-gap-x-3">
-              <!-- Left field selector using StreamFieldSelect -->
-              <div class="tw-w-1/3">
-                <StreamFieldSelect
-                  :streams="getStreamsBasedJoinIndex()"
-                  v-model="modelValue.conditions[argIndex].leftField"
-                  :data-test="`dashboard-join-condition-leftField-${argIndex}`"
-                />
-              </div>
-
-              <!-- operator selector -->
-              <q-select
-                behavior="menu"
-                borderless
-                v-model="modelValue.conditions[argIndex].operation"
-                :options="operationOptions"
-                dense
-                filled
-                label="Select Operation"
-                :data-test="`dashboard-join-condition-operation-${argIndex}`"
-                class="tw-w-1/3"
-              />
-
-              <!-- Right field selector using StreamFieldSelect -->
-              <div class="tw-w-1/3">
-                <StreamFieldSelect
-                  :streams="[
-                    {
-                      stream: modelValue.stream,
-                      streamAlias: modelValue.streamAlias,
-                    },
-                  ]"
-                  v-model="modelValue.conditions[argIndex].rightField"
-                  :data-test="`dashboard-join-condition-rightField-${argIndex}`"
-                />
-              </div>
-
-              <!-- Remove argument button -->
-              <!-- only allow if more than 1 -->
-              <q-btn
-                v-if="modelValue.conditions.length > 1"
-                :data-test="`dashboard-join-condition-remove-${argIndex}`"
-                icon="close"
-                dense
-                flat
-                round
-                @click="removeCondition(argIndex)"
-                class="tw-h-10 tw-w-10"
-              />
-            </div>
+          Joining Clause
+        </h3>
+        <p
+          style="
+            font-size: 12px;
+            font-style: normal;
+            font-weight: 400;
+            line-height: normal;
+          "
+        >
+          Select the fields that need to be correlated within the joining
+          streams
+        </p>
+      </div>
+
+      <div
+        v-for="(arg, argIndex) in modelValue.conditions"
+        :key="argIndex + JSON.stringify(arg)"
+        style="
+          margin-bottom: 10px;
+          padding: 10px;
+          border: 1px solid #eee;
+          border-radius: 4px;
+        "
+      >
+        <div>Clause {{ argIndex + 1 }}</div>
+        <div style="display: flex; align-items: center">
+          <div style="flex: 1; margin-right: 10px">
+            <StreamFieldSelect
+              :streams="getStreamsBasedJoinIndex()"
+              v-model="modelValue.conditions[argIndex].leftField"
+              :data-test="`dashboard-join-condition-left-field-${argIndex}`"
+            />
           </div>
+
+          <div style="flex: 1; margin-right: 10px">
+            <!-- operator selector -->
+            <q-select
+              behavior="menu"
+              borderless
+              v-model="modelValue.conditions[argIndex].operation"
+              :options="operationOptions"
+              dense
+              filled
+              label="Select Operation"
+              :data-test="`dashboard-join-condition-operation-${argIndex}`"
+            />
+          </div>
+
+          <div style="flex: 1; margin-right: 10px">
+            <StreamFieldSelect
+              :streams="[
+                {
+                  stream: modelValue.stream,
+                  streamAlias: modelValue.streamAlias,
+                },
+              ]"
+              v-model="modelValue.conditions[argIndex].rightField"
+            />
+          </div>
+
+          <q-btn
+            @click="addCondition(argIndex)"
+            no-caps
+            dense
+            flat
+            icon="add"
+          />
+
+          <q-btn
+            :data-test="`dashboard-join-condition-remove-${argIndex}`"
+            icon="close"
+            dense
+            flat
+            round
+            :disable="modelValue.conditions.length === 1"
+            @click="removeCondition(argIndex)"
+            class="tw-h-10 tw-w-10"
+          />
         </div>
-        <q-btn
-          @click="addCondition()"
-          color="primary"
-          label="+ Add Condition"
-          padding="5px 14px"
-          class="tw-mt-3"
-          no-caps
-          dense
-        />
       </div>
     </div>
   </div>
@@ -149,12 +242,25 @@ import { useLoading } from "@/composables/useLoading";
 import useStreams from "@/composables/useStreams";
 import useDashboardPanelData from "@/composables/useDashboardPanel";
 import StreamFieldSelect from "@/components/dashboards/addPanel/StreamFieldSelect.vue";
-
+import LeftJoinSvg from "@/components/icons/LeftJoinSvg.vue";
+import LeftJoinTypeSvg from "@/components/icons/LeftJoinTypeSvg.vue";
+import LeftJoinLineSvg from "@/components/icons/LeftJoinLineSvg.vue";
+import RightJoinSvg from "@/components/icons/RightJoinSvg.vue";
+import RightJoinTypeSvg from "@/components/icons/RightJoinTypeSvg.vue";
+import RightJoinLineSvg from "@/components/icons/RightJoinLineSvg.vue";
+import InnerJoinTypeSvg from "@/components/icons/InnerJoinTypeSvg.vue";
 export default defineComponent({
   name: "AddJoinPopUp",
 
   components: {
     StreamFieldSelect,
+    LeftJoinSvg,
+    LeftJoinTypeSvg,
+    LeftJoinLineSvg,
+    RightJoinSvg,
+    RightJoinTypeSvg,
+    RightJoinLineSvg,
+    InnerJoinTypeSvg,
   },
 
   props: {
@@ -273,8 +379,8 @@ export default defineComponent({
       props.modelValue.conditions.splice(argIndex, 1);
     };
 
-    const addCondition = () => {
-      props.modelValue.conditions.push({
+    const addCondition = (index: number = 0) => {
+      props.modelValue.conditions.splice(index + 1, 0, {
         leftField: {
           streamAlias: "",
           field: "",

From 2dcb6d8cfe6ea4fb904cae8b63573d298fd09549 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 20 May 2025 15:57:06 +0530
Subject: [PATCH 40/61] add: enhance join pop-up UI with dynamic joining
 information display

---
 .../Dashboards/addPanel/AddJoinPopUp.vue      | 24 +++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
index 5ccd691e8e1..4d862aad11c 100644
--- a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
+++ b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
@@ -139,6 +139,30 @@
       </div>
     </div>
 
+    <div class="tw-flex tw-items-center tw-gap-4">
+      <div class="tw-border-t tw-border-gray-200 tw-flex-1"></div>
+      <div
+        class="tw-py-2 tw-text-center tw-text-xs tw-text-gray-700"
+        v-if="
+          modelValue.stream &&
+          modelValue.streamAlias &&
+          modelValue.joinType &&
+          mainStream
+        "
+      >
+        Joining <span className="tw-font-semibold">{{ mainStream }}</span> with
+        <span className="tw-font-semibold">{{ modelValue.stream }}</span> with
+        <span className="tw-text-indigo-600"
+          >{{
+            modelValue?.joinType?.charAt(0)?.toUpperCase() +
+            modelValue?.joinType?.slice(1)
+          }}
+          Join</span
+        >
+      </div>
+      <div class="tw-border-t tw-border-gray-200 tw-flex-1"></div>
+    </div>
+
     <div style="margin-bottom: 10px">
       <div style="margin-bottom: 10px">
         <h3

From ab16f22b35c445b0d48bfdaf984ec2f0a065522d Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Wed, 21 May 2025 14:12:55 +0530
Subject: [PATCH 41/61] add: subArrow for function params

---
 .../dynamicFunction/DynamicFunctionPopUp.vue  | 127 +++++-----
 .../dynamicFunction/SelectFunction.vue        | 228 ++++++++++--------
 web/src/components/icons/SubTaskArrow.vue     |  23 ++
 3 files changed, 211 insertions(+), 167 deletions(-)
 create mode 100644 web/src/components/icons/SubTaskArrow.vue

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index 1af01ea22dc..3b89222afd2 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -1,70 +1,73 @@
 <template>
-  <div>
-    <!-- active-color="primary" -->
-    <!-- narrow-indicator -->
-    <!-- class="text-grey" -->
-    <!-- indicator-color="primary" -->
-    <q-tabs
-      v-model="fields.type"
-      @update:modelValue="onFieldTypeChange"
-      dense
-      data-test="dynamic-function-popup-tabs"
-      :align="'left'"
-    >
-      <q-tab
-        name="build"
-        label="Build"
-        data-test="dynamic-function-popup-tab-build"
-        class="tab-item-bold"
-      />
-      <q-tab
-        name="raw"
-        label="Raw"
-        data-test="dynamic-function-popup-tab-raw"
-        class="tab-item-bold"
-      />
-    </q-tabs>
+  <div class="tw-flex tw-gap-2">
+    <div style="width: 134px; padding-right: 12px; padding-top: 12px">
+      <div class="text-label-bold tw-pb-3">Property</div>
+      <div style="display: flex; flex-direction: column; gap: 14px">
+        <div>
+          <div class="text-label-normal tw-text-sm">Label</div>
+          <input
+            v-model="fields.label"
+            :class="[
+              store.state.theme === 'dark' ? 'bg-grey-10' : '',
+              'edit-input',
+            ]"
+          />
+        </div>
+        <div v-if="!customQuery && !fields.isDerived">
+          <SortByBtnGrp :fieldObj="fields" />
+        </div>
+      </div>
+    </div>
+
+    <div>
+      <!-- active-color="primary" -->
+      <!-- narrow-indicator -->
+      <!-- class="text-grey" -->
+      <!-- indicator-color="primary" -->
+      <q-tabs
+        v-model="fields.type"
+        @update:modelValue="onFieldTypeChange"
+        dense
+        data-test="dynamic-function-popup-tabs"
+        :align="'left'"
+      >
+        <q-tab
+          name="build"
+          label="Build"
+          data-test="dynamic-function-popup-tab-build"
+          class="tab-item-bold"
+        />
+        <q-tab
+          name="raw"
+          label="Raw"
+          data-test="dynamic-function-popup-tab-raw"
+          class="tab-item-bold"
+        />
+      </q-tabs>
 
-    <q-separator />
+      <q-separator />
 
-    <q-tab-panels v-model="fields.type" animated>
-      <q-tab-panel name="build" style="padding: 0px; padding-top: 8px">
-        <div style="display: flex">
-          <div style="width: 134px; padding-right: 12px">
-            <div class="text-label-bold tw-pb-3">Property</div>
-            <div style="display: flex; flex-direction: column; gap: 14px">
-              <div>
-                <div class="text-label-normal">Label</div>
-                <input
-                  v-model="fields.label"
-                  :class="[
-                    store.state.theme === 'dark' ? 'bg-grey-10' : '',
-                    'edit-input',
-                  ]"
-                />
-              </div>
-              <div v-if="!customQuery && !fields.isDerived">
-                <SortByBtnGrp :fieldObj="fields" />
-              </div>
+      <q-tab-panels v-model="fields.type" animated>
+        <q-tab-panel name="build" style="padding: 0px; padding-top: 8px">
+          <div style="display: flex">
+            <div style="width: calc(100% - 134px)">
+              <div class="text-label-bold tw-pb-3">Configuration</div>
+              <SelectFunction
+                v-model="fields"
+                data-test="dynamic-function-popup-select-function"
+                :allowAggregation="allowAggregation"
+              />
             </div>
           </div>
-          <div style="width: calc(100% - 134px)">
-            <div class="text-label-bold tw-pb-3">Configuration</div>
-            <SelectFunction
-              v-model="fields"
-              data-test="dynamic-function-popup-select-function"
-              :allowAggregation="allowAggregation"
-            />
-          </div>
-        </div>
-      </q-tab-panel>
-      <q-tab-panel name="raw">
-        <RawQueryBuilder
-          v-model="fields"
-          data-test="dynamic-function-popup-raw-query-builder"
-        />
-      </q-tab-panel>
-    </q-tab-panels>
+        </q-tab-panel>
+        <q-tab-panel name="raw">
+          <RawQueryBuilder
+            v-model="fields"
+            data-test="dynamic-function-popup-raw-query-builder"
+          />
+        </q-tab-panel>
+      </q-tab-panels>
+    </div>
   </div>
 </template>
 
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index 4edd14f5497..bbf8cf4befe 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -28,44 +28,55 @@
           />
         </template> -->
     </q-select>
-
-    <!-- {{ JSON.stringify(fields.args) }} -->
-    <!-- Loop through the args for the first n-1 arguments -->
-    <div
-      v-for="(arg, argIndex) in fields.args"
-      :key="argIndex"
-      class="tw-w-full tw-flex tw-flex-col"
-    >
-      <div>
-        <div>
-          <label :for="'arg-' + argIndex">Parameters {{ argIndex + 1 }}</label>
-        </div>
-        <div class="tw-flex tw-gap-x-3">
-          <!-- type selector -->
-          <q-select
-            v-model="fields.args[argIndex].type"
-            @update:model-value="onArgTypeChange(fields.args[argIndex])"
-            :options="
-              getSupportedTypeBasedOnFunctionNameAndIndex(
-                fields.functionName,
-                argIndex,
-              )
-            "
-            option-label="label"
-            option-value="value"
-            behavior="menu"
-            map-options
-            emit-value
-            dense
-            filled
-            label="Select Type"
-            class="tw-w-40 tw-min-w-40 tw-h-10 tw-text-white"
-            style="background: #6571BD;"
-            :data-test="`dashboard-function-dropdown-arg-type-selector-${argIndex}`"
-          />
-
-          <!-- Render different input types based on validation -->
-          <!-- <q-select
+    <div class="tw-w-full tw-p-3 tw-flex tw-gap-2">
+      <!-- <SubTaskArrow /> -->
+
+      <!-- {{ JSON.stringify(fields.args) }} -->
+      <!-- Loop through the args for the first n-1 arguments -->
+      <div class="tw-w-full">
+        <div
+          v-for="(arg, argIndex) in fields.args"
+          :key="argIndex"
+          class="tw-w-full tw-flex tw-flex-col"
+        >
+          <div class="tw-flex">
+            <div class="tw-mr-2 tw-relative">
+              <SubTaskArrow class="tw-absolute" />
+              <div
+                class="tw-h-full tw-border-l-[1px] tw-border-[#001495] tw-opacity-50 tw-relative"
+              ></div>
+            </div>
+            <div>
+              <div class="tw-flex tw-items-center tw-gap-x-2">
+                <label :for="'arg-' + argIndex"
+                  >Parameters {{ argIndex + 1 }}</label
+                >
+              </div>
+              <div class="tw-flex tw-gap-x-3">
+                <!-- type selector -->
+                <q-select
+                  v-model="fields.args[argIndex].type"
+                  @update:model-value="onArgTypeChange(fields.args[argIndex])"
+                  :options="
+                    getSupportedTypeBasedOnFunctionNameAndIndex(
+                      fields.functionName,
+                      argIndex,
+                    )
+                  "
+                  option-label="label"
+                  option-value="value"
+                  behavior="menu"
+                  map-options
+                  emit-value
+                  dense
+                  filled
+                  label="Select Type"
+                  class="tw-w-40 tw-min-w-40 tw-h-10 tw-text-white"
+                  :data-test="`dashboard-function-dropdown-arg-type-selector-${argIndex}`"
+                />
+
+                <!-- Render different input types based on validation -->
+                <!-- <q-select
             v-model="fields.args[argIndex].value"
             :options="filteredSchemaOptions"
             label="Select Field"
@@ -81,75 +92,81 @@
             @filter="filterStreamFn"
             :required="isRequired(fields.functionName, argIndex)"
             class="tw-w-52"
-          /> -->
-
-          <!-- Left field selector using StreamFieldSelect -->
-          <div class="tw-w-52" v-if="fields.args[argIndex]?.type === 'field'">
-            <StreamFieldSelect
-              :streams="getAllSelectedStreams()"
-              v-model="fields.args[argIndex].value"
-              :data-test="`dashboard-function-dropdown-arg-field-selector-${argIndex}`"
-            />
+             /> -->
+
+                <!-- Left field selector using StreamFieldSelect -->
+                <div
+                  class="tw-w-52"
+                  v-if="fields.args[argIndex]?.type === 'field'"
+                >
+                  <StreamFieldSelect
+                    :streams="getAllSelectedStreams()"
+                    v-model="fields.args[argIndex].value"
+                    :data-test="`dashboard-function-dropdown-arg-field-selector-${argIndex}`"
+                  />
+                </div>
+
+                <q-input
+                  v-if="fields.args[argIndex]?.type === 'string'"
+                  type="text"
+                  v-model="fields.args[argIndex].value"
+                  placeholder="Enter string"
+                  :required="isRequired(fields.functionName, argIndex)"
+                  class="tw-w-52"
+                  dense
+                  :data-test="`dashboard-function-dropdown-arg-string-input-${argIndex}`"
+                />
+
+                <q-input
+                  v-if="fields.args[argIndex]?.type === 'number'"
+                  type="number"
+                  v-model="fields.args[argIndex].value"
+                  placeholder="Enter number"
+                  :required="isRequired(fields.functionName, argIndex)"
+                  class="tw-w-52"
+                  dense
+                  :data-test="`dashboard-function-dropdown-arg-number-input-${argIndex}`"
+                />
+
+                <SelectFunction
+                  v-if="fields.args[argIndex]?.type === 'function'"
+                  class="tw-ml-4"
+                  v-model="fields.args[argIndex].value"
+                  :allowAggregation="allowAggregation"
+                  :data-test="`dashboard-function-dropdown-arg-function-input-${argIndex}`"
+                />
+
+                <!-- histogram interval for sql queries -->
+                <HistogramIntervalDropDown
+                  v-if="fields.args[argIndex]?.type === 'histogramInterval'"
+                  :model-value="fields.args[argIndex].value"
+                  @update:modelValue="
+                    (newValue: any) => {
+                      fields.args[argIndex].value = newValue.value;
+                    }
+                  "
+                  class="tw-w-52"
+                  :data-test="`dashboard-function-dropdown-arg-histogram-interval-input-${argIndex}`"
+                />
+
+                <!-- Remove argument button -->
+                <q-btn
+                  v-if="canRemoveArgument(fields.functionName, argIndex)"
+                  icon="close"
+                  dense
+                  flat
+                  round
+                  @click="removeArgument(argIndex)"
+                  class="tw-h-10 tw-w-10"
+                  :data-test="`dashboard-function-dropdown-arg-remove-button-${argIndex}`"
+                />
+              </div>
+            </div>
           </div>
-
-          <q-input
-            v-if="fields.args[argIndex]?.type === 'string'"
-            type="text"
-            v-model="fields.args[argIndex].value"
-            placeholder="Enter string"
-            :required="isRequired(fields.functionName, argIndex)"
-            class="tw-w-52"
-            dense
-            :data-test="`dashboard-function-dropdown-arg-string-input-${argIndex}`"
-          />
-
-          <q-input
-            v-if="fields.args[argIndex]?.type === 'number'"
-            type="number"
-            v-model="fields.args[argIndex].value"
-            placeholder="Enter number"
-            :required="isRequired(fields.functionName, argIndex)"
-            class="tw-w-52"
-            dense
-            :data-test="`dashboard-function-dropdown-arg-number-input-${argIndex}`"
-          />
-
-          <SelectFunction
-            v-if="fields.args[argIndex]?.type === 'function'"
-            class="tw-ml-4"
-            v-model="fields.args[argIndex].value"
-            :allowAggregation="allowAggregation"
-            :data-test="`dashboard-function-dropdown-arg-function-input-${argIndex}`"
-          />
-
-          <!-- histogram interval for sql queries -->
-          <HistogramIntervalDropDown
-            v-if="fields.args[argIndex]?.type === 'histogramInterval'"
-            :model-value="fields.args[argIndex].value"
-            @update:modelValue="
-              (newValue: any) => {
-                fields.args[argIndex].value = newValue.value;
-              }
-            "
-            class="tw-w-52"
-            :data-test="`dashboard-function-dropdown-arg-histogram-interval-input-${argIndex}`"
-          />
-
-          <!-- Remove argument button -->
-          <q-btn
-            v-if="canRemoveArgument(fields.functionName, argIndex)"
-            icon="close"
-            dense
-            flat
-            round
-            @click="removeArgument(argIndex)"
-            class="tw-h-10 tw-w-10"
-            :data-test="`dashboard-function-dropdown-arg-remove-button-${argIndex}`"
-          />
         </div>
-      </div>
 
-      <!-- Add more arguments if allowed -->
+        <!-- Add more arguments if allowed -->
+      </div>
     </div>
     <q-btn
       v-if="canAddArgument(fields.functionName)"
@@ -173,10 +190,11 @@ import { useSelectAutoComplete } from "@/composables/useSelectAutocomplete";
 import HistogramIntervalDropDown from "../HistogramIntervalDropDown.vue";
 import { addMissingArgs } from "@/utils/dashboard/convertDataIntoUnitValue";
 import StreamFieldSelect from "@/components/dashboards/addPanel/StreamFieldSelect.vue";
+import SubTaskArrow from "@/components/icons/SubTaskArrow.vue";
 
 export default {
   name: "SelectFunction",
-  components: { HistogramIntervalDropDown, StreamFieldSelect },
+  components: { HistogramIntervalDropDown, StreamFieldSelect, SubTaskArrow },
   props: {
     modelValue: {
       type: Object,
diff --git a/web/src/components/icons/SubTaskArrow.vue b/web/src/components/icons/SubTaskArrow.vue
new file mode 100644
index 00000000000..ecdd472b21c
--- /dev/null
+++ b/web/src/components/icons/SubTaskArrow.vue
@@ -0,0 +1,23 @@
+<template>
+  <svg
+    xmlns="http://www.w3.org/2000/svg"
+    width="12"
+    height="50"
+    viewBox="0 0 12 50"
+    fill="none"
+  >
+    <path
+      d="M1 48L0.750002 48L0.750002 48.25L1 48.25L1 48ZM11.1768 48.1768C11.2744 48.0791 11.2744 47.9209 11.1768 47.8232L9.58579 46.2322C9.48816 46.1346 9.32986 46.1346 9.23223 46.2322C9.1346 46.3299 9.1346 46.4882 9.23223 46.5858L10.6464 48L9.23223 49.4142C9.1346 49.5118 9.1346 49.6701 9.23223 49.7678C9.32986 49.8654 9.48816 49.8654 9.58579 49.7678L11.1768 48.1768ZM1 0L0.75 1.09278e-08L0.750002 48L1 48L1.25 48L1.25 -1.09278e-08L1 0ZM1 48L1 48.25L11 48.25L11 48L11 47.75L1 47.75L1 48Z"
+      fill="#001495"
+      fill-opacity="0.5"
+    />
+  </svg>
+</template>
+
+<script lang="ts">
+import { defineComponent } from "vue";
+
+export default defineComponent({
+  name: "SubTaskArrow",
+});
+</script>

From 4997f5485566a3dee9b9be912ae567aea5791257 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 22 May 2025 12:34:19 +0530
Subject: [PATCH 42/61] style: update UI components for better layout

---
 .../addPanel/DashboardQueryBuilder.vue        |  4 +-
 .../dynamicFunction/DynamicFunctionPopUp.vue  | 27 +++++++--
 .../dynamicFunction/RawQueryBuilder.vue       | 60 +++++++++++--------
 .../dynamicFunction/SelectFunction.vue        |  3 +-
 web/src/components/icons/SubTaskArrow.vue     | 15 ++++-
 5 files changed, 73 insertions(+), 36 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index 224f47ac767..2b3a1f9d135 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -114,6 +114,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     <q-menu
                       :data-test="`dashboard-x-item-${itemX?.alias}-menu`"
                       class="field-function-menu-popup"
+                      style="width: 771px !important"
                     >
                       <div style="padding: 3px 16px 16px 16px">
                         <div>
@@ -206,7 +207,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             "
                           />
                         </div> -->
-                        
                       </div>
                     </q-menu>
                   </q-btn>
@@ -1950,7 +1950,7 @@ export default defineComponent({
 }
 
 .field-function-menu-popup {
-  width: 771px;
+  width: 771px !important;
   height: 323px;
   border-radius: 4px;
   border: 1px solid #d5d5d5;
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index 3b89222afd2..5947e2787d5 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -13,13 +13,24 @@
             ]"
           />
         </div>
+        <div>
+          <div class="text-label-normal tw-text-sm">Alias</div>
+          <input
+            v-model="fields.alias"
+            disabled
+            :class="[
+              store.state.theme === 'dark' ? 'bg-grey-10' : '',
+              'edit-input',
+            ]"
+          />
+        </div>
         <div v-if="!customQuery && !fields.isDerived">
           <SortByBtnGrp :fieldObj="fields" />
         </div>
       </div>
     </div>
 
-    <div>
+    <div style="width: calc(100% - 134px)">
       <!-- active-color="primary" -->
       <!-- narrow-indicator -->
       <!-- class="text-grey" -->
@@ -60,11 +71,15 @@
             </div>
           </div>
         </q-tab-panel>
-        <q-tab-panel name="raw">
-          <RawQueryBuilder
-            v-model="fields"
-            data-test="dynamic-function-popup-raw-query-builder"
-          />
+        <q-tab-panel name="raw" style="padding: 0px; padding-top: 8px">
+          <div style="display: flex; width: 100%">
+            <div style="width: calc(100% - 134px)">
+              <RawQueryBuilder
+                v-model="fields"
+                data-test="dynamic-function-popup-raw-query-builder"
+              />
+            </div>
+          </div>
         </q-tab-panel>
       </q-tab-panels>
     </div>
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue b/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
index 0ca7de0fb61..94e2769e53e 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
@@ -1,27 +1,22 @@
 <template>
-  <div>
-    <div class="q-mb-sm rawQuery">Query</div>
-    <q-input
-      outlined
-      v-model="fields.rawQuery"
-      filled
-      autogrow
-      class="showLabelOnTop"
-      data-test="dynamic-function-popup-raw-query-input"
-    />
-    <q-input
-      v-model="fields.alias"
-      label="Alias"
-      color="input-border"
-      bg-color="input-bg"
-      class="q-py-md showLabelOnTop"
-      stack-label
-      disable
-      filled
-      dense
-      label-slot
-      data-test="dynamic-function-popup-raw-query-alias-input"
-    />
+  <div style="width: 100%">
+    <div class="query-section">
+      <div class="query-label">Query</div>
+
+      <textarea
+        style="
+          min-width: 100%;
+          max-width: 100%;
+          resize: vertical;
+          border: 1px solid;
+          border-radius: 4px;
+          padding: 2px;
+        "
+        v-model="fields.rawQuery"
+        :class="store.state.theme == 'dark' ? 'dark-mode' : 'bg-white'"
+        data-test="dashboard-drilldown-url-textarea"
+      ></textarea>
+    </div>
   </div>
 </template>
 
@@ -70,12 +65,25 @@ export default {
   },
 };
 </script>
+
 <style scoped>
-.rawQuery {
-  margin-top: 5px;
-  margin-bottom: 5px;
+.query-section {
+  margin-bottom: 20px;
+}
+
+.query-label {
   font-size: 14px;
   font-weight: 600;
   color: #666666;
+  margin-bottom: 5px;
+}
+
+.query-input {
+  width: 100%;
+  min-height: 100px;
+  padding: 10px;
+  border: 1px solid #ccc;
+  border-radius: 4px;
+  resize: vertical;
 }
 </style>
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index bbf8cf4befe..7b87dc6fe5c 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -43,7 +43,8 @@
             <div class="tw-mr-2 tw-relative">
               <SubTaskArrow class="tw-absolute" />
               <div
-                class="tw-h-full tw-border-l-[1px] tw-border-[#001495] tw-opacity-50 tw-relative"
+                v-if="argIndex !== fields.args.length - 1"
+                class="tw-border-l-[1px] tw-border-[#001495] tw-opacity-50 tw-relative tw-h-full"
               ></div>
             </div>
             <div>
diff --git a/web/src/components/icons/SubTaskArrow.vue b/web/src/components/icons/SubTaskArrow.vue
index ecdd472b21c..31633f30568 100644
--- a/web/src/components/icons/SubTaskArrow.vue
+++ b/web/src/components/icons/SubTaskArrow.vue
@@ -5,9 +5,16 @@
     height="50"
     viewBox="0 0 12 50"
     fill="none"
+    class="tw-absolute"
   >
     <path
-      d="M1 48L0.750002 48L0.750002 48.25L1 48.25L1 48ZM11.1768 48.1768C11.2744 48.0791 11.2744 47.9209 11.1768 47.8232L9.58579 46.2322C9.48816 46.1346 9.32986 46.1346 9.23223 46.2322C9.1346 46.3299 9.1346 46.4882 9.23223 46.5858L10.6464 48L9.23223 49.4142C9.1346 49.5118 9.1346 49.6701 9.23223 49.7678C9.32986 49.8654 9.48816 49.8654 9.58579 49.7678L11.1768 48.1768ZM1 0L0.75 1.09278e-08L0.750002 48L1 48L1.25 48L1.25 -1.09278e-08L1 0ZM1 48L1 48.25L11 48.25L11 48L11 47.75L1 47.75L1 48Z"
+      d="M1 0V20C1 40 2 48 11 48H11"
+      stroke="#001495"
+      stroke-opacity="0.5"
+      stroke-width="1"
+    />
+    <path
+      d="M11.1768 48.1768C11.2744 48.0791 11.2744 47.9209 11.1768 47.8232L9.58579 46.2322C9.48816 46.1346 9.32986 46.1346 9.23223 46.2322C9.1346 46.3299 9.1346 46.4882 9.23223 46.5858L10.6464 48L9.23223 49.4142C9.1346 49.5118 9.1346 49.6701 9.23223 49.7678C9.32986 49.8654 9.48816 49.8654 9.58579 49.7678L11.1768 48.1768Z"
       fill="#001495"
       fill-opacity="0.5"
     />
@@ -19,5 +26,11 @@ import { defineComponent } from "vue";
 
 export default defineComponent({
   name: "SubTaskArrow",
+  props: {
+    height: {
+      type: Number,
+      default: 50,
+    },
+  },
 });
 </script>

From 53bf807043cf71ed4cfd8903de1b45529d08262e Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Thu, 22 May 2025 13:11:32 +0530
Subject: [PATCH 43/61] fix: improve null handling and optional chaining in
 chart fields validation

---
 .../dashboard/convertDataIntoUnitValue.ts     | 34 +++++++++----------
 1 file changed, 17 insertions(+), 17 deletions(-)

diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index b395b1096df..7856b893206 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -631,27 +631,27 @@ const validateChartFieldsConfiguration = (
   // need to validate all the fields based on the selected aggregation function
   // get all the fields that are not derived and type is build
   const aggregationFunctionError = [
-    ...fields?.y,
-    ...fields?.x,
-    ...fields?.breakdown,
-    ...fields?.z,
-    fields?.source,
-    fields?.target,
-    fields?.value,
-    fields?.name,
-    fields?.value_for_maps,
-    fields?.latitude,
-    fields?.longitude,
-  ].filter((it: any) => it && !it.isDerived && it.type == "build");
-
-  if (aggregationFunctionError.length) {
+    ...(fields?.y ?? []),
+    ...(fields?.x ?? []),
+    ...(fields?.breakdown ?? []),
+    ...(fields?.z ?? []),
+    fields?.source ?? null,
+    fields?.target ?? null,
+    fields?.value ?? null,
+    fields?.name ?? null,
+    fields?.value_for_maps ?? null,
+    fields?.latitude ?? null,
+    fields?.longitude ?? null,
+  ]?.filter((it: any) => it && !it?.isDerived && it?.type == "build");
+
+  if (aggregationFunctionError?.length) {
     //  loop on each fields config
     // compare with function validation schema
     // if validation fails, push error
-    aggregationFunctionError.forEach((it: any) => {
+    aggregationFunctionError?.forEach((it: any) => {
       // get the selected function schema
-      const selectedFunction: any = functionValidation.find(
-        (fn: any) => fn.functionName === it.functionName,
+      const selectedFunction: any = functionValidation?.find(
+        (fn: any) => fn?.functionName === it?.functionName,
       );
 
       // if function is not found, push error

From d34f12eadb04eb421f18857790d725e906041ae9 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Fri, 23 May 2025 15:35:21 +0530
Subject: [PATCH 44/61] style: enhance SelectFunction component layout and
 update SubTaskArrow design

---
 .../dynamicFunction/SelectFunction.vue        | 34 ++++++++++++++++---
 web/src/components/icons/SubTaskArrow.vue     | 33 +++++++-----------
 2 files changed, 42 insertions(+), 25 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index 7b87dc6fe5c..3bdc031075c 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -40,20 +40,39 @@
           class="tw-w-full tw-flex tw-flex-col"
         >
           <div class="tw-flex">
-            <div class="tw-mr-2 tw-relative">
+            <!-- <div class="tw-mr-2 tw-relative">
               <SubTaskArrow class="tw-absolute" />
               <div
                 v-if="argIndex !== fields.args.length - 1"
                 class="tw-border-l-[1px] tw-border-[#001495] tw-opacity-50 tw-relative tw-h-full"
               ></div>
+            </div> -->
+            <div class="tw-mr-2 tw-relative" style="min-height: 50px">
+              <!-- Vertical Line using top & bottom instead of height -->
+              <div
+                class="tw-absolute tw-top-0 tw-w-[1px] tw-bg-[#001495] tw-opacity-50"
+                :style="{
+                  bottom:
+                    argIndex === fields.args.length - 1
+                      ? 'calc(100% - 32px)'
+                      : '0',
+                  left: '0.5px',
+                }"
+              ></div>
+
+              <!-- SubTask Arrow -->
+              <div class="tw-absolute" :style="{ top: '28px', right: '-11px' }">
+                <SubTaskArrow />
+              </div>
             </div>
+
             <div>
               <div class="tw-flex tw-items-center tw-gap-x-2">
                 <label :for="'arg-' + argIndex"
                   >Parameters {{ argIndex + 1 }}</label
                 >
               </div>
-              <div class="tw-flex tw-gap-x-3">
+              <div class="tw-flex">
                 <!-- type selector -->
                 <q-select
                   v-model="fields.args[argIndex].type"
@@ -71,10 +90,15 @@
                   emit-value
                   dense
                   filled
-                  label="Select Type"
-                  class="tw-w-40 tw-min-w-40 tw-h-10 tw-text-white"
+                  :display-value="''"
+                  class="tw-w-22 tw-min-w-22 tw-h-10 text-sm bg-primary text-white q-field--dark"
+                  :required="isRequired(fields.functionName, argIndex)"
                   :data-test="`dashboard-function-dropdown-arg-type-selector-${argIndex}`"
-                />
+                >
+                  <template v-slot:prepend>
+                    <q-icon name="event" />
+                  </template>
+                </q-select>
 
                 <!-- Render different input types based on validation -->
                 <!-- <q-select
diff --git a/web/src/components/icons/SubTaskArrow.vue b/web/src/components/icons/SubTaskArrow.vue
index 31633f30568..9b41fc4d39c 100644
--- a/web/src/components/icons/SubTaskArrow.vue
+++ b/web/src/components/icons/SubTaskArrow.vue
@@ -2,22 +2,21 @@
   <svg
     xmlns="http://www.w3.org/2000/svg"
     width="12"
-    height="50"
-    viewBox="0 0 12 50"
+    height="12"
+    viewBox="0 0 24 24"
     fill="none"
-    class="tw-absolute"
+    stroke="#001495"
+    stroke-opacity="0.5"
+    stroke-width="2"
+    stroke-linecap="round"
+    stroke-linejoin="round"
+    class="lucide lucide-corner-down-right-icon lucide-corner-down-right"
   >
-    <path
-      d="M1 0V20C1 40 2 48 11 48H11"
-      stroke="#001495"
-      stroke-opacity="0.5"
-      stroke-width="1"
-    />
-    <path
-      d="M11.1768 48.1768C11.2744 48.0791 11.2744 47.9209 11.1768 47.8232L9.58579 46.2322C9.48816 46.1346 9.32986 46.1346 9.23223 46.2322C9.1346 46.3299 9.1346 46.4882 9.23223 46.5858L10.6464 48L9.23223 49.4142C9.1346 49.5118 9.1346 49.6701 9.23223 49.7678C9.32986 49.8654 9.48816 49.8654 9.58579 49.7678L11.1768 48.1768Z"
-      fill="#001495"
-      fill-opacity="0.5"
-    />
+    <!-- Curved path instead of sharp corner -->
+    <path d="M4 4 C4 15, 20 15, 20 15" />
+
+    <!-- Arrowhead -->
+    <path d="M15 10 L20 15 L15 20" />
   </svg>
 </template>
 
@@ -26,11 +25,5 @@ import { defineComponent } from "vue";
 
 export default defineComponent({
   name: "SubTaskArrow",
-  props: {
-    height: {
-      type: Number,
-      default: 50,
-    },
-  },
 });
 </script>

From d2483e59ddabf75cda9bcfa8987d1044610fc04d Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 26 May 2025 16:33:14 +0530
Subject: [PATCH 45/61] fix: histogram interval migration issue

---
 web/src/utils/dashboard/convertDashboardSchemaVersion.ts | 4 ++--
 web/src/utils/dashboard/convertDataIntoUnitValue.ts      | 9 ++++-----
 2 files changed, 6 insertions(+), 7 deletions(-)

diff --git a/web/src/utils/dashboard/convertDashboardSchemaVersion.ts b/web/src/utils/dashboard/convertDashboardSchemaVersion.ts
index 567a44ba27d..6ee25352f3e 100644
--- a/web/src/utils/dashboard/convertDashboardSchemaVersion.ts
+++ b/web/src/utils/dashboard/convertDashboardSchemaVersion.ts
@@ -63,13 +63,13 @@ const migrateV5FieldsToV6 = (
   if (!fieldItem) return;
   // mirgrate old args
   // previously, args was only used for histogram interval
-  // so, add arg type as histogramInverval
+  // so, add arg type as histogramInterval
   if (!fieldItem.args) {
     fieldItem.args = [];
   } else {
     fieldItem.args.forEach((arg: any) => {
       if (!arg.type) {
-        arg.type = "histogramInverval";
+        arg.type = "histogramInterval";
       }
     });
   }
diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index 7856b893206..89ba03af00a 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -1200,11 +1200,10 @@ export function addMissingArgs(fields: any): any {
   const updatedArgs = [...args]; // Clone the existing args array
 
   // Iterate through the function definition's arguments
-  functionDef.args.forEach((argDef: any) => {
-    const isArgProvided = updatedArgs.some((arg: any) => {
-      // Check if the argument's type matches any of the required types
-      return argDef.type.map((t: any) => t.value).includes(arg.type);
-    });
+  functionDef.args.forEach((argDef: any, index: number) => {
+    const isArgProvided = updatedArgs?.[index]?.type
+      ? argDef.type.map((t: any) => t.value).includes(updatedArgs[index]?.type)
+      : false;
 
     if (!isArgProvided) {
       // If the argument is missing, add it

From a6490151573300a3ebe82a1c4850805f8232c3d8 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 2 Jun 2025 12:17:13 +0530
Subject: [PATCH 46/61] refactor: streamline query builder components by
 removing unused inputs and integrating dynamic function pop-up for better
 aggregation handling

---
 .../addPanel/DashboardGeoMapsQueryBuilder.vue | 183 +-----
 .../addPanel/DashboardMapsQueryBuilder.vue    | 130 +----
 .../addPanel/DashboardQueryBuilder.vue        | 529 +-----------------
 .../addPanel/DashboardSankeyChartBuilder.vue  | 158 +-----
 .../dynamicFunction/DynamicFunctionPopUp.vue  |  82 ++-
 .../dynamicFunction/RawQueryBuilder.vue       |  36 +-
 6 files changed, 108 insertions(+), 1010 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
index 60df60860d3..a66a3dbb639 100644
--- a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
@@ -90,34 +90,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     "
                     :allowAggregation="false"
                   />
-                  <q-input
-                    dense
-                    filled
-                    data-test="dashboard-latitude-item-input"
-                    :label="t('common.label')"
-                    v-model="
-                      dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].fields.latitude.label
-                    "
-                    :rules="[(val: any) => val > 0 || 'Required']"
-                  />
-                  <div
-                    v-if="
-                      !dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].customQuery &&
-                      dashboardPanelData.data.queryType == 'sql'
-                    "
-                  >
-                    <SortByBtnGrp
-                      :fieldObj="
-                        dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields.latitude
-                      "
-                    />
-                  </div>
                 </div>
               </q-menu>
             </q-btn>
@@ -218,34 +190,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     "
                     :allowAggregation="false"
                   />
-                  <q-input
-                    dense
-                    filled
-                    label="Label"
-                    data-test="dashboard-longitude-item-input"
-                    v-model="
-                      dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].fields.longitude.label
-                    "
-                    :rules="[(val: any) => val > 0 || 'Required']"
-                  />
-                  <div
-                    v-if="
-                      !dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].customQuery &&
-                      dashboardPanelData.data.queryType == 'sql'
-                    "
-                  >
-                    <SortByBtnGrp
-                      :fieldObj="
-                        dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields.longitude
-                      "
-                    />
-                  </div>
                 </div>
               </q-menu>
             </q-btn>
@@ -338,124 +282,14 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 :data-test="`dashboard-weight-item-${weightLabel}-menu`"
               >
                 <div>
-                  <div class="row q-mb-sm" style="align-items: center">
-                    <div
-                      v-if="
-                        !dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].customQuery
-                      "
-                      class="q-mr-xs"
-                      style="width: 160px"
-                    >
-                      <DynamicFunctionPopUp
-                        v-model="
-                          dashboardPanelData.data.queries[
-                            dashboardPanelData.layout.currentQueryIndex
-                          ].fields.weight
-                        "
-                        :allowAggregation="true"
-                      />
-                      <!-- <q-select
-                        v-model="
-                          dashboardPanelData.data.queries[
-                            dashboardPanelData.layout.currentQueryIndex
-                          ].fields.weight.aggregationFunction
-                        "
-                        :options="triggerOperators"
-                        dense
-                        filled
-                        emit-value
-                        map-options
-                        :label="t('common.aggregation')"
-                        data-test="dashboard-weight-item-dropdown"
-                      >
-                        <template v-slot:append>
-                          <q-icon
-                            name="close"
-                            size="small"
-                            @click.stop.prevent="
-                              dashboardPanelData.data.queries[
-                                dashboardPanelData.layout.currentQueryIndex
-                              ].fields.weight.aggregationFunction = null
-                            "
-                            class="cursor-pointer"
-                          />
-                        </template>
-                      </q-select> -->
-                    </div>
-                  </div>
-                  <q-input
-                    dense
-                    filled
-                    :label="t('common.label')"
-                    data-test="dashboard-weight-item-input"
+                  <DynamicFunctionPopUp
                     v-model="
                       dashboardPanelData.data.queries[
                         dashboardPanelData.layout.currentQueryIndex
-                      ].fields.weight.label
+                      ].fields.weight
                     "
-                    :rules="[(val: any) => val > 0 || 'Required']"
+                    :allowAggregation="true"
                   />
-                  <div style="width: 100%" class="tw-mb-2">
-                    <span class="tw-block tw-mb-1 tw-font-bold">Having</span>
-
-                    <q-btn
-                      dense
-                      outline
-                      color="primary"
-                      icon="add"
-                      label="Add"
-                      @click="toggleHavingFilter"
-                      v-if="!isHavingFilterVisible()"
-                    />
-
-                    <div
-                      class="tw-flex tw-space-x-2 tw-mt-2 tw-items-center"
-                      v-if="isHavingFilterVisible()"
-                    >
-                      <q-select
-                        dense
-                        filled
-                        v-model="getHavingCondition().operator"
-                        :options="operators"
-                        style="width: 30%"
-                      >
-                      </q-select>
-
-                      <q-input
-                        dense
-                        filled
-                        v-model.number="getHavingCondition().value"
-                        style="width: 50%"
-                        type="number"
-                        placeholder="Value"
-                      />
-
-                      <q-btn
-                        dense
-                        flat
-                        icon="close"
-                        @click="cancelHavingFilter"
-                      />
-                    </div>
-                  </div>
-                  <div
-                    v-if="
-                      !dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].customQuery &&
-                      dashboardPanelData.data.queryType == 'sql'
-                    "
-                  >
-                    <SortByBtnGrp
-                      :fieldObj="
-                        dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields.weight
-                      "
-                    />
-                  </div>
                 </div>
               </q-menu>
             </q-btn>
@@ -482,6 +316,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
       </div>
     </div>
     <q-separator />
+    <DashboardJoinsOption :dashboardData="dashboardData"></DashboardJoinsOption>
+    <q-separator />
     <!-- filters container -->
     <DashboardFiltersOption
       :dashboardData="dashboardData"
@@ -494,23 +330,20 @@ import { defineComponent, ref, reactive, watch, computed, nextTick } from "vue";
 import { useI18n } from "vue-i18n";
 import useDashboardPanelData from "../../../composables/useDashboardPanel";
 import { getImageURL } from "../../../utils/zincutils";
-import SortByBtnGrp from "@/components/dashboards/addPanel/SortByBtnGrp.vue";
-import CommonAutoComplete from "@/components/dashboards/addPanel/CommonAutoComplete.vue";
-import SanitizedHtmlRenderer from "@/components/SanitizedHtmlRenderer.vue";
 import { inject } from "vue";
 import useNotifications from "@/composables/useNotifications";
 import DashboardFiltersOption from "@/views/Dashboards/addPanel/DashboardFiltersOption.vue";
 import DynamicFunctionPopUp from "@/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue";
 import { buildSQLQueryFromInput } from "@/utils/dashboard/convertDataIntoUnitValue";
+import DashboardJoinsOption from "@/views/Dashboards/addPanel/DashboardJoinsOption.vue";
+
 
 export default defineComponent({
   name: "DashboardGeoMapsQueryBuilder",
   components: {
-    SortByBtnGrp,
-    CommonAutoComplete,
-    SanitizedHtmlRenderer,
     DashboardFiltersOption,
     DynamicFunctionPopUp,
+    DashboardJoinsOption,
   },
   props: ["dashboardData"],
   setup(props) {
diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index f70ebc82afe..b34b46ba026 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -90,34 +90,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     "
                     :allowAggregation="false"
                   />
-                  <q-input
-                    dense
-                    filled
-                    data-test="dashboard-name-item-input"
-                    :label="t('common.label')"
-                    v-model="
-                      dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].fields.name.label
-                    "
-                    :rules="[(val: string) => !!val?.trim() || 'Required']"
-                  />
-                  <div
-                    v-if="
-                      !dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].customQuery &&
-                      dashboardPanelData.data.queryType == 'sql'
-                    "
-                  >
-                    <SortByBtnGrp
-                      :fieldObj="
-                        dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields.name
-                      "
-                    />
-                  </div>
                 </div>
               </q-menu>
             </q-btn>
@@ -228,106 +200,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                         "
                         :allowAggregation="true"
                       />
-                      <!-- <q-select
-                        v-model="
-                          dashboardPanelData.data.queries[
-                            dashboardPanelData.layout.currentQueryIndex
-                          ].fields.value_for_maps.aggregationFunction
-                        "
-                        :options="triggerOperators"
-                        dense
-                        filled
-                        emit-value
-                        map-options
-                        :label="t('common.aggregation')"
-                        data-test="dashboard-value_for_maps-item-dropdown"
-                      >
-                        <template v-slot:append>
-                          <q-icon
-                            name="close"
-                            size="small"
-                            @click.stop.prevent="
-                              dashboardPanelData.data.queries[
-                                dashboardPanelData.layout.currentQueryIndex
-                              ].fields.value_for_maps.aggregationFunction = null
-                            "
-                            class="cursor-pointer"
-                          />
-                        </template>
-                      </q-select> -->
                     </div>
                   </div>
-                  <q-input
-                    dense
-                    filled
-                    :label="t('common.label')"
-                    data-test="dashboard-value_for_maps-item-input"
-                    v-model="
-                      dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].fields.value_for_maps.label
-                    "
-                    :rules="[(val: string) => !!val?.trim() || 'Required']"
-                  />
-                  <div style="width: 100%" class="tw-mb-2">
-                    <span class="tw-block tw-mb-1 tw-font-bold">Having</span>
-
-                    <q-btn
-                      dense
-                      outline
-                      color="primary"
-                      icon="add"
-                      label="Add"
-                      @click="toggleHavingFilter"
-                      v-if="!isHavingFilterVisible()"
-                    />
-
-                    <div
-                      class="tw-flex tw-space-x-2 tw-mt-2 tw-items-center"
-                      v-if="isHavingFilterVisible()"
-                    >
-                      <q-select
-                        dense
-                        filled
-                        v-model="getHavingCondition().operator"
-                        :options="operators"
-                        style="width: 30%"
-                      >
-                      </q-select>
-
-                      <q-input
-                        dense
-                        filled
-                        v-model.number="getHavingCondition().value"
-                        style="width: 50%"
-                        type="number"
-                        placeholder="Value"
-                      />
-
-                      <q-btn
-                        dense
-                        flat
-                        icon="close"
-                        @click="cancelHavingFilter"
-                      />
-                    </div>
-                  </div>
-                  <div
-                    v-if="
-                      !dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].customQuery &&
-                      dashboardPanelData.data.queryType == 'sql'
-                    "
-                  >
-                    <SortByBtnGrp
-                      :fieldObj="
-                        dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields.value_for_maps
-                      "
-                    />
-                  </div>
                 </div>
               </q-menu>
             </q-btn>
@@ -354,6 +228,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
       </div>
     </div>
     <q-separator />
+    <DashboardJoinsOption :dashboardData="dashboardData"></DashboardJoinsOption>
+    <q-separator />
     <!-- filters container -->
     <DashboardFiltersOption
       :dashboardData="dashboardData"
@@ -381,6 +257,7 @@ import SanitizedHtmlRenderer from "@/components/SanitizedHtmlRenderer.vue";
 import DashboardFiltersOption from "@/views/Dashboards/addPanel/DashboardFiltersOption.vue";
 import DynamicFunctionPopUp from "@/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue";
 import { buildSQLQueryFromInput } from "@/utils/dashboard/convertDataIntoUnitValue";
+import DashboardJoinsOption from "@/views/Dashboards/addPanel/DashboardJoinsOption.vue";
 
 export default defineComponent({
   name: "DashboardMapsQueryBuilder",
@@ -390,6 +267,7 @@ export default defineComponent({
     SanitizedHtmlRenderer,
     DashboardFiltersOption,
     DynamicFunctionPopUp,
+    DashboardJoinsOption,
   },
   props: ["dashboardData"],
   setup(props) {
diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index 2b3a1f9d135..efd8072192a 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -142,71 +142,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                 ].customQuery
                               "
                             />
-                            <!-- <q-select
-                              v-model="
-                                dashboardPanelData.data.queries[
-                                  dashboardPanelData.layout.currentQueryIndex
-                                ].fields.x[index].functionName
-                              "
-                              :options="triggerOperatorsWithHistogram"
-                              dense
-                              filled
-                              emit-value
-                              map-options
-                              :label="t('common.aggregation')"
-                              data-test="dashboard-x-item-dropdown"
-                            >
-                              <template v-slot:append>
-                                <q-icon
-                                  name="close"
-                                  size="small"
-                                  @click.stop.prevent="
-                                    dashboardPanelData.data.queries[
-                                      dashboardPanelData.layout.currentQueryIndex
-                                    ].fields.x[index].functionName = null
-                                  "
-                                  class="cursor-pointer"
-                                />
-                              </template>
-                            </q-select> -->
                           </div>
                         </div>
-                        <!-- histogram interval if auto sql and aggregation function is histogram-->
-                        <!-- histogram interval for sql queries -->
-                        <!-- <div
-                          v-if="
-                            !dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].customQuery &&
-                            dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields?.x[index]?.functionName ===
-                              'histogram' &&
-                            !dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields.x[index].isDerived
-                          "
-                          class="q-mb-sm"
-                        >
-                          <HistogramIntervalDropDown
-                            v-if="!promqlMode"
-                            :model-value="
-                              getHistoramIntervalField(
-                                dashboardPanelData.data.queries[
-                                  dashboardPanelData.layout.currentQueryIndex
-                                ].fields?.x[index],
-                              )
-                            "
-                            @update:modelValue="
-                              (newValue: any) => {
-                                dashboardPanelData.data.queries[
-                                  dashboardPanelData.layout.currentQueryIndex
-                                ].fields.x[index].args[0].value =
-                                  newValue.value;
-                              }
-                            "
-                          />
-                        </div> -->
                       </div>
                     </q-menu>
                   </q-btn>
@@ -371,104 +308,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                               "
                               :allowAggregation="false"
                             />
-                            <!-- <q-select
-                              v-model="
-                                dashboardPanelData.data.queries[
-                                  dashboardPanelData.layout.currentQueryIndex
-                                ].fields.breakdown[index].functionName
-                              "
-                              :options="triggerOperatorsWithHistogram"
-                              dense
-                              filled
-                              emit-value
-                              map-options
-                              :label="t('common.aggregation')"
-                              data-test="dashboard-b-item-dropdown"
-                            >
-                              <template v-slot:append>
-                                <q-icon
-                                  name="close"
-                                  size="small"
-                                  @click.stop.prevent="
-                                    dashboardPanelData.data.queries[
-                                      dashboardPanelData.layout.currentQueryIndex
-                                    ].fields.breakdown[
-                                      index
-                                    ].functionName = null
-                                  "
-                                  class="cursor-pointer"
-                                />
-                              </template>
-                            </q-select> -->
                           </div>
                         </div>
-                        <!-- histogram interval if auto sql and aggregation function is histogram-->
-                        <!-- histogram interval for sql queries -->
-                        <!-- <div
-                          v-if="
-                            !dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].customQuery &&
-                            dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields?.breakdown[index]?.functionName ===
-                              'histogram' &&
-                            !dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields.breakdown[index].isDerived
-                          "
-                          class="q-mb-sm"
-                        >
-                          <HistogramIntervalDropDown
-                            v-if="!promqlMode"
-                            :model-value="
-                              getHistoramIntervalField(
-                                dashboardPanelData.data.queries[
-                                  dashboardPanelData.layout.currentQueryIndex
-                                ].fields?.breakdown[index],
-                              )
-                            "
-                            @update:modelValue="
-                              (newValue: any) => {
-                                dashboardPanelData.data.queries[
-                                  dashboardPanelData.layout.currentQueryIndex
-                                ].fields.breakdown[index].args[0].value =
-                                  newValue.value;
-                              }
-                            "
-                          />
-                        </div> -->
-                        <q-input
-                          dense
-                          filled
-                          data-test="dashboard-b-item-input"
-                          :label="t('common.label')"
-                          v-model="
-                            dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields.breakdown[index].label
-                          "
-                          :rules="[(val: any) => val.length > 0 || 'Required']"
-                        />
-                        <div
-                          v-if="
-                            !dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].customQuery &&
-                            dashboardPanelData.data.queryType == 'sql' &&
-                            !dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields.breakdown[index].isDerived
-                          "
-                        >
-                          <SortByBtnGrp
-                            :fieldObj="
-                              dashboardPanelData.data.queries[
-                                dashboardPanelData.layout.currentQueryIndex
-                              ].fields?.breakdown[index]
-                            "
-                          />
-                        </div>
                       </div>
                     </q-menu>
                   </q-btn>
@@ -603,180 +444,20 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                         "
                         class="q-mr-xs"
                       >
-                        <!-- <q-select
-                          v-model="
-                            dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields.y[index].functionName
-                          "
-                          :options="
-                            dashboardPanelData.data.type == 'heatmap'
-                              ? triggerOperatorsWithHistogram
-                              : triggerOperators
-                          "
-                          dense
-                          filled
-                          emit-value
-                          map-options
-                          :label="t('common.aggregation')"
-                          data-test="dashboard-y-item-dropdown"
-                        >
-                          <template v-slot:append>
-                            <div
-                              v-if="dashboardPanelData.data.type == 'heatmap'"
-                            >
-                              <q-icon
-                                name="close"
-                                size="small"
-                                @click.stop.prevent="
-                                  dashboardPanelData.data.queries[
-                                    dashboardPanelData.layout.currentQueryIndex
-                                  ].fields.y[index].functionName = null
-                                "
-                                class="cursor-pointer"
-                              />
-                            </div>
-                          </template>
-                        </q-select> -->
                         <DynamicFunctionPopUp
                           v-model="
                             dashboardPanelData.data.queries[
                               dashboardPanelData.layout.currentQueryIndex
                             ].fields.y[index]
                           "
-                          :allowAggregation="true"
-                        />
-                      </div>
-                      <div
-                        class="color-input-wrapper"
-                        v-if="
-                          !['table', 'pie'].includes(
-                            dashboardPanelData.data.type,
-                          )
-                        "
-                      >
-                        <!-- <input
-                          type="color"
-                          data-test="dashboard-y-item-color"
-                          v-model="
-                            dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields.y[index].color
+                          :allowAggregation="
+                            dashboardPanelData.data.type == 'heatmap'
+                              ? false
+                              : true
                           "
-                        /> -->
-                      </div>
-                    </div>
-                    <!-- histogram interval if auto sql and aggregation function is histogram-->
-                    <!-- histogram interval for sql queries -->
-                    <!-- <div
-                      v-if="
-                        !dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].customQuery &&
-                        dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields?.y[index]?.functionName === 'histogram' &&
-                        !dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields.y[index].isDerived
-                      "
-                      class="q-mb-sm"
-                    >
-                      <HistogramIntervalDropDown
-                        v-if="!promqlMode"
-                        :model-value="
-                          getHistoramIntervalField(
-                            dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields.y[index],
-                          )
-                        "
-                        @update:modelValue="
-                          (newValue: any) => {
-                            dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields.y[index].args[0].value = newValue.value;
-                          }
-                        "
-                      />
-                    </div> -->
-                    <q-input
-                      dense
-                      filled
-                      :label="t('common.label')"
-                      data-test="dashboard-y-item-input"
-                      v-model="
-                        dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields.y[index].label
-                      "
-                      :rules="[(val: any) => val.length > 0 || 'Required']"
-                    />
-                    <div
-                      style="width: 100%"
-                      class="tw-mb-2"
-                      v-if="dashboardPanelData.data.type != 'heatmap'"
-                    >
-                      <span class="tw-block tw-mb-1 tw-font-bold">Having</span>
-
-                      <q-btn
-                        dense
-                        outline
-                        color="primary"
-                        icon="add"
-                        label="Add"
-                        @click="toggleHavingFilter(index, 'y')"
-                        v-if="!isHavingFilterVisible(index, 'y')"
-                      />
-
-                      <div
-                        class="tw-flex tw-space-x-2 tw-mt-2 tw-items-center"
-                        v-if="isHavingFilterVisible(index, 'y')"
-                      >
-                        <q-select
-                          dense
-                          filled
-                          v-model="getHavingCondition(index, 'y').operator"
-                          :options="operators"
-                          style="width: 30%"
-                        />
-
-                        <q-input
-                          dense
-                          filled
-                          v-model.number="getHavingCondition(index, 'y').value"
-                          style="width: 50%"
-                          type="number"
-                          placeholder="Value"
-                        />
-
-                        <q-btn
-                          dense
-                          flat
-                          icon="close"
-                          @click="cancelHavingFilter(index, 'y')"
                         />
                       </div>
                     </div>
-                    <div
-                      v-if="
-                        !dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].customQuery &&
-                        dashboardPanelData.data.queryType == 'sql' &&
-                        !dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields.y[index].isDerived
-                      "
-                    >
-                      <SortByBtnGrp
-                        :fieldObj="
-                          dashboardPanelData.data.queries[
-                            dashboardPanelData.layout.currentQueryIndex
-                          ].fields?.y[index]
-                        "
-                      />
-                    </div>
                   </div>
                 </q-menu>
               </q-btn>
@@ -905,7 +586,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             ].fields.z[index].isDerived
                           "
                           class="q-mr-xs"
-                          style="width: 160px"
                         >
                           <DynamicFunctionPopUp
                             v-model="
@@ -915,117 +595,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             "
                             :allowAggregation="true"
                           />
-                          <!-- <q-select
-                            v-model="
-                              dashboardPanelData.data.queries[
-                                dashboardPanelData.layout.currentQueryIndex
-                              ].fields.z[index].functionName
-                            "
-                            :options="triggerOperators"
-                            dense
-                            filled
-                            emit-value
-                            map-options
-                            :label="t('common.aggregation')"
-                            data-test="dashboard-z-item-dropdown"
-                          ></q-select> -->
-                        </div>
-                        <div
-                          class="color-input-wrapper"
-                          v-if="
-                            !['table', 'pie'].includes(
-                              dashboardPanelData.data.type,
-                            )
-                          "
-                        >
-                          <input
-                            type="color"
-                            data-test="dashboard-z-item-color"
-                            v-model="
-                              dashboardPanelData.data.queries[
-                                dashboardPanelData.layout.currentQueryIndex
-                              ].fields.z[index].color
-                            "
-                          />
                         </div>
                       </div>
-                      <q-input
-                        dense
-                        filled
-                        :label="t('common.label')"
-                        data-test="dashboard-z-item-input"
-                        v-model="
-                          dashboardPanelData.data.queries[
-                            dashboardPanelData.layout.currentQueryIndex
-                          ].fields.z[index].label
-                        "
-                        :rules="[(val: any) => val.length > 0 || 'Required']"
-                      />
-                      <div style="width: 100%" class="tw-mb-2">
-                        <span class="tw-block tw-mb-1 tw-font-bold"
-                          >Having</span
-                        >
-
-                        <q-btn
-                          dense
-                          outline
-                          color="primary"
-                          icon="add"
-                          label="Add"
-                          @click="toggleHavingFilter(index, 'z')"
-                          v-if="!isHavingFilterVisible(index, 'z')"
-                        />
-
-                        <div
-                          class="tw-flex tw-space-x-2 tw-mt-2 tw-items-center"
-                          v-if="isHavingFilterVisible(index, 'z')"
-                        >
-                          <q-select
-                            dense
-                            filled
-                            v-model="getHavingCondition(index, 'z').operator"
-                            :options="operators"
-                            style="width: 30%"
-                          />
-
-                          <q-input
-                            dense
-                            filled
-                            v-model.number="
-                              getHavingCondition(index, 'z').value
-                            "
-                            style="width: 50%"
-                            type="number"
-                            placeholder="Value"
-                          />
-
-                          <q-btn
-                            dense
-                            flat
-                            icon="close"
-                            @click="cancelHavingFilter(index, 'z')"
-                          />
-                        </div>
-                      </div>
-                      <div
-                        v-if="
-                          !dashboardPanelData.data.queries[
-                            dashboardPanelData.layout.currentQueryIndex
-                          ].customQuery &&
-                          dashboardPanelData.data.queryType == 'sql' &&
-                          !dashboardPanelData.data.queries[
-                            dashboardPanelData.layout.currentQueryIndex
-                          ].fields.z[index].isDerived
-                        "
-                      >
-                        <SortByBtnGrp
-                          :fieldObj="
-                            dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields?.z[index]
-                          "
-                        />
-                      </div>
                     </div>
                   </q-menu>
                 </q-btn>
@@ -1088,7 +659,6 @@ import { getImageURL } from "../../../utils/zincutils";
 import DashboardGeoMapsQueryBuilder from "./DashboardGeoMapsQueryBuilder.vue";
 import DashboardMapsQueryBuilder from "./DashboardMapsQueryBuilder.vue";
 import DashboardSankeyChartBuilder from "./DashboardSankeyChartBuilder.vue";
-import SortByBtnGrp from "@/components/dashboards/addPanel/SortByBtnGrp.vue";
 import HistogramIntervalDropDown from "@/components/dashboards/addPanel/HistogramIntervalDropDown.vue";
 import CommonAutoComplete from "@/components/dashboards/addPanel/CommonAutoComplete.vue";
 import SanitizedHtmlRenderer from "@/components/SanitizedHtmlRenderer.vue";
@@ -1102,8 +672,6 @@ export default defineComponent({
   name: "DashboardQueryBuilder",
   components: {
     DashboardGeoMapsQueryBuilder,
-    SortByBtnGrp,
-    HistogramIntervalDropDown,
     DashboardMapsQueryBuilder,
     DashboardSankeyChartBuilder,
     CommonAutoComplete,
@@ -1180,28 +748,6 @@ export default defineComponent({
       { label: t("dashboard.histogram"), value: "histogram" },
     ];
 
-    // v-model for histogram interval
-    // if no args object in the field, set it with object with interval = null
-    const getHistoramIntervalField = (field: any) => {
-      // if no interval is set, set it to null
-      if (!field.args) {
-        field.args = [
-          {
-            value: null,
-          },
-        ];
-        return { value: null, label: "Auto" };
-      } else if (field?.args?.length === 0) {
-        field?.args?.push({
-          value: null,
-        });
-
-        return { value: null, label: "Auto" };
-      }
-
-      return { value: field?.args[0]?.value, label: field?.args[0]?.value };
-    };
-
     watch(
       () => dashboardPanelData.meta.dragAndDrop.dragging,
       (newVal: boolean, oldVal: boolean) => {
@@ -1217,6 +763,7 @@ export default defineComponent({
     );
 
     const onDrop = (e: any, targetAxis: string, droppedAtIndex: number) => {
+      e.stopPropagation();
       const dragSourceIndex =
         dashboardPanelData.meta.dragAndDrop.dragSourceIndex;
 
@@ -1564,53 +1111,6 @@ export default defineComponent({
       return zFields.map(commonBtnLabel);
     });
 
-    const operators = ["=", "<>", ">=", "<=", ">", "<"];
-
-    const isHavingFilterVisible = (index: any, axis: any) => {
-      const currentQueryIndex = dashboardPanelData.layout.currentQueryIndex;
-      const currentField =
-        dashboardPanelData.data.queries[currentQueryIndex].fields[axis][index];
-
-      const isVisible = !!currentField?.havingConditions?.length;
-      return isVisible;
-    };
-
-    const toggleHavingFilter = async (index: any, axis: any) => {
-      const currentQueryIndex = dashboardPanelData.layout.currentQueryIndex;
-      const currentField =
-        dashboardPanelData.data.queries[currentQueryIndex].fields[axis][index];
-
-      if (!currentField.havingConditions) {
-        currentField.havingConditions = [];
-      }
-
-      if (!currentField.havingConditions.length) {
-        currentField.havingConditions.push({ operator: null, value: null });
-      }
-
-      await nextTick();
-    };
-
-    const cancelHavingFilter = async (index: any, axis: any) => {
-      const currentQueryIndex = dashboardPanelData.layout.currentQueryIndex;
-      const currentField =
-        dashboardPanelData.data.queries[currentQueryIndex].fields[axis][index];
-
-      currentField.havingConditions = [];
-
-      await nextTick();
-    };
-
-    const getHavingCondition = (index: any, axis: any) => {
-      const currentQueryIndex = dashboardPanelData.layout.currentQueryIndex;
-      const currentField =
-        dashboardPanelData.data.queries[currentQueryIndex].fields[axis][index];
-
-      return (
-        currentField.havingConditions?.[0] || { operator: null, value: null }
-      );
-    };
-
     return {
       showXAxis,
       t,
@@ -1627,19 +1127,6 @@ export default defineComponent({
       }),
       model: ref([]),
       tab: ref("General"),
-      options: [
-        "=",
-        "<>",
-        ">=",
-        "<=",
-        ">",
-        "<",
-        "IN",
-        "Contains",
-        "Not Contains",
-        "Is Null",
-        "Is Not Null",
-      ],
       getImageURL,
       onDrop,
       onDragStart,
@@ -1657,13 +1144,7 @@ export default defineComponent({
       zLabel,
       bLabel,
       onFieldDragStart,
-      getHistoramIntervalField,
       onDragEnd,
-      operators,
-      isHavingFilterVisible,
-      toggleHavingFilter,
-      cancelHavingFilter,
-      getHavingCondition,
     };
   },
 });
diff --git a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
index 9bab7320308..6a448568689 100644
--- a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
@@ -90,34 +90,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     "
                     :allowAggregation="false"
                   />
-                  <q-input
-                    dense
-                    filled
-                    data-test="dashboard-source-item-input"
-                    :label="t('common.label')"
-                    v-model="
-                      dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].fields.source.label
-                    "
-                    :rules="[(val: any) => val > 0 || 'Required']"
-                  />
-                  <div
-                    v-if="
-                      !dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].customQuery &&
-                      dashboardPanelData.data.queryType == 'sql'
-                    "
-                  >
-                    <SortByBtnGrp
-                      :fieldObj="
-                        dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields.source
-                      "
-                    />
-                  </div>
                 </div>
               </q-menu>
             </q-btn>
@@ -218,34 +190,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     "
                     :allowAggregation="false"
                   />
-                  <q-input
-                    dense
-                    filled
-                    label="Label"
-                    data-test="dashboard-target-item-input"
-                    v-model="
-                      dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].fields.target.label
-                    "
-                    :rules="[(val: any) => val > 0 || 'Required']"
-                  />
-                  <div
-                    v-if="
-                      !dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].customQuery &&
-                      dashboardPanelData.data.queryType == 'sql'
-                    "
-                  >
-                    <SortByBtnGrp
-                      :fieldObj="
-                        dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields.target
-                      "
-                    />
-                  </div>
                 </div>
               </q-menu>
             </q-btn>
@@ -355,106 +299,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                         "
                         :allowAggregation="true"
                       />
-                      <!-- <q-select
-                        v-model="
-                          dashboardPanelData.data.queries[
-                            dashboardPanelData.layout.currentQueryIndex
-                          ].fields.value.aggregationFunction
-                        "
-                        :options="triggerOperators"
-                        dense
-                        filled
-                        emit-value
-                        map-options
-                        :label="t('common.aggregation')"
-                        data-test="dashboard-value-item-dropdown"
-                      >
-                        <template v-slot:append>
-                          <q-icon
-                            name="close"
-                            size="small"
-                            @click.stop.prevent="
-                              dashboardPanelData.data.queries[
-                                dashboardPanelData.layout.currentQueryIndex
-                              ].fields.value.aggregationFunction = null
-                            "
-                            class="cursor-pointer"
-                          />
-                        </template>
-                      </q-select> -->
                     </div>
                   </div>
-                  <q-input
-                    dense
-                    filled
-                    :label="t('common.label')"
-                    data-test="dashboard-value-item-input"
-                    v-model="
-                      dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].fields.value.label
-                    "
-                    :rules="[(val: any) => val > 0 || 'Required']"
-                  />
-                  <div style="width: 100%" class="tw-mb-2">
-                    <span class="tw-block tw-mb-1 tw-font-bold">Having</span>
-
-                    <q-btn
-                      dense
-                      outline
-                      color="primary"
-                      icon="add"
-                      label="Add"
-                      @click="toggleHavingFilter"
-                      v-if="!isHavingFilterVisible()"
-                    />
-
-                    <div
-                      class="tw-flex tw-space-x-2 tw-mt-2 tw-items-center"
-                      v-if="isHavingFilterVisible()"
-                    >
-                      <q-select
-                        dense
-                        filled
-                        v-model="getHavingCondition().operator"
-                        :options="operators"
-                        style="width: 30%"
-                      >
-                      </q-select>
-
-                      <q-input
-                        dense
-                        filled
-                        v-model.number="getHavingCondition().value"
-                        style="width: 50%"
-                        type="number"
-                        placeholder="Value"
-                      />
-
-                      <q-btn
-                        dense
-                        flat
-                        icon="close"
-                        @click="cancelHavingFilter"
-                      />
-                    </div>
-                  </div>
-                  <div
-                    v-if="
-                      !dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].customQuery &&
-                      dashboardPanelData.data.queryType == 'sql'
-                    "
-                  >
-                    <SortByBtnGrp
-                      :fieldObj="
-                        dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].fields.value
-                      "
-                    />
-                  </div>
                 </div>
               </q-menu>
             </q-btn>
@@ -481,6 +327,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
       </div>
     </div>
     <q-separator />
+    <DashboardJoinsOption :dashboardData="dashboardData"></DashboardJoinsOption>
+    <q-separator />
     <!-- filters container -->
     <DashboardFiltersOption
       :dashboardData="dashboardData"
@@ -508,6 +356,7 @@ import useNotifications from "@/composables/useNotifications";
 import DashboardFiltersOption from "@/views/Dashboards/addPanel/DashboardFiltersOption.vue";
 import DynamicFunctionPopUp from "@/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue";
 import { buildSQLQueryFromInput } from "@/utils/dashboard/convertDataIntoUnitValue";
+import DashboardJoinsOption from "@/views/Dashboards/addPanel/DashboardJoinsOption.vue";
 
 export default defineComponent({
   name: "DashboardSankeyChartBuilder",
@@ -517,6 +366,7 @@ export default defineComponent({
     SanitizedHtmlRenderer,
     DashboardFiltersOption,
     DynamicFunctionPopUp,
+    DashboardJoinsOption,
   },
   props: ["dashboardData"],
   setup(props) {
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index 5947e2787d5..48544b87194 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -73,7 +73,7 @@
         </q-tab-panel>
         <q-tab-panel name="raw" style="padding: 0px; padding-top: 8px">
           <div style="display: flex; width: 100%">
-            <div style="width: calc(100% - 134px)">
+            <div style="width: 100%; padding-right: 12px">
               <RawQueryBuilder
                 v-model="fields"
                 data-test="dynamic-function-popup-raw-query-builder"
@@ -82,12 +82,54 @@
           </div>
         </q-tab-panel>
       </q-tab-panels>
+
+      <div
+        class="tw-flex tw-justify-between tw-items-center tw-pt-2 tw-pr-3"
+        v-if="allowAggregation"
+      >
+        <span class="tw-block tw-mb-1 tw-font-bold">Having</span>
+
+        <q-btn
+          dense
+          outline
+          icon="add"
+          label="Add"
+          padding="sm sm"
+          no-caps
+          @click="toggleHavingFilter"
+          v-if="!isHavingFilterVisible()"
+        />
+
+        <div
+          class="tw-flex tw-space-x-2 tw-mt-2 tw-items-center"
+          v-if="isHavingFilterVisible()"
+        >
+          <q-select
+            dense
+            filled
+            v-model="getHavingCondition().operator"
+            :options="havingOperators"
+            style="width: 30%"
+          />
+
+          <q-input
+            dense
+            filled
+            v-model.number="getHavingCondition().value"
+            style="width: 50%"
+            type="number"
+            placeholder="Value"
+          />
+
+          <q-btn dense flat icon="close" @click="cancelHavingFilter" />
+        </div>
+      </div>
     </div>
   </div>
 </template>
 
 <script lang="ts">
-import { ref, watch } from "vue";
+import { ref, watch, nextTick } from "vue";
 import RawQueryBuilder from "./RawQueryBuilder.vue";
 import SelectFunction from "./SelectFunction.vue";
 import SortByBtnGrp from "@/components/dashboards/addPanel/SortByBtnGrp.vue";
@@ -150,11 +192,47 @@ export default {
       }
     };
 
+    const havingOperators = ["=", "<>", ">=", "<=", ">", "<"];
+
+    const isHavingFilterVisible = () => {
+      const isVisible = !!fields.value?.havingConditions?.length;
+      return isVisible;
+    };
+
+    const toggleHavingFilter = async () => {
+      if (!fields.value?.havingConditions) {
+        fields.value.havingConditions = [];
+      }
+
+      if (!fields.value.havingConditions.length) {
+        fields.value.havingConditions.push({ operator: null, value: null });
+      }
+
+      await nextTick();
+    };
+
+    const cancelHavingFilter = async () => {
+      fields.value.havingConditions = [];
+
+      await nextTick();
+    };
+
+    const getHavingCondition = () => {
+      return (
+        fields.value.havingConditions?.[0] || { operator: null, value: null }
+      );
+    };
+
     return {
       store,
       t,
       fields,
       onFieldTypeChange,
+      havingOperators,
+      isHavingFilterVisible,
+      toggleHavingFilter,
+      cancelHavingFilter,
+      getHavingCondition,
     };
   },
 };
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue b/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
index 94e2769e53e..ffeb0e2a4e3 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/RawQueryBuilder.vue
@@ -2,30 +2,32 @@
   <div style="width: 100%">
     <div class="query-section">
       <div class="query-label">Query</div>
+      <div class="query-label tw-text-xs">
+        Write a SQL query for complex actions.
+      </div>
 
       <textarea
         style="
           min-width: 100%;
           max-width: 100%;
           resize: vertical;
-          border: 1px solid;
+          border: 1px solid #ccc;
           border-radius: 4px;
+          margin-top: 2px;
           padding: 2px;
         "
         v-model="fields.rawQuery"
         :class="store.state.theme == 'dark' ? 'dark-mode' : 'bg-white'"
         data-test="dashboard-drilldown-url-textarea"
+        :rows="6"
       ></textarea>
     </div>
   </div>
 </template>
-
 <script lang="ts">
 import { ref, watch } from "vue";
 import { useStore } from "vuex";
 
-//   import useDashboardPanelData from "@/composables/useDashboardPanel";
-
 export default {
   name: "RawQueryBuilder",
   props: {
@@ -53,9 +55,7 @@ export default {
       (value: any) => {
         emit("update:modelValue", value);
       },
-      {
-        deep: true,
-      },
+      { deep: true },
     );
 
     return {
@@ -65,25 +65,3 @@ export default {
   },
 };
 </script>
-
-<style scoped>
-.query-section {
-  margin-bottom: 20px;
-}
-
-.query-label {
-  font-size: 14px;
-  font-weight: 600;
-  color: #666666;
-  margin-bottom: 5px;
-}
-
-.query-input {
-  width: 100%;
-  min-height: 100px;
-  padding: 10px;
-  border: 1px solid #ccc;
-  border-radius: 4px;
-  resize: vertical;
-}
-</style>

From 611fcc9987637acf40a3310312fc1d753f14dbfe Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 2 Jun 2025 13:26:53 +0530
Subject: [PATCH 47/61] fix: geomap drag-and-drop fix

---
 .../addPanel/DashboardGeoMapsQueryBuilder.vue | 95 ++++++++++---------
 1 file changed, 50 insertions(+), 45 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
index a66a3dbb639..fa0a0967106 100644
--- a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
@@ -54,7 +54,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               $event,
               dashboardPanelData.data.queries[
                 dashboardPanelData.layout.currentQueryIndex
-              ].fields?.latitude.column,
+              ].fields?.latitude,
               'latitude',
             )
           "
@@ -154,7 +154,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               $event,
               dashboardPanelData.data.queries[
                 dashboardPanelData.layout.currentQueryIndex
-              ].fields?.longitude.column,
+              ].fields?.longitude,
               'longitude',
             )
           "
@@ -254,7 +254,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               $event,
               dashboardPanelData.data.queries[
                 dashboardPanelData.layout.currentQueryIndex
-              ].fields?.weight.column,
+              ].fields?.weight,
               'weight',
             )
           "
@@ -337,7 +337,6 @@ import DynamicFunctionPopUp from "@/components/dashboards/addPanel/dynamicFuncti
 import { buildSQLQueryFromInput } from "@/utils/dashboard/convertDataIntoUnitValue";
 import DashboardJoinsOption from "@/views/Dashboards/addPanel/DashboardJoinsOption.vue";
 
-
 export default defineComponent({
   name: "DashboardGeoMapsQueryBuilder",
   components: {
@@ -411,6 +410,7 @@ export default defineComponent({
     );
 
     const onDrop = (e: any, targetAxis: string) => {
+      e.stopPropagation();
       // move the items  between axis or from the field list
       // check if the source is from axis or field list
       if (dashboardPanelData.meta.dragAndDrop.dragSource === "fieldList") {
@@ -438,57 +438,62 @@ export default defineComponent({
         // move the item from field list to axis
         const dragElement = dashboardPanelData.meta.dragAndDrop.dragElement;
 
-        const dragName =
-          selectedStreamFieldsBasedOnUserDefinedSchema.value.find(
-            (item: any) => item?.name === dragElement,
-          );
-        const customDragName =
-          dashboardPanelData.meta.stream.customQueryFields.find(
-            (item: any) => item?.name === dragElement,
-          );
-
-        if (dragName || customDragName) {
-          const currentQueryField =
-            dashboardPanelData.data.queries[
-              dashboardPanelData.layout.currentQueryIndex
-            ].fields;
-          if (targetAxis !== "f") {
-            if (
-              (targetAxis === "latitude" && currentQueryField.latitude) ||
-              (targetAxis === "longitude" && currentQueryField.longitude) ||
-              (targetAxis === "weight" && currentQueryField.weight)
-            ) {
-              const maxAllowedAxisFields = 1;
-
-              const errorMessage = `Max ${maxAllowedAxisFields} field in ${targetAxis.toUpperCase()} is allowed.`;
-
-              showErrorNotification(errorMessage);
-              cleanupDraggingFields();
-              return;
-            }
-
-            // Remove from the original axis
-            const dragSource = dashboardPanelData.meta.dragAndDrop.dragSource;
-            if (dragSource === "latitude") {
-              removeLatitude();
-            } else if (dragSource === "longitude") {
-              removeLongitude();
-            } else if (dragSource === "weight") {
-              removeWeight();
-            }
+        const currentQueryField =
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields;
+        if (targetAxis !== "f") {
+          if (
+            (targetAxis === "latitude" && currentQueryField.latitude) ||
+            (targetAxis === "longitude" && currentQueryField.longitude) ||
+            (targetAxis === "weight" && currentQueryField.weight)
+          ) {
+            const maxAllowedAxisFields = 1;
+
+            const errorMessage = `Max ${maxAllowedAxisFields} field in ${targetAxis.toUpperCase()} is allowed.`;
+
+            showErrorNotification(errorMessage);
+            cleanupDraggingFields();
+            return;
+          }
+
+          // Remove from the original axis
+          const dragSource = dashboardPanelData.meta.dragAndDrop.dragSource;
+          if (dragSource === "latitude") {
+            removeLatitude();
+          } else if (dragSource === "longitude") {
+            removeLongitude();
+          } else if (dragSource === "weight") {
+            removeWeight();
           }
         }
         if (targetAxis === "f") {
           return;
         }
 
+        // find first arg which is of type field
+        const firstFieldTypeArg = dragElement?.args?.find(
+          (arg: any) => arg?.type === "field",
+        )?.value;
+
+        if (!firstFieldTypeArg) {
+          showErrorNotification("Without field, not able to drag");
+          cleanupDraggingFields();
+          return;
+        }
+
+        const fieldObj = {
+          name: firstFieldTypeArg.field,
+          streamAlias: firstFieldTypeArg.streamAlias,
+        };
+
         // Add to the new axis
         if (targetAxis === "latitude") {
-          addLatitude(dragName || customDragName);
+          addLatitude(fieldObj);
         } else if (targetAxis === "longitude") {
-          addLongitude(dragName || customDragName);
+          addLongitude(fieldObj);
         } else if (targetAxis === "weight") {
-          addWeight(dragName || customDragName);
+          addWeight(fieldObj);
         }
       }
 

From 1bf2d38d4425ac6322676a822c245fe45cd35c85 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 2 Jun 2025 14:43:58 +0530
Subject: [PATCH 48/61] fix: update drag-and-drop functionality in
 DashboardMapsQueryBuilder and DashboardSankeyChartBuilder

---
 .../addPanel/DashboardMapsQueryBuilder.vue    | 95 ++++++++++---------
 .../addPanel/DashboardSankeyChartBuilder.vue  | 94 +++++++++---------
 2 files changed, 100 insertions(+), 89 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index b34b46ba026..bb8f60f1ba9 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -54,7 +54,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               $event,
               dashboardPanelData.data.queries[
                 dashboardPanelData.layout.currentQueryIndex
-              ].fields?.name.column,
+              ].fields?.name,
               'name',
             )
           "
@@ -155,7 +155,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               $event,
               dashboardPanelData.data.queries[
                 dashboardPanelData.layout.currentQueryIndex
-              ].fields?.value_for_maps.column,
+              ].fields?.value_for_maps,
               'value_for_maps',
             )
           "
@@ -258,7 +258,7 @@ import DashboardFiltersOption from "@/views/Dashboards/addPanel/DashboardFilters
 import DynamicFunctionPopUp from "@/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue";
 import { buildSQLQueryFromInput } from "@/utils/dashboard/convertDataIntoUnitValue";
 import DashboardJoinsOption from "@/views/Dashboards/addPanel/DashboardJoinsOption.vue";
-
+import useNotifications from "@/composables/useNotifications";
 export default defineComponent({
   name: "DashboardMapsQueryBuilder",
   components: {
@@ -272,6 +272,8 @@ export default defineComponent({
   props: ["dashboardData"],
   setup(props) {
     const { t } = useI18n();
+    const { showErrorNotification } = useNotifications();
+
     const $q = useQuasar();
     const expansionItems = reactive({
       name: true,
@@ -332,6 +334,7 @@ export default defineComponent({
     );
 
     const onDrop = (e: any, targetAxis: string) => {
+      e.stopPropagation();
       // move the items  between axis or from the field list
       // check if the source is from axis or field list
       if (dashboardPanelData.meta.dragAndDrop.dragSource === "fieldList") {
@@ -356,56 +359,58 @@ export default defineComponent({
         // move the item from field list to axis
         const dragElement = dashboardPanelData.meta.dragAndDrop.dragElement;
 
-        const dragName =
-          dashboardPanelData.meta.stream.selectedStreamFields.find(
-            (item: any) => item?.name === dragElement,
-          );
-        const customDragName =
-          dashboardPanelData.meta.stream.customQueryFields.find(
-            (item: any) => item?.name === dragElement,
-          );
-
-        if (dragName || customDragName) {
-          const currentQueryField =
-            dashboardPanelData.data.queries[
-              dashboardPanelData.layout.currentQueryIndex
-            ].fields;
-          if (targetAxis !== "f") {
-            if (
-              (targetAxis === "name" && currentQueryField.name) ||
-              (targetAxis === "value_for_maps" &&
-                currentQueryField.value_for_maps)
-            ) {
-              const maxAllowedAxisFields = 1;
-
-              const errorMessage = `Max ${maxAllowedAxisFields} field in ${targetAxis.toUpperCase()} is allowed.`;
-
-              $q.notify({
-                type: "negative",
-                message: errorMessage,
-                timeout: 5000,
-              });
-              cleanupDraggingFields();
-              return;
-            }
-
-            // Remove from the original axis
-            const dragSource = dashboardPanelData.meta.dragAndDrop.dragSource;
-            if (dragSource === "name") {
-              removeMapName();
-            } else if (dragSource === "value_for_maps") {
-              removeMapValue();
-            }
+        const currentQueryField =
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields;
+        if (targetAxis !== "f") {
+          if (
+            (targetAxis === "name" && currentQueryField.name) ||
+            (targetAxis === "value_for_maps" &&
+              currentQueryField.value_for_maps)
+          ) {
+            const maxAllowedAxisFields = 1;
+
+            const errorMessage = `Max ${maxAllowedAxisFields} field in ${targetAxis.toUpperCase()} is allowed.`;
+
+            showErrorNotification(errorMessage);
+            cleanupDraggingFields();
+            return;
+          }
+
+          // Remove from the original axis
+          const dragSource = dashboardPanelData.meta.dragAndDrop.dragSource;
+          if (dragSource === "name") {
+            removeMapName();
+          } else if (dragSource === "value_for_maps") {
+            removeMapValue();
           }
         }
         if (targetAxis === "f") {
           return;
         }
+
+        // find first arg which is of type field
+        const firstFieldTypeArg = dragElement?.args?.find(
+          (arg: any) => arg?.type === "field",
+        )?.value;
+
+        if (!firstFieldTypeArg) {
+          showErrorNotification("Without field, not able to drag");
+          cleanupDraggingFields();
+          return;
+        }
+
+        const fieldObj = {
+          name: firstFieldTypeArg.field,
+          streamAlias: firstFieldTypeArg.streamAlias,
+        };
+
         // Add to the new axis
         if (targetAxis === "name") {
-          addMapName(dragName || customDragName);
+          addMapName(fieldObj);
         } else if (targetAxis === "value_for_maps") {
-          addMapValue(dragName || customDragName);
+          addMapValue(fieldObj);
         }
       }
 
diff --git a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
index 6a448568689..3c56a2a8b96 100644
--- a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
@@ -54,7 +54,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               $event,
               dashboardPanelData.data.queries[
                 dashboardPanelData.layout.currentQueryIndex
-              ].fields?.source.column,
+              ].fields?.source,
               'source',
             )
           "
@@ -154,7 +154,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               $event,
               dashboardPanelData.data.queries[
                 dashboardPanelData.layout.currentQueryIndex
-              ].fields?.target.column,
+              ].fields?.target,
               'target',
             )
           "
@@ -254,7 +254,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               $event,
               dashboardPanelData.data.queries[
                 dashboardPanelData.layout.currentQueryIndex
-              ].fields?.value.column,
+              ].fields?.value,
               'value',
             )
           "
@@ -435,6 +435,7 @@ export default defineComponent({
     );
 
     const onDrop = (e: any, targetAxis: string) => {
+      e.stopPropagation();
       // move the items  between axis or from the field list
       // check if the source is from axis or field list
       if (dashboardPanelData.meta.dragAndDrop.dragSource === "fieldList") {
@@ -462,57 +463,62 @@ export default defineComponent({
         // move the item from field list to axis
         const dragElement = dashboardPanelData.meta.dragAndDrop.dragElement;
 
-        const dragName =
-          selectedStreamFieldsBasedOnUserDefinedSchema.value.find(
-            (item: any) => item?.name === dragElement,
-          );
-        const customDragName =
-          dashboardPanelData.meta.stream.customQueryFields.find(
-            (item: any) => item?.name === dragElement,
-          );
-
-        if (dragName || customDragName) {
-          const currentQueryField =
-            dashboardPanelData.data.queries[
-              dashboardPanelData.layout.currentQueryIndex
-            ].fields;
-          if (targetAxis !== "f") {
-            if (
-              (targetAxis === "source" && currentQueryField.source) ||
-              (targetAxis === "target" && currentQueryField.target) ||
-              (targetAxis === "value" && currentQueryField.value)
-            ) {
-              const maxAllowedAxisFields = 1;
-
-              const errorMessage = `Max ${maxAllowedAxisFields} field in ${targetAxis.toUpperCase()} is allowed.`;
-
-              showErrorNotification(errorMessage);
-              cleanupDraggingFields();
-              return;
-            }
-
-            // Remove from the original axis
-            const dragSource = dashboardPanelData.meta.dragAndDrop.dragSource;
-            if (dragSource === "source") {
-              removeSource();
-            } else if (dragSource === "target") {
-              removeTarget();
-            } else if (dragSource === "value") {
-              removeValue();
-            }
+        const currentQueryField =
+          dashboardPanelData.data.queries[
+            dashboardPanelData.layout.currentQueryIndex
+          ].fields;
+        if (targetAxis !== "f") {
+          if (
+            (targetAxis === "source" && currentQueryField.source) ||
+            (targetAxis === "target" && currentQueryField.target) ||
+            (targetAxis === "value" && currentQueryField.value)
+          ) {
+            const maxAllowedAxisFields = 1;
+
+            const errorMessage = `Max ${maxAllowedAxisFields} field in ${targetAxis.toUpperCase()} is allowed.`;
+
+            showErrorNotification(errorMessage);
+            cleanupDraggingFields();
+            return;
+          }
+
+          // Remove from the original axis
+          const dragSource = dashboardPanelData.meta.dragAndDrop.dragSource;
+          if (dragSource === "source") {
+            removeSource();
+          } else if (dragSource === "target") {
+            removeTarget();
+          } else if (dragSource === "value") {
+            removeValue();
           }
         }
         if (targetAxis === "f") {
           return;
         }
 
+        // find first arg which is of type field
+        const firstFieldTypeArg = dragElement?.args?.find(
+          (arg: any) => arg?.type === "field",
+        )?.value;
+
+        if (!firstFieldTypeArg) {
+          showErrorNotification("Without field, not able to drag");
+          cleanupDraggingFields();
+          return;
+        }
+
+        const fieldObj = {
+          name: firstFieldTypeArg.field,
+          streamAlias: firstFieldTypeArg.streamAlias,
+        };
+
         // Add to the new axis
         if (targetAxis === "source") {
-          addSource(dragName || customDragName);
+          addSource(fieldObj);
         } else if (targetAxis === "target") {
-          addTarget(dragName || customDragName);
+          addTarget(fieldObj);
         } else if (targetAxis === "value") {
-          addValue(dragName || customDragName);
+          addValue(fieldObj);
         }
       }
 

From e14c29e3dbcb3530f000410470bf4040049fcc14 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 2 Jun 2025 15:24:35 +0530
Subject: [PATCH 49/61] refactor: enhance Dashboard query builders menu styles

---
 .../addPanel/DashboardMapsQueryBuilder.vue    | 44 ++++++----
 .../addPanel/DashboardQueryBuilder.vue        | 40 ++++++---
 .../addPanel/DashboardSankeyChartBuilder.vue  | 81 ++++++++++++-------
 3 files changed, 109 insertions(+), 56 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index bb8f60f1ba9..a9f9d31ef89 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -78,18 +78,28 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               :data-test="`dashboard-name-item-${nameLabel}`"
             >
               <q-menu
-                class="q-pa-md"
+                class="field-function-menu-popup"
                 :data-test="`dashboard-name-item-${nameLabel}-menu`"
+                style="width: 771px !important"
               >
-                <div>
-                  <DynamicFunctionPopUp
-                    v-model="
-                      dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].fields.name
-                    "
-                    :allowAggregation="false"
-                  />
+                <div style="padding: 3px 16px 16px 16px">
+                  <div>
+                    <div class="q-mr-xs q-mb-sm">
+                      <DynamicFunctionPopUp
+                        v-model="
+                          dashboardPanelData.data.queries[
+                            dashboardPanelData.layout.currentQueryIndex
+                          ].fields.name
+                        "
+                        :allowAggregation="false"
+                        :customQuery="
+                          dashboardPanelData.data.queries[
+                            dashboardPanelData.layout.currentQueryIndex
+                          ].customQuery
+                        "
+                      />
+                    </div>
+                  </div>
                 </div>
               </q-menu>
             </q-btn>
@@ -179,18 +189,19 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               class="q-pl-sm"
             >
               <q-menu
-                class="q-pa-md"
+                class="field-function-menu-popup"
                 :data-test="`dashboard-value_for_maps-item-${valueLabel}-menu`"
+                style="width: 771px !important"
               >
-                <div>
-                  <div class="row q-mb-sm" style="align-items: center">
+                <div style="padding: 3px 16px 16px 16px">
+                  <div>
                     <div
                       v-if="
                         !dashboardPanelData.data.queries[
                           dashboardPanelData.layout.currentQueryIndex
                         ].customQuery
                       "
-                      class="q-mr-xs"
+                      class="q-mr-xs q-mb-sm"
                     >
                       <DynamicFunctionPopUp
                         v-model="
@@ -199,6 +210,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                           ].fields.value_for_maps
                         "
                         :allowAggregation="true"
+                        :customQuery="
+                          dashboardPanelData.data.queries[
+                            dashboardPanelData.layout.currentQueryIndex
+                          ].customQuery
+                        "
                       />
                     </div>
                   </div>
diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index efd8072192a..7c372471fe1 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -284,11 +284,12 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     :data-test="`dashboard-b-item-${itemB?.alias}`"
                   >
                     <q-menu
-                      class="q-pa-md"
                       :data-test="`dashboard-b-item-${itemB?.alias}-menu`"
+                      class="field-function-menu-popup"
+                      style="width: 771px !important"
                     >
-                      <div>
-                        <div class="">
+                      <div style="padding: 3px 16px 16px 16px">
+                        <div>
                           <div
                             v-if="
                               !dashboardPanelData.data.queries[
@@ -307,6 +308,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                 ].fields.breakdown[index]
                               "
                               :allowAggregation="false"
+                              :customQuery="
+                                dashboardPanelData.data.queries[
+                                  dashboardPanelData.layout.currentQueryIndex
+                                ].customQuery
+                              "
                             />
                           </div>
                         </div>
@@ -428,11 +434,12 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 class="q-pl-sm"
               >
                 <q-menu
-                  class="q-pa-md tw-overflow-scroll"
                   :data-test="`dashboard-y-item-${itemY?.alias}-menu`"
+                  class="field-function-menu-popup"
+                  style="width: 771px !important"
                 >
-                  <div>
-                    <div class="row q-mb-sm" style="align-items: center">
+                  <div style="padding: 3px 16px 16px 16px">
+                    <div>
                       <div
                         v-if="
                           !dashboardPanelData.data.queries[
@@ -442,7 +449,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             dashboardPanelData.layout.currentQueryIndex
                           ].fields.y[index].isDerived
                         "
-                        class="q-mr-xs"
+                        class="q-mr-xs q-mb-sm"
                       >
                         <DynamicFunctionPopUp
                           v-model="
@@ -455,6 +462,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                               ? false
                               : true
                           "
+                          :customQuery="
+                            dashboardPanelData.data.queries[
+                              dashboardPanelData.layout.currentQueryIndex
+                            ].customQuery
+                          "
                         />
                       </div>
                     </div>
@@ -571,11 +583,12 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                   class="q-pl-sm"
                 >
                   <q-menu
-                    class="q-pa-md"
                     :data-test="`dashboard-z-item-${itemZ?.alias}-menu`"
+                    class="field-function-menu-popup"
+                    style="width: 771px !important"
                   >
-                    <div>
-                      <div class="row q-mb-sm" style="align-items: center">
+                    <div style="padding: 3px 16px 16px 16px">
+                      <div>
                         <div
                           v-if="
                             !dashboardPanelData.data.queries[
@@ -585,7 +598,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                               dashboardPanelData.layout.currentQueryIndex
                             ].fields.z[index].isDerived
                           "
-                          class="q-mr-xs"
+                          class="q-mr-xs q-mb-sm"
                         >
                           <DynamicFunctionPopUp
                             v-model="
@@ -594,6 +607,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                               ].fields.z[index]
                             "
                             :allowAggregation="true"
+                            :customQuery="
+                              dashboardPanelData.data.queries[
+                                dashboardPanelData.layout.currentQueryIndex
+                              ].customQuery
+                            "
                           />
                         </div>
                       </div>
diff --git a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
index 3c56a2a8b96..1b05b53ae14 100644
--- a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
@@ -78,18 +78,28 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               :data-test="`dashboard-source-item-${sourceLabel}`"
             >
               <q-menu
-                class="q-pa-md"
+                class="field-function-menu-popup"
                 :data-test="`dashboard-source-item-${sourceLabel}-menu`"
+                style="width: 771px !important"
               >
-                <div>
-                  <DynamicFunctionPopUp
-                    v-model="
-                      dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].fields.source
-                    "
-                    :allowAggregation="false"
-                  />
+                <div style="padding: 3px 16px 16px 16px">
+                  <div>
+                    <div class="q-mr-xs q-mb-sm">
+                      <DynamicFunctionPopUp
+                        v-model="
+                          dashboardPanelData.data.queries[
+                            dashboardPanelData.layout.currentQueryIndex
+                          ].fields.source
+                        "
+                        :allowAggregation="false"
+                        :customQuery="
+                          dashboardPanelData.data.queries[
+                            dashboardPanelData.layout.currentQueryIndex
+                          ].customQuery
+                        "
+                      />
+                    </div>
+                  </div>
                 </div>
               </q-menu>
             </q-btn>
@@ -178,18 +188,28 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               class="q-pl-sm"
             >
               <q-menu
-                class="q-pa-md"
+                class="field-function-menu-popup"
                 :data-test="`dashboard-target-item-${targetLabel}-menu`"
+                style="width: 771px !important"
               >
-                <div>
-                  <DynamicFunctionPopUp
-                    v-model="
-                      dashboardPanelData.data.queries[
-                        dashboardPanelData.layout.currentQueryIndex
-                      ].fields.target
-                    "
-                    :allowAggregation="false"
-                  />
+                <div style="padding: 3px 16px 16px 16px">
+                  <div>
+                    <div class="q-mr-xs q-mb-sm">
+                      <DynamicFunctionPopUp
+                        v-model="
+                          dashboardPanelData.data.queries[
+                            dashboardPanelData.layout.currentQueryIndex
+                          ].fields.target
+                        "
+                        :allowAggregation="false"
+                        :customQuery="
+                          dashboardPanelData.data.queries[
+                            dashboardPanelData.layout.currentQueryIndex
+                          ].customQuery
+                        "
+                      />
+                    </div>
+                  </div>
                 </div>
               </q-menu>
             </q-btn>
@@ -278,19 +298,13 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               class="q-pl-sm"
             >
               <q-menu
-                class="q-pa-md"
                 :data-test="`dashboard-value-item-${valueLabel}-menu`"
+                class="field-function-menu-popup"
+                style="width: 771px !important"
               >
-                <div>
-                  <div class="row q-mb-sm" style="align-items: center">
-                    <div
-                      v-if="
-                        !dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].customQuery
-                      "
-                      class="q-mr-xs"
-                    >
+                <div style="padding: 3px 16px 16px 16px">
+                  <div>
+                    <div class="q-mr-xs q-mb-sm">
                       <DynamicFunctionPopUp
                         v-model="
                           dashboardPanelData.data.queries[
@@ -298,6 +312,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                           ].fields.value
                         "
                         :allowAggregation="true"
+                        :customQuery="
+                          dashboardPanelData.data.queries[
+                            dashboardPanelData.layout.currentQueryIndex
+                          ].customQuery
+                        "
                       />
                     </div>
                   </div>

From ccce16f03fd63591a6b300881cd1f1be0fe61fad Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 2 Jun 2025 15:59:28 +0530
Subject: [PATCH 50/61] fix: custom query pop issue

---
 .../addPanel/DashboardGeoMapsQueryBuilder.vue | 15 ++++++
 .../addPanel/DashboardMapsQueryBuilder.vue    | 11 +---
 .../addPanel/DashboardQueryBuilder.vue        | 52 ++-----------------
 .../addPanel/DashboardSankeyChartBuilder.vue  |  5 +-
 .../dynamicFunction/DynamicFunctionPopUp.vue  |  2 +-
 5 files changed, 22 insertions(+), 63 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
index fa0a0967106..387137824e6 100644
--- a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
@@ -89,6 +89,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                       ].fields.latitude
                     "
                     :allowAggregation="false"
+                    :customQuery="
+                      dashboardPanelData.data.queries[
+                        dashboardPanelData.layout.currentQueryIndex
+                      ].customQuery
+                    "
                   />
                 </div>
               </q-menu>
@@ -189,6 +194,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                       ].fields.longitude
                     "
                     :allowAggregation="false"
+                    :customQuery="
+                      dashboardPanelData.data.queries[
+                        dashboardPanelData.layout.currentQueryIndex
+                      ].customQuery
+                    "
                   />
                 </div>
               </q-menu>
@@ -289,6 +299,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                       ].fields.weight
                     "
                     :allowAggregation="true"
+                    :customQuery="
+                      dashboardPanelData.data.queries[
+                        dashboardPanelData.layout.currentQueryIndex
+                      ].customQuery
+                    "
                   />
                 </div>
               </q-menu>
diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index a9f9d31ef89..1d44bd3c919 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -80,7 +80,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               <q-menu
                 class="field-function-menu-popup"
                 :data-test="`dashboard-name-item-${nameLabel}-menu`"
-                style="width: 771px !important"
               >
                 <div style="padding: 3px 16px 16px 16px">
                   <div>
@@ -191,18 +190,10 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               <q-menu
                 class="field-function-menu-popup"
                 :data-test="`dashboard-value_for_maps-item-${valueLabel}-menu`"
-                style="width: 771px !important"
               >
                 <div style="padding: 3px 16px 16px 16px">
                   <div>
-                    <div
-                      v-if="
-                        !dashboardPanelData.data.queries[
-                          dashboardPanelData.layout.currentQueryIndex
-                        ].customQuery
-                      "
-                      class="q-mr-xs q-mb-sm"
-                    >
+                    <div class="q-mr-xs q-mb-sm">
                       <DynamicFunctionPopUp
                         v-model="
                           dashboardPanelData.data.queries[
diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index 7c372471fe1..c51461e3c13 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -114,21 +114,10 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     <q-menu
                       :data-test="`dashboard-x-item-${itemX?.alias}-menu`"
                       class="field-function-menu-popup"
-                      style="width: 771px !important"
                     >
                       <div style="padding: 3px 16px 16px 16px">
                         <div>
-                          <div
-                            v-if="
-                              !dashboardPanelData.data.queries[
-                                dashboardPanelData.layout.currentQueryIndex
-                              ].customQuery &&
-                              !dashboardPanelData.data.queries[
-                                dashboardPanelData.layout.currentQueryIndex
-                              ].fields.x[index].isDerived
-                            "
-                            class="q-mr-xs q-mb-sm"
-                          >
+                          <div class="q-mr-xs q-mb-sm">
                             <DynamicFunctionPopUp
                               v-model="
                                 dashboardPanelData.data.queries[
@@ -286,21 +275,10 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     <q-menu
                       :data-test="`dashboard-b-item-${itemB?.alias}-menu`"
                       class="field-function-menu-popup"
-                      style="width: 771px !important"
                     >
                       <div style="padding: 3px 16px 16px 16px">
                         <div>
-                          <div
-                            v-if="
-                              !dashboardPanelData.data.queries[
-                                dashboardPanelData.layout.currentQueryIndex
-                              ].customQuery &&
-                              !dashboardPanelData.data.queries[
-                                dashboardPanelData.layout.currentQueryIndex
-                              ].fields.breakdown[index].isDerived
-                            "
-                            class="q-mr-xs q-mb-sm"
-                          >
+                          <div class="q-mr-xs q-mb-sm">
                             <DynamicFunctionPopUp
                               v-model="
                                 dashboardPanelData.data.queries[
@@ -436,21 +414,10 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 <q-menu
                   :data-test="`dashboard-y-item-${itemY?.alias}-menu`"
                   class="field-function-menu-popup"
-                  style="width: 771px !important"
                 >
                   <div style="padding: 3px 16px 16px 16px">
                     <div>
-                      <div
-                        v-if="
-                          !dashboardPanelData.data.queries[
-                            dashboardPanelData.layout.currentQueryIndex
-                          ].customQuery &&
-                          !dashboardPanelData.data.queries[
-                            dashboardPanelData.layout.currentQueryIndex
-                          ].fields.y[index].isDerived
-                        "
-                        class="q-mr-xs q-mb-sm"
-                      >
+                      <div class="q-mr-xs q-mb-sm">
                         <DynamicFunctionPopUp
                           v-model="
                             dashboardPanelData.data.queries[
@@ -585,21 +552,10 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                   <q-menu
                     :data-test="`dashboard-z-item-${itemZ?.alias}-menu`"
                     class="field-function-menu-popup"
-                    style="width: 771px !important"
                   >
                     <div style="padding: 3px 16px 16px 16px">
                       <div>
-                        <div
-                          v-if="
-                            !dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].customQuery &&
-                            !dashboardPanelData.data.queries[
-                              dashboardPanelData.layout.currentQueryIndex
-                            ].fields.z[index].isDerived
-                          "
-                          class="q-mr-xs q-mb-sm"
-                        >
+                        <div class="q-mr-xs q-mb-sm">
                           <DynamicFunctionPopUp
                             v-model="
                               dashboardPanelData.data.queries[
diff --git a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
index 1b05b53ae14..a2f4408c661 100644
--- a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
@@ -80,7 +80,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               <q-menu
                 class="field-function-menu-popup"
                 :data-test="`dashboard-source-item-${sourceLabel}-menu`"
-                style="width: 771px !important"
               >
                 <div style="padding: 3px 16px 16px 16px">
                   <div>
@@ -190,7 +189,6 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               <q-menu
                 class="field-function-menu-popup"
                 :data-test="`dashboard-target-item-${targetLabel}-menu`"
-                style="width: 771px !important"
               >
                 <div style="padding: 3px 16px 16px 16px">
                   <div>
@@ -298,9 +296,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               class="q-pl-sm"
             >
               <q-menu
-                :data-test="`dashboard-value-item-${valueLabel}-menu`"
                 class="field-function-menu-popup"
-                style="width: 771px !important"
+                :data-test="`dashboard-value-item-${valueLabel}-menu`"
               >
                 <div style="padding: 3px 16px 16px 16px">
                   <div>
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index 48544b87194..cc16ded414e 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -30,7 +30,7 @@
       </div>
     </div>
 
-    <div style="width: calc(100% - 134px)">
+    <div v-if="!customQuery" style="width: calc(100% - 134px)">
       <!-- active-color="primary" -->
       <!-- narrow-indicator -->
       <!-- class="text-grey" -->

From 444b4f7ceab0a52df91c73c4b9e9ff058e44056f Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 3 Jun 2025 11:31:31 +0530
Subject: [PATCH 51/61] fix: custom query field label issue

---
 .../addPanel/DashboardMapsQueryBuilder.vue           |  2 +-
 .../dynamicFunction/DynamicFunctionPopUp.vue         |  5 ++++-
 web/src/composables/useDashboardPanel.ts             | 12 ++----------
 3 files changed, 7 insertions(+), 12 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index 1d44bd3c919..69bdac28436 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -473,7 +473,7 @@ export default defineComponent({
         ].customQuery
       ) {
         //  HERE NEED CHANGES
-        return field.column;
+        return field?.alias;
       }
       return buildSQLQueryFromInput(
         field,
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index cc16ded414e..3f33ec4823d 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -30,7 +30,10 @@
       </div>
     </div>
 
-    <div v-if="!customQuery" style="width: calc(100% - 134px)">
+    <div
+      v-if="!customQuery && !fields.isDerived"
+      style="width: calc(100% - 134px)"
+    >
       <!-- active-color="primary" -->
       <!-- narrow-indicator -->
       <!-- class="text-grey" -->
diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index 481d4d02e9f..08be76e761d 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -2654,18 +2654,10 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         dashboardPanelData.layout.currentQueryIndex
       ].fields;
 
-    // Validate required fields
-    if (!name?.column) {
-      console.warn("Map name field is required but not provided");
-      return "";
-    }
-    if (!value_for_maps?.column) {
-      console.warn("Map value field is required but not provided");
-      return "";
-    }
-    let query = "SELECT ";
+    let query = "";
 
     if (name && value_for_maps) {
+      query = "SELECT ";
       const sqlField = buildSQLQueryFromInput(
         name,
         dashboardPanelData.data.queries[

From 880409b9777bd21dd49e6052a67079035bd4e4ed Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 3 Jun 2025 14:19:24 +0530
Subject: [PATCH 52/61] fix: icon handling based on arg type

---
 .../dynamicFunction/SelectFunction.vue        | 24 ++++++++++++++++++-
 .../dynamicFunction/functionValidation.json   |  4 ----
 2 files changed, 23 insertions(+), 5 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index 3bdc031075c..1f3ea4674d5 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -96,7 +96,10 @@
                   :data-test="`dashboard-function-dropdown-arg-type-selector-${argIndex}`"
                 >
                   <template v-slot:prepend>
-                    <q-icon name="event" />
+                    <q-icon
+                      :name="getIconBasedOnArgType(fields.args[argIndex].type)"
+                      padding="sm"
+                    />
                   </template>
                 </q-select>
 
@@ -216,6 +219,11 @@ import HistogramIntervalDropDown from "../HistogramIntervalDropDown.vue";
 import { addMissingArgs } from "@/utils/dashboard/convertDataIntoUnitValue";
 import StreamFieldSelect from "@/components/dashboards/addPanel/StreamFieldSelect.vue";
 import SubTaskArrow from "@/components/icons/SubTaskArrow.vue";
+import {
+  symOutlinedFunction,
+  symOutlinedTitle,
+  symOutlined123,
+} from "@quasar/extras/material-symbols-outlined";
 
 export default {
   name: "SelectFunction",
@@ -470,6 +478,19 @@ export default {
       }
     };
 
+    const getIconBasedOnArgType = (type: string) => {
+      switch (type) {
+        case "field":
+          return symOutlinedFunction;
+        case "string":
+          return symOutlinedTitle;
+        case "number":
+          return symOutlined123;
+        case "histogramInterval":
+          return "bar_chart";
+      }
+    };
+
     return {
       fields,
       functionValidation,
@@ -489,6 +510,7 @@ export default {
       filterFunctionsOptions,
       onArgTypeChange,
       getAllSelectedStreams,
+      getIconBasedOnArgType,
     };
   },
 };
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
index 30008bf9094..3378482bc9f 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
@@ -1100,10 +1100,6 @@
                         {
                             "label": "Field",
                             "value": "field"
-                        },
-                        {
-                            "label": "Array",
-                            "value": "array"
                         }
                     ],
                     "required": true

From 8d765fb6e3413336d2b5c29adb63ac1ea362c8de Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 3 Jun 2025 15:59:48 +0530
Subject: [PATCH 53/61] fix: update field alias handling in Dashboard query
 builders

---
 .../addPanel/DashboardGeoMapsQueryBuilder.vue |   3 +-
 .../addPanel/DashboardMapsQueryBuilder.vue    |   1 -
 .../addPanel/DashboardSankeyChartBuilder.vue  |   3 +-
 .../dynamicFunction/SelectFunction.vue        |   5 +-
 web/src/composables/useDashboardPanel.ts      | 131 +++++++-----------
 5 files changed, 58 insertions(+), 85 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
index 387137824e6..32f0fd01aa7 100644
--- a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
@@ -571,8 +571,7 @@ export default defineComponent({
           dashboardPanelData.layout.currentQueryIndex
         ].customQuery
       ) {
-        // HERE NEED CHANGES
-        return field.column;
+        return field.alias;
       }
       return buildSQLQueryFromInput(
         field,
diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index 69bdac28436..b935fef680e 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -472,7 +472,6 @@ export default defineComponent({
           dashboardPanelData.layout.currentQueryIndex
         ].customQuery
       ) {
-        //  HERE NEED CHANGES
         return field?.alias;
       }
       return buildSQLQueryFromInput(
diff --git a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
index a2f4408c661..91428ea4ac1 100644
--- a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
@@ -588,8 +588,7 @@ export default defineComponent({
           dashboardPanelData.layout.currentQueryIndex
         ].customQuery
       ) {
-        // HERE NEED CHANGES
-        return field.column;
+        return field.alias;
       }
       return buildSQLQueryFromInput(
         field,
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index 1f3ea4674d5..5db3f9e0caf 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -36,7 +36,7 @@
       <div class="tw-w-full">
         <div
           v-for="(arg, argIndex) in fields.args"
-          :key="argIndex"
+          :key="argIndex + '-' + arg.type"
           class="tw-w-full tw-flex tw-flex-col"
         >
           <div class="tw-flex">
@@ -223,6 +223,7 @@ import {
   symOutlinedFunction,
   symOutlinedTitle,
   symOutlined123,
+  symOutlinedList,
 } from "@quasar/extras/material-symbols-outlined";
 
 export default {
@@ -481,6 +482,8 @@ export default {
     const getIconBasedOnArgType = (type: string) => {
       switch (type) {
         case "field":
+          return symOutlinedList;
+        case "function":
           return symOutlinedFunction;
         case "string":
           return symOutlinedTitle;
diff --git a/web/src/composables/useDashboardPanel.ts b/web/src/composables/useDashboardPanel.ts
index 08be76e761d..0036e6dac6e 100644
--- a/web/src/composables/useDashboardPanel.ts
+++ b/web/src/composables/useDashboardPanel.ts
@@ -684,12 +684,6 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
 
     const isDerived = checkIsDerivedField(row.name) ?? false;
 
-    // HERE NEED CHANGES
-    // if (
-    //   !dashboardPanelData.data.queries[
-    //     dashboardPanelData.layout.currentQueryIndex
-    //   ].fields.y.find((it: any) => it?.column == row.name)
-    // ) {
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.y.push({
@@ -725,7 +719,6 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       isDerived,
       havingConditions: [],
     });
-    // }
     updateArrayAlias();
   };
 
@@ -746,12 +739,6 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
 
     const isDerived = checkIsDerivedField(row.name) ?? false;
 
-    // HERE NEED CHANGES
-    // if (
-    //   !dashboardPanelData.data.queries[
-    //     dashboardPanelData.layout.currentQueryIndex
-    //   ].fields.z.find((it: any) => it.column == row.name)
-    // ) {
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.z.push({
@@ -765,9 +752,9 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
           dashboardPanelData.layout.currentQueryIndex
         ].customQuery && !isDerived
           ? "z_axis_" +
-            (dashboardPanelData.data.queries[
+            ((dashboardPanelData.data.queries[
               dashboardPanelData.layout.currentQueryIndex
-            ].fields.z.length +
+            ].fields?.z?.length ?? 0) +
               1)
           : row.name,
       // column: row.name,
@@ -786,23 +773,21 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       isDerived,
       havingConditions: [],
     });
-    // }
     updateArrayAlias();
   };
 
   const addLatitude = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    // HERE NEED CHANGES
-    // if (
-    //   !dashboardPanelData.data.queries[
-    //     dashboardPanelData.layout.currentQueryIndex
-    //   ].fields.latitude
-    // ) {
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.latitude = {
       label: generateLabelFromName(row.name),
-      alias: isDerived ? row.name : "latitude",
+      alias:
+        !dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].customQuery && !isDerived
+          ? "latitude"
+          : row.name,
       // column: row.name,
       color: getNewColorValue(),
       type: "build",
@@ -819,22 +804,20 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       isDerived,
       havingConditions: [],
     };
-    // }
   };
 
   const addLongitude = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    // HERE NEED CHANGES
-    // if (
-    //   !dashboardPanelData.data.queries[
-    //     dashboardPanelData.layout.currentQueryIndex
-    //   ].fields.longitude
-    // ) {
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.longitude = {
       label: generateLabelFromName(row.name),
-      alias: isDerived ? row.name : "longitude",
+      alias:
+        !dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].customQuery && !isDerived
+          ? "longitude"
+          : row.name,
       // column: row.name,
       color: getNewColorValue(),
       type: "build",
@@ -851,22 +834,20 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       isDerived,
       havingConditions: [],
     };
-    // }
   };
 
   const addWeight = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    // HERE NEED CHANGES
-    // if (
-    //   !dashboardPanelData.data.queries[
-    //     dashboardPanelData.layout.currentQueryIndex
-    //   ].fields.weight
-    // ) {
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.weight = {
       label: generateLabelFromName(row.name),
-      alias: isDerived ? row.name : "weight",
+      alias:
+        !dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].customQuery && !isDerived
+          ? "weight"
+          : row.name,
       // column: row.name,
       color: getNewColorValue(),
       type: "build",
@@ -883,20 +864,20 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       isDerived,
       havingConditions: [],
     };
-    // }
   };
 
   const addMapName = (row: any) => {
-    // if (
-    //   !dashboardPanelData.data.queries[
-    //     dashboardPanelData.layout.currentQueryIndex
-    //   ].fields.name
-    // ) {
+    const isDerived = checkIsDerivedField(row.name) ?? false;
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.name = {
       label: generateLabelFromName(row.name),
-      alias: "name",
+      alias:
+        !dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].customQuery && !isDerived
+          ? "name"
+          : row.name,
       // column: row.name,
       color: getNewColorValue(),
       type: "build",
@@ -912,20 +893,20 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       ],
       havingConditions: [],
     };
-    // }
   };
 
   const addMapValue = (row: any) => {
-    // if (
-    //   !dashboardPanelData.data.queries[
-    //     dashboardPanelData.layout.currentQueryIndex
-    //   ].fields.value_for_maps
-    // ) {
+    const isDerived = checkIsDerivedField(row.name) ?? false;
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.value_for_maps = {
       label: generateLabelFromName(row.name),
-      alias: "value_for_maps",
+      alias:
+        !dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].customQuery && !isDerived
+          ? "value_for_maps"
+          : row.name,
       // column: row.name,
       color: getNewColorValue(),
       type: "build",
@@ -941,22 +922,20 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
         },
       ],
     };
-    // }
   };
 
   const addSource = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    // HERE NEED CHANGES
-    // if (
-    //   !dashboardPanelData.data.queries[
-    //     dashboardPanelData.layout.currentQueryIndex
-    //   ].fields.source
-    // ) {
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.source = {
       label: generateLabelFromName(row.name),
-      alias: isDerived ? row.name : "source",
+      alias:
+        !dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].customQuery && !isDerived
+          ? "source"
+          : row.name,
       // column: row.name,
       color: getNewColorValue(),
       type: "build",
@@ -973,22 +952,20 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       isDerived,
       havingConditions: [],
     };
-    // }
   };
 
   const addTarget = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    // HERE NEED CHANGES
-    // if (
-    //   !dashboardPanelData.data.queries[
-    //     dashboardPanelData.layout.currentQueryIndex
-    //   ].fields.target
-    // ) {
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.target = {
       label: generateLabelFromName(row.name),
-      alias: isDerived ? row.name : "target",
+      alias:
+        !dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].customQuery && !isDerived
+          ? "target"
+          : row.name,
       // column: row.name,
       color: getNewColorValue(),
       type: "build",
@@ -1005,22 +982,20 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       isDerived,
       havingConditions: [],
     };
-    // }
   };
 
   const addValue = (row: any) => {
     const isDerived = checkIsDerivedField(row.name) ?? false;
-    // HERE NEED CHANGES
-    // if (
-    //   !dashboardPanelData.data.queries[
-    //     dashboardPanelData.layout.currentQueryIndex
-    //   ].fields.value
-    // ) {
     dashboardPanelData.data.queries[
       dashboardPanelData.layout.currentQueryIndex
     ].fields.value = {
       label: generateLabelFromName(row.name),
-      alias: isDerived ? row.name : "value",
+      alias:
+        !dashboardPanelData.data.queries[
+          dashboardPanelData.layout.currentQueryIndex
+        ].customQuery && !isDerived
+          ? "value"
+          : row.name,
       // column: row.name,
       color: getNewColorValue(),
       type: "build",
@@ -1037,7 +1012,6 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
       isDerived,
       havingConditions: [],
     };
-    // }
   };
 
   // get new color value based on existing color from the chart
@@ -2147,7 +2121,6 @@ const useDashboardPanelData = (pageKey: string = "dashboard") => {
           const newName = newArray[changedIndex[0]]?.name;
 
           // Update the field alias and column to the new name
-          // HERE NEED CHANGES
           field.alias = newName;
           field.column = newName;
         }

From 625a28a76e27d16ba8384622a54b973902a29102 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 3 Jun 2025 16:41:27 +0530
Subject: [PATCH 54/61] fix: update function validation structure to include
 labeled options for field and string types

---
 .../dynamicFunction/functionValidation.json   | 22 +++++++------------
 1 file changed, 8 insertions(+), 14 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
index 3378482bc9f..38dd0723942 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/functionValidation.json
@@ -991,8 +991,14 @@
                 },
                 {
                     "type": [
-                        "field",
-                        "string"
+                        {
+                            "label": "Field",
+                            "value": "field"
+                        },
+                        {
+                            "label": "String",
+                            "value": "string"
+                        }
                     ],
                     "required": false
                 }
@@ -1026,10 +1032,6 @@
                         {
                             "label": "Field",
                             "value": "field"
-                        },
-                        {
-                            "label": "Array",
-                            "value": "array"
                         }
                     ],
                     "required": true
@@ -1045,10 +1047,6 @@
                         {
                             "label": "Field",
                             "value": "field"
-                        },
-                        {
-                            "label": "Array",
-                            "value": "array"
                         }
                     ],
                     "required": true
@@ -1064,10 +1062,6 @@
                         {
                             "label": "Field",
                             "value": "field"
-                        },
-                        {
-                            "label": "Array",
-                            "value": "array"
                         }
                     ],
                     "required": true

From dcca1e915686ed8cb0d7591bd0919c364088547b Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 3 Jun 2025 17:10:50 +0530
Subject: [PATCH 55/61] fix: code rabbit suggestion

---
 .../components/dashboards/addPanel/BuildFieldPopUp.vue |  6 +++---
 .../dashboards/addPanel/DashboardMapsQueryBuilder.vue  | 10 ++++++++++
 .../addPanel/DashboardSankeyChartBuilder.vue           | 10 ++++++++++
 web/src/utils/query/sqlUtils.ts                        |  7 -------
 4 files changed, 23 insertions(+), 10 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/BuildFieldPopUp.vue b/web/src/components/dashboards/addPanel/BuildFieldPopUp.vue
index 18791b224c7..f0964285469 100644
--- a/web/src/components/dashboards/addPanel/BuildFieldPopUp.vue
+++ b/web/src/components/dashboards/addPanel/BuildFieldPopUp.vue
@@ -15,7 +15,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
 
 <template>
-  <div style="padding: 3px 16px 16px 16px display: flex; gap: 16px;">
+  <div style="padding: 3px 16px 16px 16px; display: flex; gap: 16px;">
     <div>
       <q-input
         dense
@@ -42,8 +42,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
 </template>
 
 <script lang="ts">
-import { defineComponent, inject, defineProps, defineEmits } from "vue";
-import useDashboardPanelData from "../../../composables/useDashboardPanel";
+import { defineComponent, inject } from "vue";
+
 import SortByBtnGrp from "@/components/dashboards/addPanel/SortByBtnGrp.vue";
 import DynamicFunctionPopUp from "@/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue";
 import { useI18n } from "vue-i18n";
diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index b935fef680e..531107dccbd 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -872,4 +872,14 @@ export default defineComponent({
 .q-field--dense .q-field__marginal {
   height: 34px;
 }
+
+.field-function-menu-popup {
+  width: 771px !important;
+  height: 323px;
+  border-radius: 4px;
+  border: 1px solid #d5d5d5;
+  background: #fff;
+  box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.05);
+  padding: 16px;
+}
 </style>
diff --git a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
index 91428ea4ac1..c9b56c49745 100644
--- a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
@@ -994,4 +994,14 @@ export default defineComponent({
 .q-field--dense .q-field__marginal {
   height: 34px;
 }
+
+.field-function-menu-popup {
+  width: 771px !important;
+  height: 323px;
+  border-radius: 4px;
+  border: 1px solid #d5d5d5;
+  background: #fff;
+  box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.05);
+  padding: 16px;
+}
 </style>
diff --git a/web/src/utils/query/sqlUtils.ts b/web/src/utils/query/sqlUtils.ts
index 89ae11de3a0..25a127868e5 100644
--- a/web/src/utils/query/sqlUtils.ts
+++ b/web/src/utils/query/sqlUtils.ts
@@ -1131,13 +1131,6 @@ export async function buildSQLQueryWithParser(
     });
   }
 
-  console.log(
-    "Abhay: ast",
-    parser.astify(
-      `SELECT histogram(default._timestamp) as "x_axis_1", count(stream_0.kubernetes_host) as "y_axis_1"  FROM "default" join e2e_automate as stream_0 on default.k8s_namespace_name = stream_0.k8s_namespace_name AND default.abc != stream_0.bcd  GROUP BY x_axis_1 ORDER BY x_axis_1 ASC`,
-    ),
-  );
-
   // Convert AST to SQL
   const sql = parser.sqlify(ast);
   return sql.replace(/`/g, '"'); // Replace backticks with double quotes for consistency

From 4e1305482ab9cf779a478957ffb0c958c023eda7 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Fri, 6 Jun 2025 15:20:17 +0530
Subject: [PATCH 56/61] fix: update styles in DynamicFunctionPopUp and
 SelectFunction components for improved UI consistency

---
 .../addPanel/dynamicFunction/DynamicFunctionPopUp.vue      | 7 +++----
 .../dashboards/addPanel/dynamicFunction/SelectFunction.vue | 5 ++---
 2 files changed, 5 insertions(+), 7 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index 3f33ec4823d..fd3037ee60d 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -251,7 +251,6 @@ export default {
   font-size: 13px;
   font-style: normal;
   font-weight: 600;
-  line-height: normal;
 }
 
 .text-label-normal {
@@ -259,12 +258,12 @@ export default {
   font-size: 13px;
   font-style: normal;
   font-weight: 400;
-  line-height: normal;
 }
 
 .edit-input {
   flex: 1;
-  border: 1px solid var(--q-primary);
+  border: 1px solid #e0e0e0;
+  line-height: 0px;
   border-radius: 4px;
   padding: 2px;
   outline: none;
@@ -272,7 +271,7 @@ export default {
   width: 100%;
 
   &:focus {
-    border-color: var(--q-secondary);
+    border-color: var(--q-primary);
   }
 }
 </style>
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index 5db3f9e0caf..f9619cec9a1 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -17,7 +17,7 @@
       option-value="value"
       emit-value
       map-options
-      class="tw-w-72 tw-border tw-border-solid tw-border-gray-200 tw-pl-2"
+      class="tw-w-72 tw-h-10 tw-border tw-border-solid tw-border-gray-200 tw-pl-2"
     >
       <!-- <template v-slot:append>
           <q-icon
@@ -69,7 +69,7 @@
             <div>
               <div class="tw-flex tw-items-center tw-gap-x-2">
                 <label :for="'arg-' + argIndex"
-                  >Parameters {{ argIndex + 1 }}</label
+                  >Parameter {{ argIndex + 1 }}</label
                 >
               </div>
               <div class="tw-flex">
@@ -158,7 +158,6 @@
 
                 <SelectFunction
                   v-if="fields.args[argIndex]?.type === 'function'"
-                  class="tw-ml-4"
                   v-model="fields.args[argIndex].value"
                   :allowAggregation="allowAggregation"
                   :data-test="`dashboard-function-dropdown-arg-function-input-${argIndex}`"

From 6feb1b13c4c6f0ad37734c0aac23ff6963be3776 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Fri, 6 Jun 2025 16:21:17 +0530
Subject: [PATCH 57/61] fix: enhance styling and tooltip functionality in
 AddJoinPopUp component for better user experience

---
 .../Dashboards/addPanel/AddJoinPopUp.vue      | 70 ++++++++++++++-----
 1 file changed, 53 insertions(+), 17 deletions(-)

diff --git a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
index 4d862aad11c..bdb585cb7e1 100644
--- a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
+++ b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
@@ -26,7 +26,7 @@
     >
       <div style="flex: 1; gap: 8px">
         <div style="display: flex; align-items: center; gap: 8px">
-          <LeftJoinSvg />
+          <LeftJoinSvg class="tw-h-[21px]" />
           <label>Join</label>
         </div>
         <q-select
@@ -41,9 +41,16 @@
         />
       </div>
       <div
-        style="display: flex; align-items: center; gap: 8px; padding-top: 21px"
+        style="
+          display: flex;
+          align-items: center;
+          gap: 8px;
+          padding-top: 21px;
+          padding-right: 10px;
+          padding-left: 10px;
+        "
       >
-        <LeftJoinLineSvg />
+        <LeftJoinLineSvg class="tw-h-[40px] tw-w-[58px]" />
       </div>
 
       <div>
@@ -67,7 +74,11 @@
           >
             <LeftJoinTypeSvg :shouldFill="modelValue.joinType === 'left'" />
             <div
-              :class="[modelValue.joinType === 'left' ? 'text-primary' : '']"
+              :class="[
+                modelValue.joinType === 'left'
+                  ? 'text-primary tw-font-[600]'
+                  : '',
+              ]"
             >
               Left
             </div>
@@ -83,7 +94,11 @@
           >
             <InnerJoinTypeSvg :shouldFill="modelValue.joinType === 'inner'" />
             <div
-              :class="[modelValue.joinType === 'inner' ? 'text-primary' : '']"
+              :class="[
+                modelValue.joinType === 'inner'
+                  ? 'text-primary tw-font-[600]'
+                  : '',
+              ]"
             >
               Inner
             </div>
@@ -99,7 +114,11 @@
           >
             <RightJoinTypeSvg :shouldFill="modelValue.joinType === 'right'" />
             <div
-              :class="[modelValue.joinType === 'right' ? 'text-primary' : '']"
+              :class="[
+                modelValue.joinType === 'right'
+                  ? 'text-primary tw-font-[600]'
+                  : '',
+              ]"
             >
               Right
             </div>
@@ -108,14 +127,21 @@
       </div>
 
       <div
-        style="display: flex; align-items: center; gap: 8px; padding-top: 21px"
+        style="
+          display: flex;
+          align-items: center;
+          gap: 8px;
+          padding-top: 21px;
+          padding-right: 10px;
+          padding-left: 10px;
+        "
       >
-        <RightJoinLineSvg />
+        <RightJoinLineSvg class="tw-h-[40px] tw-w-[58px]" />
       </div>
 
       <div style="flex: 1">
         <div style="display: flex; align-items: center; gap: 8px">
-          <RightJoinSvg />
+          <RightJoinSvg class="tw-h-[21px]" />
           <label>On</label>
         </div>
 
@@ -234,13 +260,15 @@
             />
           </div>
 
-          <q-btn
-            @click="addCondition(argIndex)"
-            no-caps
-            dense
-            flat
-            icon="add"
-          />
+          <q-btn @click="addCondition(argIndex)" no-caps dense flat icon="add">
+            <q-tooltip
+              class="bg-grey-8"
+              anchor="top middle"
+              self="bottom middle"
+            >
+              Add another clause
+            </q-tooltip>
+          </q-btn>
 
           <q-btn
             :data-test="`dashboard-join-condition-remove-${argIndex}`"
@@ -251,7 +279,15 @@
             :disable="modelValue.conditions.length === 1"
             @click="removeCondition(argIndex)"
             class="tw-h-10 tw-w-10"
-          />
+          >
+            <q-tooltip
+              class="bg-grey-8"
+              anchor="top middle"
+              self="bottom middle"
+            >
+              Remove clause
+            </q-tooltip>
+          </q-btn>
         </div>
       </div>
     </div>

From 63e58a04b9a83a1f12cf32b4174fdcce6edd65da Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Fri, 6 Jun 2025 17:27:20 +0530
Subject: [PATCH 58/61] fix: improve button group styling in SortByBtnGrp
 component and adjust line height in DynamicFunctionPopUp for better layout

---
 .../dashboards/addPanel/SortByBtnGrp.vue        | 17 +++++++++++++++--
 .../dynamicFunction/DynamicFunctionPopUp.vue    |  2 ++
 2 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/SortByBtnGrp.vue b/web/src/components/dashboards/addPanel/SortByBtnGrp.vue
index 0f77ff634bc..aaa57f09403 100644
--- a/web/src/components/dashboards/addPanel/SortByBtnGrp.vue
+++ b/web/src/components/dashboards/addPanel/SortByBtnGrp.vue
@@ -1,6 +1,6 @@
 <template>
   Sort By:
-  <q-btn-group>
+  <q-btn-group class="tw-border-none">
     <q-btn
       :class="[!fieldObj.sortBy ? 'selected' : '', 'tw-px-2.5']"
       @click="updateSortOption(null)"
@@ -9,7 +9,7 @@
       data-test="dashboard-sort-by-item-clear"
     />
     <q-btn
-      :class="[fieldObj.sortBy === 'ASC' ? 'selected' : '', 'tw-px-2.5']"
+      :class="[fieldObj.sortBy === 'ASC' ? 'selected' : 'custom-border no-border', 'tw-px-2.5']"
       @click="updateSortOption('ASC')"
       data-test="dashboard-sort-by-item-asc"
       ><AscSort
@@ -65,4 +65,17 @@ export default defineComponent({
   font-weight: bold;
   color: white;
 }
+
+.no-border {
+  border: none !important;
+}
+.custom-border {
+  border-top: 2px solid #d5d5d5 !important;
+  border-bottom: 2px solid #d5d5d5 !important;
+  border-left: 0px solid !important;
+  border-right: 0px solid !important;
+}
+.q-btn {
+  border: none;
+}
 </style>
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
index fd3037ee60d..9629a25b4fc 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/DynamicFunctionPopUp.vue
@@ -258,6 +258,8 @@ export default {
   font-size: 13px;
   font-style: normal;
   font-weight: 400;
+  line-height: 70%;
+  padding-bottom: 3px;
 }
 
 .edit-input {

From 840dd458076381ba20d476ae3ac4ceb8dc6098c2 Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 9 Jun 2025 10:37:28 +0530
Subject: [PATCH 59/61] fix: update text color based on theme and refactor
 class bindings in AddJoinPopUp component for improved styling

---
 web/src/views/Dashboards/addPanel/AddJoinPopUp.vue | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
index bdb585cb7e1..f02f447c270 100644
--- a/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
+++ b/web/src/views/Dashboards/addPanel/AddJoinPopUp.vue
@@ -168,7 +168,10 @@
     <div class="tw-flex tw-items-center tw-gap-4">
       <div class="tw-border-t tw-border-gray-200 tw-flex-1"></div>
       <div
-        class="tw-py-2 tw-text-center tw-text-xs tw-text-gray-700"
+        :class="[
+          'tw-py-2 tw-text-center tw-text-xs',
+          store.state.theme === 'dark' ? 'tw-text-white' : 'tw-text-gray-700',
+        ]"
         v-if="
           modelValue.stream &&
           modelValue.streamAlias &&
@@ -178,7 +181,7 @@
       >
         Joining <span className="tw-font-semibold">{{ mainStream }}</span> with
         <span className="tw-font-semibold">{{ modelValue.stream }}</span> with
-        <span className="tw-text-indigo-600"
+        <span className="text-primary"
           >{{
             modelValue?.joinType?.charAt(0)?.toUpperCase() +
             modelValue?.joinType?.slice(1)
@@ -358,8 +361,6 @@ export default defineComponent({
     },
   },
 
-  emits: ["close"],
-
   setup(props, { emit }) {
     const { t } = useI18n();
     const store = useStore();
@@ -499,6 +500,7 @@ export default defineComponent({
       getStreamsBasedJoinIndex,
       filteredStreamOptions,
       filterStreamOptions,
+      store,
     };
   },
 });

From 24007f9d126ac6781e7a49daf921a0b0ae1c6a2b Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Mon, 9 Jun 2025 11:13:56 +0530
Subject: [PATCH 60/61] fix: standardize menu popup styles across dashboard
 components for improved consistency

---
 .../dashboards/addPanel/BuildFieldPopUp.vue   | 14 ++----------
 .../addPanel/DashboardGeoMapsQueryBuilder.vue | 22 ++++++++++++++-----
 .../addPanel/DashboardMapsQueryBuilder.vue    |  4 ++--
 .../addPanel/DashboardQueryBuilder.vue        |  2 +-
 .../addPanel/DashboardSankeyChartBuilder.vue  |  6 ++---
 5 files changed, 24 insertions(+), 24 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/BuildFieldPopUp.vue b/web/src/components/dashboards/addPanel/BuildFieldPopUp.vue
index f0964285469..6e3a370a138 100644
--- a/web/src/components/dashboards/addPanel/BuildFieldPopUp.vue
+++ b/web/src/components/dashboards/addPanel/BuildFieldPopUp.vue
@@ -15,7 +15,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
 
 <template>
-  <div style="padding: 3px 16px 16px 16px; display: flex; gap: 16px;">
+  <div style="padding: 3px 16px 16px 16px; display: flex; gap: 16px">
     <div>
       <q-input
         dense
@@ -75,14 +75,4 @@ export default defineComponent({
 });
 </script>
 
-<style lang="scss" scoped>
-.field-function-menu-popup {
-  width: 771px;
-  height: 323px;
-  border-radius: 4px;
-  border: 1px solid #d5d5d5;
-  background: #fff;
-  box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.05);
-  padding: 16px;
-}
-</style>
+<style lang="scss" scoped></style>
diff --git a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
index 32f0fd01aa7..569e44faba5 100644
--- a/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardGeoMapsQueryBuilder.vue
@@ -78,10 +78,10 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               :data-test="`dashboard-latitude-item-${latitudeLabel}`"
             >
               <q-menu
-                class="q-pa-md"
+                class="field-function-menu-popup"
                 :data-test="`dashboard-latitude-item-${latitudeLabel}-menu`"
               >
-                <div>
+                <div style="padding: 3px 16px 16px 16px; width: 771px">
                   <DynamicFunctionPopUp
                     v-model="
                       dashboardPanelData.data.queries[
@@ -183,10 +183,10 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               class="q-pl-sm"
             >
               <q-menu
-                class="q-pa-md"
+                class="field-function-menu-popup"
                 :data-test="`dashboard-longitude-item-${longitudeLabel}-menu`"
               >
-                <div>
+                <div style="padding: 3px 16px 16px 16px; width: 771px">
                   <DynamicFunctionPopUp
                     v-model="
                       dashboardPanelData.data.queries[
@@ -288,10 +288,10 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
               class="q-pl-sm"
             >
               <q-menu
-                class="q-pa-md"
+                class="field-function-menu-popup"
                 :data-test="`dashboard-weight-item-${weightLabel}-menu`"
               >
-                <div>
+                <div style="padding: 3px 16px 16px 16px; width: 771px">
                   <DynamicFunctionPopUp
                     v-model="
                       dashboardPanelData.data.queries[
@@ -978,4 +978,14 @@ export default defineComponent({
 .q-field--dense .q-field__marginal {
   height: 34px;
 }
+
+.field-function-menu-popup {
+  width: 771px !important;
+  height: 323px;
+  border-radius: 4px;
+  border: 1px solid #d5d5d5;
+  background: #fff;
+  box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.05);
+  padding: 16px;
+}
 </style>
diff --git a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
index 531107dccbd..237761206d0 100644
--- a/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardMapsQueryBuilder.vue
@@ -81,7 +81,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 class="field-function-menu-popup"
                 :data-test="`dashboard-name-item-${nameLabel}-menu`"
               >
-                <div style="padding: 3px 16px 16px 16px">
+                <div style="padding: 3px 16px 16px 16px; width: 771px">
                   <div>
                     <div class="q-mr-xs q-mb-sm">
                       <DynamicFunctionPopUp
@@ -191,7 +191,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 class="field-function-menu-popup"
                 :data-test="`dashboard-value_for_maps-item-${valueLabel}-menu`"
               >
-                <div style="padding: 3px 16px 16px 16px">
+                <div style="padding: 3px 16px 16px 16px; width: 771px">
                   <div>
                     <div class="q-mr-xs q-mb-sm">
                       <DynamicFunctionPopUp
diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index c51461e3c13..1e9fac456f5 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -115,7 +115,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                       :data-test="`dashboard-x-item-${itemX?.alias}-menu`"
                       class="field-function-menu-popup"
                     >
-                      <div style="padding: 3px 16px 16px 16px">
+                      <div style="padding: 3px 16px 16px 16px; width: 771px">
                         <div>
                           <div class="q-mr-xs q-mb-sm">
                             <DynamicFunctionPopUp
diff --git a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
index c9b56c49745..b4ad3a0e51b 100644
--- a/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardSankeyChartBuilder.vue
@@ -81,7 +81,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 class="field-function-menu-popup"
                 :data-test="`dashboard-source-item-${sourceLabel}-menu`"
               >
-                <div style="padding: 3px 16px 16px 16px">
+                <div style="padding: 3px 16px 16px 16px; width: 771px">
                   <div>
                     <div class="q-mr-xs q-mb-sm">
                       <DynamicFunctionPopUp
@@ -190,7 +190,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 class="field-function-menu-popup"
                 :data-test="`dashboard-target-item-${targetLabel}-menu`"
               >
-                <div style="padding: 3px 16px 16px 16px">
+                <div style="padding: 3px 16px 16px 16px; width: 771px">
                   <div>
                     <div class="q-mr-xs q-mb-sm">
                       <DynamicFunctionPopUp
@@ -299,7 +299,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 class="field-function-menu-popup"
                 :data-test="`dashboard-value-item-${valueLabel}-menu`"
               >
-                <div style="padding: 3px 16px 16px 16px">
+                <div style="padding: 3px 16px 16px 16px; width: 771px">
                   <div>
                     <div class="q-mr-xs q-mb-sm">
                       <DynamicFunctionPopUp

From c6c707d886ed6fcfc048e011b8487d9a9ad4964d Mon Sep 17 00:00:00 2001
From: ktx-abhay <abhay.padamani@kiara.tech>
Date: Tue, 10 Jun 2025 12:23:36 +0530
Subject: [PATCH 61/61] fix: update function validation handling and improve
 menu popup styles for consistency across dashboard components

---
 .../dashboards/addPanel/DashboardQueryBuilder.vue   |  6 +++---
 .../addPanel/dynamicFunction/SelectFunction.vue     |  5 ++---
 web/src/utils/dashboard/convertDataIntoUnitValue.ts | 13 ++++---------
 3 files changed, 9 insertions(+), 15 deletions(-)

diff --git a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
index 1e9fac456f5..f4cb910364a 100644
--- a/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
+++ b/web/src/components/dashboards/addPanel/DashboardQueryBuilder.vue
@@ -276,7 +276,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                       :data-test="`dashboard-b-item-${itemB?.alias}-menu`"
                       class="field-function-menu-popup"
                     >
-                      <div style="padding: 3px 16px 16px 16px">
+                      <div style="padding: 3px 16px 16px 16px; width: 771px">
                         <div>
                           <div class="q-mr-xs q-mb-sm">
                             <DynamicFunctionPopUp
@@ -415,7 +415,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                   :data-test="`dashboard-y-item-${itemY?.alias}-menu`"
                   class="field-function-menu-popup"
                 >
-                  <div style="padding: 3px 16px 16px 16px">
+                  <div style="padding: 3px 16px 16px 16px; width: 771px">
                     <div>
                       <div class="q-mr-xs q-mb-sm">
                         <DynamicFunctionPopUp
@@ -553,7 +553,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                     :data-test="`dashboard-z-item-${itemZ?.alias}-menu`"
                     class="field-function-menu-popup"
                   >
-                    <div style="padding: 3px 16px 16px 16px">
+                    <div style="padding: 3px 16px 16px 16px; width: 771px">
                       <div>
                         <div class="q-mr-xs q-mb-sm">
                           <DynamicFunctionPopUp
diff --git a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
index f9619cec9a1..1f12e5ee124 100644
--- a/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
+++ b/web/src/components/dashboards/addPanel/dynamicFunction/SelectFunction.vue
@@ -211,7 +211,7 @@
 
 <script lang="ts">
 import { ref, watch, toRef, computed, inject } from "vue";
-import functionValidation from "./functionValidation.json";
+import functionValidation from "@/components/dashboards/addPanel/dynamicFunction/functionValidation.json";
 import useDashboardPanelData from "@/composables/useDashboardPanel";
 import { useSelectAutoComplete } from "@/composables/useSelectAutocomplete";
 import HistogramIntervalDropDown from "../HistogramIntervalDropDown.vue";
@@ -289,7 +289,7 @@ export default {
 
     const getValidationForFunction = (functionName: string) => {
       return (
-        functionValidation.find((v) => v.functionName === functionName) ?? {}
+        functionValidation.find((v) => v.functionName === (functionName ?? null)) ?? {}
       );
     };
 
@@ -495,7 +495,6 @@ export default {
 
     return {
       fields,
-      functionValidation,
       // availableFunctions,
       getValidationForFunction,
       canAddArgument,
diff --git a/web/src/utils/dashboard/convertDataIntoUnitValue.ts b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
index 89ba03af00a..61c620fdf8f 100644
--- a/web/src/utils/dashboard/convertDataIntoUnitValue.ts
+++ b/web/src/utils/dashboard/convertDataIntoUnitValue.ts
@@ -1,6 +1,6 @@
 import { date } from "quasar";
 import { CURRENT_DASHBOARD_SCHEMA_VERSION } from "@/utils/dashboard/convertDashboardSchemaVersion";
-import functionValidation from "../../components/dashboards/addPanel/dynamicFunction/functionValidation.json";
+import functionValidation from "@/components/dashboards/addPanel/dynamicFunction/functionValidation.json";
 
 const units: any = {
   bytes: [
@@ -651,7 +651,7 @@ const validateChartFieldsConfiguration = (
     aggregationFunctionError?.forEach((it: any) => {
       // get the selected function schema
       const selectedFunction: any = functionValidation?.find(
-        (fn: any) => fn?.functionName === it?.functionName,
+        (fn: any) => fn?.functionName === (it?.functionName ?? null),
       );
 
       // if function is not found, push error
@@ -1005,14 +1005,9 @@ export function buildSQLQueryFromInput(
   const functionName = fields.functionName;
   const args = Array.isArray(fields.args) ? fields.args : [];
 
-  // If no functionName is provided, return empty string
-  if (!functionName && functionName !== null) {
-    return "";
-  }
-
   // Find the function definition based on the functionName
   const selectedFunction = functionValidation.find(
-    (fn: any) => fn.functionName === functionName,
+    (fn: any) => fn.functionName === (functionName ?? null),
   );
 
   // If the function is not found, return empty string instead of throwing
@@ -1190,7 +1185,7 @@ export function addMissingArgs(fields: any): any {
 
   // Find the function definition in functionValidation
   const functionDef = functionValidation.find(
-    (fn: any) => fn.functionName === functionName,
+    (fn: any) => fn.functionName === (functionName ?? null),
   );
 
   if (!functionDef) {
