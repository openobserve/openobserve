//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "report_dashboards")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub report_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub dashboard_id: String,
    pub tab_names: Json,
    pub variables: Json,
    pub timerange: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::dashboards::Entity",
        from = "Column::DashboardId",
        to = "super::dashboards::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Dashboards,
    #[sea_orm(
        belongs_to = "super::reports::Entity",
        from = "Column::ReportId",
        to = "super::reports::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Reports,
}

impl Related<super::dashboards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dashboards.def()
    }
}

impl Related<super::reports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reports.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
