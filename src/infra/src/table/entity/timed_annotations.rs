//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "timed_annotations")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub dashboard_id: String,
    pub start_time: i64,
    pub end_time: Option<i64>,
    pub title: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub text: Option<String>,
    pub tags: Json,
    pub created_at: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::dashboards::Entity",
        from = "Column::DashboardId",
        to = "super::dashboards::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Dashboards,
    #[sea_orm(has_many = "super::timed_annotation_panels::Entity")]
    TimedAnnotationPanels,
}

impl Related<super::dashboards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dashboards.def()
    }
}

impl Related<super::timed_annotation_panels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TimedAnnotationPanels.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
