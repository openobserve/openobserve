//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "alerts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub org: String,
    pub folder_id: String,
    pub name: String,
    pub stream_type: String,
    pub stream_name: String,
    pub is_real_time: bool,
    pub destinations: Json,
    pub context_attributes: Option<Json>,
    #[sea_orm(column_type = "Text", nullable)]
    pub row_template: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub enabled: bool,
    pub tz_offset: i32,
    pub last_triggered_at: Option<i64>,
    pub last_satisfied_at: Option<i64>,
    pub query_type: i16,
    pub query_conditions: Option<Json>,
    #[sea_orm(column_type = "Text", nullable)]
    pub query_sql: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub query_promql: Option<String>,
    pub query_promql_condition: Option<Json>,
    pub query_aggregation: Option<Json>,
    #[sea_orm(column_type = "Text", nullable)]
    pub query_vrl_function: Option<String>,
    pub query_search_event_type: Option<i16>,
    pub query_multi_time_range: Option<Json>,
    pub trigger_threshold_operator: String,
    pub trigger_period_seconds: i64,
    pub trigger_threshold_count: i64,
    pub trigger_frequency_type: i16,
    pub trigger_frequency_seconds: i64,
    #[sea_orm(column_type = "Text", nullable)]
    pub trigger_frequency_cron: Option<String>,
    pub trigger_frequency_cron_timezone: Option<String>,
    pub trigger_silence_seconds: i64,
    pub trigger_tolerance_seconds: Option<i64>,
    pub owner: Option<String>,
    pub last_edited_by: Option<String>,
    pub updated_at: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::folders::Entity",
        from = "Column::FolderId",
        to = "super::folders::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Folders,
}

impl Related<super::folders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Folders.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
