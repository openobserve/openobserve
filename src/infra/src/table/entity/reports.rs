//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "reports")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub org: String,
    pub folder_id: String,
    pub name: String,
    pub title: String,
    pub description: Option<String>,
    pub enabled: bool,
    pub frequency: Json,
    pub destinations: Json,
    pub message: Option<String>,
    pub timezone: String,
    pub tz_offset: i32,
    pub owner: Option<String>,
    pub last_edited_by: Option<String>,
    pub created_at: i64,
    pub updated_at: Option<i64>,
    pub start_at: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::folders::Entity",
        from = "Column::FolderId",
        to = "super::folders::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Folders,
    #[sea_orm(has_many = "super::report_dashboards::Entity")]
    ReportDashboards,
}

impl Related<super::folders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Folders.def()
    }
}

impl Related<super::report_dashboards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReportDashboards.def()
    }
}

impl Related<super::dashboards::Entity> for Entity {
    fn to() -> RelationDef {
        super::report_dashboards::Relation::Dashboards.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::report_dashboards::Relation::Reports.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
