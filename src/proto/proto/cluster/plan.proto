syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.openobserve.cluster";
option java_outer_classname = "planProto";

package cluster;

import "datafusion_common/datafusion_common.proto";
import "datafusion/datafusion.proto";
import "cluster/common.proto";

message PhysicalPlanNode {
  oneof plan {
    NewEmptyExecNode          empty_exec = 1;
    AggregateTopkExecNode aggregate_topk = 2;
    StreamingAggsExecNode streaming_aggs = 3;
  }
}

message NewEmptyExecNode {
    string                                 name = 1;
    datafusion_common.Schema             schema = 2;
    repeated uint64                  projection = 3;
    repeated datafusion.LogicalExprNode filters = 4;
    optional uint64                       limit = 5;
    bool                         sorted_by_time = 6;
    datafusion_common.Schema        full_schema = 7;
}

message AggregateTopkExecNode {
  string  sort_field = 1;
  bool    descending = 2;
  uint64       limit = 3;
}

message StreamingAggsExecNode {
  string                                  id = 1;
  int64                           start_time = 2;
  int64                             end_time = 3;
  uint64                   target_partitions = 4;
  bool                 is_complete_cache_hit = 5;
  repeated string               cached_files = 6;
  datafusion.PhysicalPlanNode aggregate_plan = 7;
}

// Search request
message FlightSearchRequest {
    QueryIdentifier         query_identifier = 1;
    SearchInfo                   search_info = 2;
    IndexInfo                     index_info = 3;
    SuperClusterInfo      super_cluster_info = 4;
}

message QueryIdentifier {
    string                       trace_id = 1;
    string                         org_id = 2;
    string                    stream_type = 3;
    uint32                      partition = 4; // the partition number of the remote scan
    string                         job_id = 5; // the unique id for each remote scan 
    bool                      enrich_mode = 6; // need special logic for loading enrich table
}

message SearchInfo {
    bytes                            plan = 1;
    repeated int64           file_id_list = 2;
    int64                      start_time = 4;
    int64                        end_time = 5;
    int64                         timeout = 6;
    bool                        use_cache = 7;
    int64              histogram_interval = 8;
}

message IndexInfo {
    bool                   use_inverted_index = 1;
    string                    index_condition = 2;
    repeated KvItem                equal_keys = 3;
    repeated string            match_all_keys = 4;
    IdxOptimizeMode       index_optimize_mode = 5;
}

message SuperClusterInfo {
    bool                 is_super_cluster = 1;
    optional string               user_id = 2;
    optional string            work_group = 3;
    optional string     search_event_type = 4; // use for super cluster
    optional bool              local_mode = 5; // use for super cluster
}

message IdxOptimizeMode {
  oneof mode {
    SimpleSelect    simple_select     = 1;
    SimpleCount     simple_count      = 2;
    SimpleHistogram simple_histogram  = 3;
    SimpleTopN      simple_topn       = 4;
    SimpleDistinct  simple_distinct   = 5;
  }
}

message SimpleSelect {
  uint32 index = 1;
  bool     asc = 2;
}

message SimpleCount {}

message SimpleHistogram {
  int64 min_value = 1;
  uint64 bucket_width = 2;
  uint32 num_buckets = 3;
}

message SimpleTopN {
  string field = 1;
  uint32 limit = 2;
  bool     asc = 3;
}

message SimpleDistinct {
  string field = 1;
  uint32 limit = 2;
  bool     asc = 3;
}

message KvItem {
    string   key = 1;
    string value = 2;
}
