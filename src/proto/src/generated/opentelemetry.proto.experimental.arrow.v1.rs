// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
#[derive(serde::Deserialize)]
pub struct BatchArrowRecords {
    #[prost(int64, tag = "1")]
    pub batch_id: i64,
    #[prost(message, repeated, tag = "2")]
    pub arrow_payloads: ::prost::alloc::vec::Vec<ArrowPayload>,
    #[prost(bytes = "vec", tag = "3")]
    pub headers: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
#[derive(serde::Deserialize)]
pub struct ArrowPayload {
    #[prost(string, tag = "1")]
    pub schema_id: ::prost::alloc::string::String,
    #[prost(enumeration = "ArrowPayloadType", tag = "2")]
    pub r#type: i32,
    #[prost(bytes = "vec", tag = "3")]
    pub record: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchStatus {
    #[prost(int64, tag = "1")]
    pub batch_id: i64,
    #[prost(enumeration = "StatusCode", tag = "2")]
    pub status_code: i32,
    #[prost(string, tag = "3")]
    pub status_message: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ArrowPayloadType {
    Unknown = 0,
    ResourceAttrs = 1,
    ScopeAttrs = 2,
    UnivariateMetrics = 10,
    NumberDataPoints = 11,
    SummaryDataPoints = 12,
    HistogramDataPoints = 13,
    ExpHistogramDataPoints = 14,
    NumberDpAttrs = 15,
    SummaryDpAttrs = 16,
    HistogramDpAttrs = 17,
    ExpHistogramDpAttrs = 18,
    NumberDpExemplars = 19,
    HistogramDpExemplars = 20,
    ExpHistogramDpExemplars = 21,
    NumberDpExemplarAttrs = 22,
    HistogramDpExemplarAttrs = 23,
    ExpHistogramDpExemplarAttrs = 24,
    MultivariateMetrics = 25,
    Logs = 30,
    LogAttrs = 31,
    Spans = 40,
    SpanAttrs = 41,
    SpanEvents = 42,
    SpanLinks = 43,
    SpanEventAttrs = 44,
    SpanLinkAttrs = 45,
}
impl ArrowPayloadType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::ResourceAttrs => "RESOURCE_ATTRS",
            Self::ScopeAttrs => "SCOPE_ATTRS",
            Self::UnivariateMetrics => "UNIVARIATE_METRICS",
            Self::NumberDataPoints => "NUMBER_DATA_POINTS",
            Self::SummaryDataPoints => "SUMMARY_DATA_POINTS",
            Self::HistogramDataPoints => "HISTOGRAM_DATA_POINTS",
            Self::ExpHistogramDataPoints => "EXP_HISTOGRAM_DATA_POINTS",
            Self::NumberDpAttrs => "NUMBER_DP_ATTRS",
            Self::SummaryDpAttrs => "SUMMARY_DP_ATTRS",
            Self::HistogramDpAttrs => "HISTOGRAM_DP_ATTRS",
            Self::ExpHistogramDpAttrs => "EXP_HISTOGRAM_DP_ATTRS",
            Self::NumberDpExemplars => "NUMBER_DP_EXEMPLARS",
            Self::HistogramDpExemplars => "HISTOGRAM_DP_EXEMPLARS",
            Self::ExpHistogramDpExemplars => "EXP_HISTOGRAM_DP_EXEMPLARS",
            Self::NumberDpExemplarAttrs => "NUMBER_DP_EXEMPLAR_ATTRS",
            Self::HistogramDpExemplarAttrs => "HISTOGRAM_DP_EXEMPLAR_ATTRS",
            Self::ExpHistogramDpExemplarAttrs => "EXP_HISTOGRAM_DP_EXEMPLAR_ATTRS",
            Self::MultivariateMetrics => "MULTIVARIATE_METRICS",
            Self::Logs => "LOGS",
            Self::LogAttrs => "LOG_ATTRS",
            Self::Spans => "SPANS",
            Self::SpanAttrs => "SPAN_ATTRS",
            Self::SpanEvents => "SPAN_EVENTS",
            Self::SpanLinks => "SPAN_LINKS",
            Self::SpanEventAttrs => "SPAN_EVENT_ATTRS",
            Self::SpanLinkAttrs => "SPAN_LINK_ATTRS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "RESOURCE_ATTRS" => Some(Self::ResourceAttrs),
            "SCOPE_ATTRS" => Some(Self::ScopeAttrs),
            "UNIVARIATE_METRICS" => Some(Self::UnivariateMetrics),
            "NUMBER_DATA_POINTS" => Some(Self::NumberDataPoints),
            "SUMMARY_DATA_POINTS" => Some(Self::SummaryDataPoints),
            "HISTOGRAM_DATA_POINTS" => Some(Self::HistogramDataPoints),
            "EXP_HISTOGRAM_DATA_POINTS" => Some(Self::ExpHistogramDataPoints),
            "NUMBER_DP_ATTRS" => Some(Self::NumberDpAttrs),
            "SUMMARY_DP_ATTRS" => Some(Self::SummaryDpAttrs),
            "HISTOGRAM_DP_ATTRS" => Some(Self::HistogramDpAttrs),
            "EXP_HISTOGRAM_DP_ATTRS" => Some(Self::ExpHistogramDpAttrs),
            "NUMBER_DP_EXEMPLARS" => Some(Self::NumberDpExemplars),
            "HISTOGRAM_DP_EXEMPLARS" => Some(Self::HistogramDpExemplars),
            "EXP_HISTOGRAM_DP_EXEMPLARS" => Some(Self::ExpHistogramDpExemplars),
            "NUMBER_DP_EXEMPLAR_ATTRS" => Some(Self::NumberDpExemplarAttrs),
            "HISTOGRAM_DP_EXEMPLAR_ATTRS" => Some(Self::HistogramDpExemplarAttrs),
            "EXP_HISTOGRAM_DP_EXEMPLAR_ATTRS" => Some(Self::ExpHistogramDpExemplarAttrs),
            "MULTIVARIATE_METRICS" => Some(Self::MultivariateMetrics),
            "LOGS" => Some(Self::Logs),
            "LOG_ATTRS" => Some(Self::LogAttrs),
            "SPANS" => Some(Self::Spans),
            "SPAN_ATTRS" => Some(Self::SpanAttrs),
            "SPAN_EVENTS" => Some(Self::SpanEvents),
            "SPAN_LINKS" => Some(Self::SpanLinks),
            "SPAN_EVENT_ATTRS" => Some(Self::SpanEventAttrs),
            "SPAN_LINK_ATTRS" => Some(Self::SpanLinkAttrs),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StatusCode {
    Ok = 0,
    Canceled = 1,
    InvalidArgument = 3,
    DeadlineExceeded = 4,
    PermissionDenied = 7,
    ResourceExhausted = 8,
    Aborted = 10,
    Internal = 13,
    Unavailable = 14,
    Unauthenticated = 16,
}
impl StatusCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Ok => "OK",
            Self::Canceled => "CANCELED",
            Self::InvalidArgument => "INVALID_ARGUMENT",
            Self::DeadlineExceeded => "DEADLINE_EXCEEDED",
            Self::PermissionDenied => "PERMISSION_DENIED",
            Self::ResourceExhausted => "RESOURCE_EXHAUSTED",
            Self::Aborted => "ABORTED",
            Self::Internal => "INTERNAL",
            Self::Unavailable => "UNAVAILABLE",
            Self::Unauthenticated => "UNAUTHENTICATED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OK" => Some(Self::Ok),
            "CANCELED" => Some(Self::Canceled),
            "INVALID_ARGUMENT" => Some(Self::InvalidArgument),
            "DEADLINE_EXCEEDED" => Some(Self::DeadlineExceeded),
            "PERMISSION_DENIED" => Some(Self::PermissionDenied),
            "RESOURCE_EXHAUSTED" => Some(Self::ResourceExhausted),
            "ABORTED" => Some(Self::Aborted),
            "INTERNAL" => Some(Self::Internal),
            "UNAVAILABLE" => Some(Self::Unavailable),
            "UNAUTHENTICATED" => Some(Self::Unauthenticated),
            _ => None,
        }
    }
}
