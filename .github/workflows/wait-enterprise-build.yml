name: Wait for Enterprise Build

on:
  pull_request:
    branches:
      - "*"
    types: [opened, synchronize, ready_for_review]
  repository_dispatch:
    types: [enterprise-build-complete]

env:
  GITHUB_HEAD_SHA: ${{ github.event.pull_request.head.sha || github.event.client_payload.commit_sha }}

jobs:
  trigger-build:
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false }} # Only run for PRs which are not from forks
    runs-on: ubuntu-latest
    permissions:
      statuses: write
      pull-requests: write
      actions: read

    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          private-key: ${{ secrets.PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}
          owner: ${{ github.repository_owner }}

      - name: Set build short sha
        shell: bash
        run: |
          unset SHORT_COMMIT_ID
          echo "SHORT_COMMIT_ID=${GITHUB_HEAD_SHA:0:7}" >> $GITHUB_ENV

      - name: Set initial pending status
        env:
          TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          curl -X POST \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ env.GITHUB_HEAD_SHA }} \
            -d '{
              "state": "pending",
              "target_url": "https://github.com/openobserve/o2-enterprise/actions",
              "description": "Enterprise build is queued",
              "context": "enterprise-build/build"
            }'

      - name: Trigger enterprise build
        uses: peter-evans/repository-dispatch@v3
        env:
          TOKEN: ${{ steps.generate_token.outputs.token }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
          BUILD_ID: ${{ github.run_id }}-${{ env.SHORT_COMMIT_ID }}
        with:
          token: ${{ env.TOKEN }}
          repository: openobserve/o2-enterprise
          event-type: initiate-enterprise-build
          client-payload: |
            {
              "o2_enterprise_repo": "${{ env.BRANCH_NAME }}",
              "o2_opensource_repo": "${{ env.BRANCH_NAME }}",
              "o2_commit_id": "${{ env.SHORT_COMMIT_ID }}",
              "build_id": "${{ env.BUILD_ID }}",
              "commit_sha": "${{ env.GITHUB_HEAD_SHA }}",
              "callback_repo": "${{ github.repository }}"
            }

  handle-callback:
    if: ${{ github.event_name == 'repository_dispatch' && github.event.action == 'enterprise-build-complete' }}
    runs-on: ubuntu-latest
    outputs:
      conclusion: ${{ steps.extract_result.outputs.conclusion }}
      run_url: ${{ steps.extract_result.outputs.run_url }}

    steps:

      - name: Extract callback result
        id: extract_result
        env:
          CONCLUSION: ${{ github.event.client_payload.conclusion }}
          RUN_URL: ${{ github.event.client_payload.run_url }}
          COMMIT_SHA: ${{ github.event.client_payload.commit_sha }}
        run: |
          echo "conclusion=$CONCLUSION" >> $GITHUB_OUTPUT
          echo "run_url=$RUN_URL" >> $GITHUB_OUTPUT
          echo "Enterprise build completed with: $CONCLUSION"

      - name: Log enterprise build result
        env:
          CONCLUSION: ${{ steps.extract_result.outputs.conclusion }}
          RUN_URL: ${{ steps.extract_result.outputs.run_url }}
        run: |
          echo "Enterprise build completed with: $CONCLUSION"
          echo "Build URL: $RUN_URL"

  wait-for-enterprise:
    needs: [trigger-build, handle-callback]
    if: ${{ always() }}
    runs-on: ubuntu-latest

    steps:
      - name: Check enterprise build result
        env:
          TRIGGER_RESULT: ${{ needs.trigger-build.result }}
          CALLBACK_RESULT: ${{ needs.handle-callback.result }}
          ENTERPRISE_CONCLUSION: ${{ needs.handle-callback.outputs.conclusion }}
        run: |
          echo "Trigger job result: $TRIGGER_RESULT"
          echo "Callback job result: $CALLBACK_RESULT"
          echo "Enterprise build conclusion: $ENTERPRISE_CONCLUSION"

          if [ "$TRIGGER_RESULT" != "success" ]; then
            echo "Failed to trigger enterprise build"
            exit 1
          fi

          if [ "$CALLBACK_RESULT" != "success" ]; then
            echo "Enterprise build callback failed or timed out"
            exit 1
          fi

          if [ "$ENTERPRISE_CONCLUSION" != "success" ]; then
            echo "Enterprise build failed with: $ENTERPRISE_CONCLUSION"
            exit 1
          fi

          echo "Enterprise build completed successfully"