name: Build PR Docker Image

on:
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - "**.md"
      - "**.yml"
      - "**.yaml"

env:
  AWS_REGION: us-east-1

jobs:
  build_pr_image_amd64:
    name: build_pr_image_amd64
    permissions:
      id-token: write
      contents: read
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && github.event.pull_request.head.repo.fork == false
    runs-on: ubicloud-standard-8
    steps:
      - name: Remove unused tools
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Clone the current repo
        uses: actions/checkout@v5
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-07-20

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: amd64
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"
      - uses: actions/setup-node@v5
        with:
          node-version: 22

      - name: Build frontend code
        run: cd web && npm install && npm run build

      - name: Print rustc cfg
        run: rustc -C target-cpu=native --print cfg

      - name: Build and run binary
        run: |
          cargo build --features mimalloc --profile release-profiling --target x86_64-unknown-linux-gnu
          mkdir -p bin
          mv target/x86_64-unknown-linux-gnu/release-profiling/openobserve bin/openobserve

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::058694856476:role/GitHubActionsRole
          role-session-name: GithubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set GIT_TAG env
        run: |
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short=7 HEAD)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: deploy/build/Dockerfile.pr
          context: .
          tags: |
            public.ecr.aws/zinclabs/openobserve-dev:${{ env.GIT_TAG }}-${{ env.GIT_HASH}}-amd64
          push: true
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64
          platforms: linux/amd64

  build_pr_image_arm64:
    name: build_pr_image_arm64
    permissions:
      id-token: write
      contents: read
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && github.event.pull_request.head.repo.fork == false
    runs-on: "ubicloud-standard-16-arm"
    steps:
      - name: Remove unused tools
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Clone the current repo
        uses: actions/checkout@v5
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-07-20

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: arm64
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"
      - uses: actions/setup-node@v5
        with:
          node-version: 22

      - name: Build frontend code
        run: cd web && npm install && npm run build

      - name: Print rustc cfg
        run: rustc -C target-cpu=native --print cfg

      - name: Build and run binary
        run: |
          cargo build --features mimalloc --profile release-profiling --target aarch64-unknown-linux-gnu
          mkdir -p bin
          mv target/aarch64-unknown-linux-gnu/release-profiling/openobserve bin/openobserve

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::058694856476:role/GitHubActionsRole
          role-session-name: GithubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set GIT_TAG env
        run: |
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short=7 HEAD)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: deploy/build/Dockerfile.pr
          context: .
          tags: |
            public.ecr.aws/zinclabs/openobserve-dev:${{ env.GIT_TAG }}-${{ env.GIT_HASH}}-arm64
          push: true
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64
          platforms: linux/arm64

  build:
    needs: [build_pr_image_amd64, build_pr_image_arm64]
    if: ${{ needs.build_pr_image_amd64.result == 'success' && needs.build_pr_image_arm64.result == 'success' }}
    runs-on: ubicloud-standard-16-arm
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone the current repo
        uses: actions/checkout@v5
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          fetch-depth: 0
          fetch-tags: true
      - name: Set GIT_TAG env
        run: |
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short=7 HEAD)" >> $GITHUB_ENV
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::058694856476:role/GitHubActionsRole
          role-session-name: GithubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - uses: int128/docker-manifest-create-action@v2
        with:
          tags: |
            public.ecr.aws/zinclabs/openobserve-dev:${{ env.GIT_TAG }}-${{ env.GIT_HASH}}
          sources: |
            public.ecr.aws/zinclabs/openobserve-dev:${{ env.GIT_TAG }}-${{ env.GIT_HASH}}-amd64
            public.ecr.aws/zinclabs/openobserve-dev:${{ env.GIT_TAG }}-${{ env.GIT_HASH}}-arm64

  build_pr_image_summary:
    runs-on: ubuntu-latest
    permissions: {}
    needs: [build_pr_image_amd64, build_pr_image_arm64, build]
    if: always()
    steps:
      - name: Check build results
        run: |
          if [ "${{ needs.build_pr_image_amd64.result }}" == "success" ] || [ "${{ needs.build_pr_image_amd64.result }}" == "skipped" ]; then
            echo "AMD64 build passed or skipped"
          else
            echo "AMD64 build failed"
            exit 1
          fi

          if [ "${{ needs.build_pr_image_arm64.result }}" == "success" ] || [ "${{ needs.build_pr_image_arm64.result }}" == "skipped" ]; then
            echo "ARM64 build passed or skipped"
          else
            echo "ARM64 build failed"
            exit 1
          fi

          if [ "${{ needs.build.result }}" == "success" ] || [ "${{ needs.build.result }}" == "skipped" ]; then
            echo "Manifest build passed or skipped"
          else
            echo "Manifest build failed"
            exit 1
          fi

          echo "All builds completed successfully"
