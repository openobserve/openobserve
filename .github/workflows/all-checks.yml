permissions:
  contents: read
name: All Checks

on:
  pull_request:
    branches:
      - "*"

jobs:
  all-checks:
    name: All checks passed
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Wait for other workflow runs to complete
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.payload.pull_request.head.sha;
            
            // Define the workflows we need to wait for
            const requiredWorkflows = [
              'Unit tests',
              'Security audit', 
              'Licenses checker',
              'JS Licenses checker',
              'PR Title Checker',
              'Playwright UI Tests',
              'API Integration Test'
            ];
            
            console.log(`Waiting for workflows to complete for SHA: ${sha}`);
            
            let maxAttempts = 720; // 4 hours with 20 second intervals
            let attempt = 0;
            
            while (attempt < maxAttempts) {
              attempt++;
              
              // Log progress every 15 attempts (5 minutes)
              if (attempt % 15 === 0) {
                console.log(`⏱️  Still waiting... Attempt ${attempt}/${maxAttempts} (${Math.round(attempt * 20 / 60)} minutes elapsed)`);
              }
              
              // Get all workflow runs for this SHA
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
                owner,
                repo,
                head_sha: sha,
                per_page: 100
              });
              
              // Filter to only the workflows we care about
              const relevantRuns = workflowRuns.workflow_runs.filter(run => 
                requiredWorkflows.includes(run.name) && run.head_sha === sha
              );
              
              // Also get count of all workflows for this SHA for visibility
              const allWorkflowsForSha = workflowRuns.workflow_runs.filter(run => run.head_sha === sha);
              
              if (attempt % 15 === 0) {
                console.log(`📊 Found ${allWorkflowsForSha.length} total workflows, ${relevantRuns.length} required workflows for this SHA`);
              }
              
              // Check status of each required workflow
              let allComplete = true;
              let anyFailed = false;
              let completedCount = 0;
              
              for (const workflowName of requiredWorkflows) {
                const runs = relevantRuns.filter(run => run.name === workflowName);
                
                if (runs.length === 0) {
                  if (attempt % 15 === 0) {
                    console.log(`❓ Workflow "${workflowName}" not found or not started yet`);
                  }
                  allComplete = false;
                  continue;
                }
                
                // Get the latest run for this workflow
                const latestRun = runs.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0];
                
                if (attempt % 15 === 0) {
                  console.log(`📊 Workflow "${workflowName}": ${latestRun.status} / ${latestRun.conclusion}`);
                }
                
                if (latestRun.status !== 'completed') {
                  allComplete = false;
                } else if (latestRun.conclusion !== 'success') {
                  console.log(`❌ Workflow "${workflowName}" failed with conclusion: ${latestRun.conclusion}`);
                  anyFailed = true;
                } else {
                  completedCount++;
                }
              }
              
              if (attempt % 15 === 0) {
                console.log(`✅ Progress: ${completedCount}/${requiredWorkflows.length} required workflows completed`);
              }
              
              if (anyFailed) {
                core.setFailed('One or more required workflows failed');
                return;
              }
              
              if (allComplete) {
                console.log('✅ All required workflows completed successfully!');
                return;
              }
              
              // Wait 20 seconds before checking again
              await new Promise(resolve => setTimeout(resolve, 20000));
            }
            
            core.setFailed('Timeout waiting for required workflows to complete after 4 hours');
            
      - name: Success message
        run: echo "✅ All required checks passed successfully!"
