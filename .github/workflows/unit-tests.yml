name: Unit tests
permissions:
  contents: read

on:
  push:
    branches:
      - "main"
    paths:
      - "src/**"
      - "web/**"
      - ".github/workflows/unit-tests.yml"
  pull_request:
    branches:
      - "*"
    paths:
      - "src/**"
      - "web/**"
      - ".github/workflows/unit-tests.yml"

env:
  COLUMNS: 150
  ZO_RESULT_CACHE_ENABLED: true

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}-${{ github.run_id }}
#   cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      web-changed: ${{ steps.changes.outputs.web }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'src/**'
            web:
              - 'web/**'

  unit_tests:
    needs: detect-changes
    if: needs.detect-changes.outputs.api-changed == 'true'
    runs-on:
      labels: ubicloud-standard-8

    services:
      postgres:
        image: postgres:17.5-alpine3.22
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mysql:
        image: mysql:9.3
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: mysql
        ports:
          - 3306:3306

    steps:
      - name: Clone the current repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-05-20
          targets: x86_64-unknown-linux-gnu

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run clippy lints
        run: cargo --config net.git-fetch-with-cli=true clippy -- -D warnings

      - uses: taiki-e/install-action@v2
        with:
          tool: nextest
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"

      - name: Simulate building frontend code
        run: mkdir -p web/dist && touch web/dist/index.html

      - name: Print rustc cfg
        run: rustc -C target-cpu=native --print cfg

      - name: Run unit tests
        run: |
          # required for all dbs
          export ZO_INTERNAL_GRPC_TOKEN=fake
          export ZO_TEXT_DATA_TYPE=text

          # setup and run with postgres
          echo "Running with postgres"
          export ZO_META_STORE=postgres
          export ZO_META_POSTGRES_DSN=postgres://postgres:password@localhost:5432/postgres
          ./coverage.sh run-cov

          # cleanup
          rm -rf data
          rm -rf ./json
          rm -rf ./src/infra/data

          # Run wih sqlite
          echo "Running with sqlite"
          export ZO_META_STORE=sqlite
          export ZO_META_POSTGRES_DSN=""
          ./coverage.sh run-cov

          # cleanup
          rm -rf data
          rm -rf ./json
          rm -rf ./src/infra/data

          # setup and run with mysql
          echo "Running with mysql"
          export ZO_META_STORE=mysql
          export ZO_META_MYSQL_DSN=mysql://root:password@localhost:3306/mysql
          ./coverage.sh run-cov

          # finally print the coverage data
          ./coverage.sh check

  ui_unit_tests:
    needs: detect-changes
    if: needs.detect-changes.outputs.web-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Clone the current repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: web
        run: npm ci

      - name: Run frontend unit tests with coverage and check thresholds
        working-directory: web
        run: ./coverage.sh check
