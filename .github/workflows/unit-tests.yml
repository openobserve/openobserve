name: Unit tests

on:
  push:
    branches:
      - "main"
    paths-ignore:
      - "**.md"
      - "**.yml"
      - "**.yaml"
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - "**.md"
      - "**.yml"
      - "**.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  COLUMNS: 150
  ZO_RESULT_CACHE_ENABLED: true

jobs:
  backend_unit_tests:
    runs-on:
      labels: ubicloud-standard-8
    permissions:
      contents: read

    # Note: Services always start regardless of conditional logic in steps.
    # GitHub Actions does not support conditional services.
    services:
      postgres:
        image: postgres:17.5-alpine3.22
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Clone the current repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check if API code has changes
        id: check_changes
        run: |
          if git diff --name-only origin/${{ github.base_ref || 'main' }} ${{ github.sha }} | grep -qE '^src/|^Cargo\.(toml|lock)$'; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust Toolchain
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-07-20
          targets: x86_64-unknown-linux-gnu
      - uses: taiki-e/install-action@v2
        if: steps.check_changes.outputs.has_changes == 'true'
        with:
          tool: nextest
      - uses: Swatinem/rust-cache@v2
        if: steps.check_changes.outputs.has_changes == 'true'
        with:
          cache-on-failure: true
      - name: Install Protoc
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"

      - name: Simulate building frontend code
        if: steps.check_changes.outputs.has_changes == 'true'
        run: mkdir -p web/dist && touch web/dist/index.html

      - name: Print rustc cfg
        if: steps.check_changes.outputs.has_changes == 'true'
        run: rustc -C target-cpu=native --print cfg

      - name: Check code formatting
        if: steps.check_changes.outputs.has_changes == 'true'
        run: cargo fmt --all -- --check

      - name: Run clippy
        if: steps.check_changes.outputs.has_changes == 'true'
        run: cargo --config net.git-fetch-with-cli=true clippy -- -D warnings

      - name: Run unit tests
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # required for all dbs
          export ZO_INTERNAL_GRPC_TOKEN=fake
          export ZO_TEXT_DATA_TYPE=text

          # setup and run with postgres
          echo "Running with postgres"
          export ZO_META_STORE=postgres
          export ZO_META_POSTGRES_DSN=postgres://postgres:password@localhost:5432/postgres
          ./coverage.sh run-cov

          # cleanup
          rm -rf data ./json ./src/infra/data

          # Run with sqlite
          echo "Running with sqlite"
          export ZO_META_STORE=sqlite
          export ZO_META_POSTGRES_DSN=""
          ./coverage.sh run-cov

          # finally check the coverage data
          ./coverage.sh check

  ui_unit_tests:
    runs-on:
      labels: ubicloud-standard-8
    permissions:
      contents: read

    steps:
      - name: Clone the current repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check if frontend code has changes
        id: check_changes
        run: |
          if git diff --name-only origin/${{ github.base_ref || 'main' }} ${{ github.sha }} | grep -q "^web/"; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/setup-node@v5
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        if: steps.check_changes.outputs.has_changes == 'true'
        working-directory: web
        run: npm ci

      - name: Run frontend unit tests with coverage and check thresholds
        if: steps.check_changes.outputs.has_changes == 'true'
        working-directory: web
        run: ./coverage.sh check

  unit_tests_summary:
    runs-on: ubuntu-latest
    permissions: {}
    needs: [backend_unit_tests, ui_unit_tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.backend_unit_tests.result }}" == "success" ] || [ "${{ needs.backend_unit_tests.result }}" == "skipped" ]; then
            echo "Backend tests passed or skipped"
          else
            echo "Backend tests failed"
            exit 1
          fi

          if [ "${{ needs.ui_unit_tests.result }}" == "success" ] || [ "${{ needs.ui_unit_tests.result }}" == "skipped" ]; then
            echo "UI tests passed or skipped"
          else
            echo "UI tests failed"
            exit 1
          fi

          echo "All tests completed successfully"
