name: Release Webhook Notification

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed

jobs:
  notify-webhook:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: repo-openobserve-standard-4
    steps:
      - name: Get release tag from workflow event
        run: |
          # For tag-based releases, use head_branch. For manual releases, get latest release by date
          if [[ "$WORKFLOW_NAME" == "Release Version" ]]; then
            echo "RELEASE_TAG=$HEAD_BRANCH" >> $GITHUB_ENV
            echo "Tag-based release tag: $HEAD_BRANCH"
          else
            echo "Manual release - will get latest release from API"
            echo "RELEASE_TAG=latest" >> $GITHUB_ENV
          fi
        env:
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
          WORKFLOW_NAME: ${{ github.event.workflow_run.name }}

      - name: Send release notification to webhook
        uses: actions/github-script@v7
        with:
          script: |
            let release;
            const tag = process.env.RELEASE_TAG;
            
            if (tag === 'latest') {
              // For manual releases, get the release that was just created
              // We need to find releases created around the workflow run time
              const workflowRunTime = new Date(process.env.WORKFLOW_RUN_CREATED_AT);
              const timeBuffer = 10 * 60 * 1000; // 10 minutes buffer
              
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 10
              });
              
              if (releases.length === 0) {
                console.log('No releases found');
                return;
              }
              
              // Find the most recent release created around the workflow run time
              const recentRelease = releases.find(r => {
                const releaseTime = new Date(r.created_at);
                const timeDiff = Math.abs(releaseTime - workflowRunTime);
                return timeDiff <= timeBuffer;
              });
              
              release = recentRelease || releases[0];
              console.log(`Using manual release: ${release.tag_name} (created: ${release.created_at})`);
            } else {
              // For tag-based releases, get by specific tag
              const { data: releaseData } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              release = releaseData;
              console.log(`Using tag-based release: ${tag}`);
            }

            function cleanChangelog(changelog) {
              if (!changelog) return '';
              return changelog
                .split(/\r?\n/)
                .map(line => {
                  if (line.toLowerCase().includes('full changelog')) return '';
                  line = line.replace(/by\s+@[\w-]+.*$/i, '');
                  line = line.replace(/@\w+/g, '');
                  line = line.replace(/\bhttps?:\/\/\S*pull\S*/gi, '');
                  return line.trim();
                })
                .filter(line => line.length > 0)
                .join('\n');
            }

            const cleanedBody = cleanChangelog(release.body);
            const payload = {
              version: release.tag_name,
              release_name: release.name,
              release_url: release.html_url,
              changelog: cleanedBody || 'No release notes provided',
              type: 'PUBLIC',
              date: release.published_at
            };

            try {
              const response = await fetch(`${process.env.STRAPI_WEBHOOK_URL}/api/github-releases?status=draft`, {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${process.env.STRAPI_API_TOKEN}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({data: payload})
              });

              if (!response.ok) {
                throw new Error(`Webhook request failed: ${response.status} ${response.statusText}`);
              }
              console.log('Response status:', response.status);
            } catch (error) {
              console.error('Failed to send webhook notification:', error);
              core.setFailed(error.message);
            }
        env:
          STRAPI_WEBHOOK_URL: ${{ secrets.STRAPI_WEBHOOK_URL }}
          STRAPI_API_TOKEN: ${{ secrets.STRAPI_API_TOKEN }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
          WORKFLOW_RUN_CREATED_AT: ${{ github.event.workflow_run.created_at }}